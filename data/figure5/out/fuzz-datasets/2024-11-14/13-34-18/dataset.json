{"task_dist":{"input_dist":"(fillrand 30)","input_type":"list","grammar":"PCFG:\n  ?lets -> (letII ?int (λk -> (map (λstate -> ?int) (scanl (λacc x -> ?int) 0 (take ?int #2))))) [1.0]\n  ?int -> randnat [0.4] | #int [0.3-0.0] | 0 [0.008-0.04] | 1 [0.008-0.04] | 2 [0.008-0.04] | 3 [0.008-0.04] | 4 [0.008-0.04] | 5 [0.008-0.04] | 6 [0.008-0.04] | 7 [0.008-0.04] | 8 [0.008-0.04] | 9 [0.008-0.04] | (letII ?int (λx -> (inc ?int))) [0.01] | (letII ?int (λx -> (+ ?int ?int))) [0.01] | (letII ?int (λx -> (- ?int ?int))) [0.01] | (letII ?int (λx -> (case ?int of O => ?int | S => (λn -> ?int)))) [0.01] | (letII ?int (λx -> (case ?bool of True => ?int | False => ?int))) [0.01] | (inc ?int) [0.04] | (+ ?int ?int) [0.04] | (- ?int ?int) [0.04] | (case ?int of O => ?int | S => (λn -> ?int)) [0.04] | (case ?bool of True => ?int | False => ?int) [0.04]\n  ?bool -> #bool [0.08-0.0] | (flip 0.1) [0.08-0.09] | (flip 0.2) [0.08-0.09] | (flip 0.3) [0.08-0.09] | (flip 0.4) [0.08-0.09] | (flip 0.5) [0.08-0.09] | (flip 0.6) [0.08-0.09] | (flip 0.7) [0.08-0.09] | (flip 0.8) [0.08-0.09] | (flip 0.9) [0.08-0.09] | (iseven ?int) [0.07] | (== ?int ?int) [0.07] | (> ?int ?int) [0.07]\n","output_type":"list"},"tasks":[{"ios":[[["[8, 3, 7, 4, 9, 6, 1, 9, 6, 0, 2, 6, 1, 7, 1, 5, 6, 4, 0, 7, 9, 0, 7, 5, 1, 4, 2, 7, 9, 1]"],"[3, 1, 6, 0, 0, 0, 1, 1, 20, 2, 2, 2, 4, 3, 3, 0]"],[["[6, 1, 2, 3, 6, 8, 9, 1, 6, 0, 1, 2, 1, 2, 4, 2, 2, 1, 8, 5, 8, 2, 5, 1, 8, 8, 0, 7, 0, 3]"],"[11, 1, 1, 1, 1, 3, 4, 0, 0, 12, 12, 12]"],[["[5, 6, 2, 2, 7, 8, 1, 9, 7, 0, 6, 3, 5, 6, 8, 7, 4, 6, 3, 4, 0, 9, 0, 6, 9, 4, 3, 5, 0, 8]"],"[4, 4, 4, 4, 4, 5, 15, 2, 8, 1, 1, 0]"],[["[2, 6, 6, 4, 5, 0, 0, 3, 1, 1, 3, 4, 9, 6, 4, 9, 7, 9, 5, 6, 9, 1, 9, 2, 5, 3, 0, 1, 9, 8]"],"[1, 1, 6, 6, 6, 6, 1, 1, 2, 3, 0, 5]"],[["[3, 8, 9, 9, 6, 5, 6, 9, 0, 0, 6, 5, 2, 1, 0, 0, 2, 8, 3, 9, 0, 7, 2, 7, 9, 8, 6, 4, 8, 8]"],"[0, 3, 4, 0, 3, 23, 0, 4, 1, 0, 0, 0, 3, 0, 3, 19, 0, 3, 4, 4]"],[["[5, 9, 8, 8, 0, 8, 0, 1, 5, 3, 9, 4, 9, 3, 2, 3, 4, 8, 8, 0, 0, 0, 8, 0, 6, 4, 8, 2, 0, 9]"],"[6, 13, 13, 13, 1, 1, 5, 22, 5, 0, 8, 1, 3, 3, 0]"],[["[0, 5, 7, 0, 8, 3, 6, 4, 7, 7, 6, 4, 2, 4, 1, 7, 4, 1, 6, 0, 7, 2, 5, 1, 2, 9, 9, 3, 1, 6]"],"[0, 0, 3, 3, 3, 9, 1, 4, 1, 0, 0, 0]"],[["[8, 4, 5, 8, 0, 5, 6, 5, 2, 6, 1, 3, 1, 1, 1, 0, 7, 2, 3, 2, 2, 8, 2, 5, 1, 0, 6, 6, 6, 5]"],"[1, 0, 7, 0, 0, 0, 1, 1, 4, 4, 14, 3]"]],"type":"(list -> list)","name":"000","solution":"(letII (+ (+ randnat (case 7 of O => 6 | S => (λn -> n#1))) (+ 1 5)) (λk -> (map (λstate -> state#1) (scanl (λacc x -> (letII x#1 (λx -> (case randnat of O => acc#3 | S => (λn -> randnat))))) 0 (take k#1 #2)))))","num_train":4},{"ios":[[["[7, 6, 1, 0, 5, 9, 3, 6, 3, 7, 0, 9, 6, 9, 0, 6, 0, 6, 3, 9, 5, 5, 7, 6, 0, 6, 7, 9, 2, 2]"],"[1, 1, 5, 2]"],[["[3, 6, 5, 9, 0, 9, 0, 4, 6, 5, 5, 4, 8, 9, 7, 6, 9, 6, 0, 8, 9, 5, 4, 2, 6, 8, 9, 0, 8, 0]"],"[2, 3, 0, 1]"],[["[3, 1, 2, 3, 4, 1, 6, 2, 7, 8, 0, 9, 0, 6, 1, 3, 9, 6, 1, 2, 0, 3, 9, 4, 1, 4, 8, 4, 0, 3]"],"[0, 2, 0, 1]"],[["[5, 2, 1, 7, 9, 3, 0, 4, 0, 6, 7, 1, 6, 4, 1, 1, 1, 7, 8, 1, 8, 5, 5, 6, 0, 5, 1, 3, 3, 2]"],"[7, 4]"],[["[2, 9, 6, 8, 8, 6, 2, 6, 1, 6, 9, 3, 4, 1, 4, 6, 4, 7, 1, 3, 6, 0, 6, 8, 9, 1, 7, 4, 5, 8]"],"[2, 0, 4, 12, 0, 1, 7, 0]"],[["[1, 7, 0, 3, 9, 3, 9, 0, 9, 8, 7, 6, 3, 1, 9, 4, 1, 1, 4, 4, 9, 5, 6, 8, 9, 5, 5, 6, 5, 4]"],"[2, 0, 6, 18]"],[["[4, 8, 7, 1, 9, 5, 1, 6, 1, 0, 3, 3, 5, 7, 7, 5, 2, 6, 0, 1, 5, 2, 4, 8, 9, 1, 1, 2, 9, 2]"],"[8, 8, 1]"],[["[7, 6, 7, 7, 3, 4, 4, 4, 9, 8, 4, 0, 5, 4, 2, 6, 3, 4, 0, 0, 2, 8, 0, 3, 0, 8, 7, 6, 7, 2]"],"[0, 11, 11, 3, 1, 1, 7]"]],"type":"(list -> list)","name":"001","solution":"(letII (inc randnat) (λk -> (map (λstate -> state#1) (scanl (λacc x -> (letII acc#2 (λx -> (case randnat of O => x#1 | S => (λn -> randnat))))) 0 (take k#1 #2)))))","num_train":4},{"ios":[[["[0, 4, 8, 8, 4, 3, 1, 5, 6, 7, 5, 2, 9, 1, 0, 0, 4, 0, 7, 9, 4, 6, 8, 2, 2, 7, 3, 3, 9, 2]"],"[6, 8, 2, 1, 10, 14, 1, 2, 2, 13, 21]"],[["[3, 7, 5, 4, 2, 7, 3, 5, 3, 2, 5, 0, 7, 1, 6, 3, 4, 2, 7, 2, 4, 5, 5, 6, 4, 6, 8, 7, 8, 8]"],"[2, 8, 2, 3, 1, 4, 14, 1, 16, 3, 4, 12]"],[["[4, 8, 5, 1, 3, 7, 4, 6, 5, 4, 9, 9, 6, 1, 4, 7, 6, 9, 2, 3, 1, 0, 1, 6, 8, 1, 7, 4, 1, 0]"],"[31, 3, 1, 4, 1, 5, 4]"],[["[9, 9, 1, 8, 4, 4, 7, 9, 5, 6, 6, 2, 7, 4, 2, 9, 8, 5, 7, 3, 1, 9, 5, 2, 7, 2, 7, 3, 3, 3]"],"[13, 8, 0, 6, 7, 1, 0, 12, 0, 2, 5, 5, 7, 0, 12, 11]"],[["[5, 0, 4, 5, 1, 0, 3, 0, 3, 4, 2, 1, 0, 5, 6, 9, 2, 1, 4, 4, 9, 9, 5, 2, 9, 2, 2, 1, 8, 3]"],"[4, 2, 4, 3, 2]"],[["[2, 8, 6, 9, 5, 2, 7, 8, 7, 2, 2, 1, 0, 9, 1, 7, 9, 4, 3, 2, 8, 1, 7, 1, 5, 8, 8, 2, 3, 8]"],"[1, 10, 5, 1, 0, 4, 2, 10, 0, 14, 0]"],[["[5, 7, 3, 9, 0, 5, 3, 9, 1, 7, 6, 4, 7, 7, 9, 0, 1, 2, 5, 7, 6, 4, 1, 7, 2, 1, 3, 1, 9, 5]"],"[13, 6, 3, 6, 10, 7, 8, 2, 0, 5, 8, 2]"],[["[5, 6, 7, 4, 1, 7, 1, 6, 8, 8, 8, 7, 0, 7, 2, 6, 4, 6, 4, 4, 5, 1, 6, 8, 6, 1, 0, 4, 5, 6]"],"[5, 4]"]],"type":"(list -> list)","name":"002","solution":"(letII 4 (λk -> (map (λstate -> (+ state#1 (case 7 of O => randnat | S => (λn -> (- randnat (- randnat 0)))))) (scanl (λacc x -> (letII acc#2 (λx -> (case x#2 of O => randnat | S => (λn -> randnat))))) 0 (take (letII k#1 (λx -> (+ randnat randnat))) #2)))))","num_train":4},{"ios":[[["[1, 4, 3, 8, 2, 7, 9, 9, 8, 1, 4, 5, 6, 6, 6, 3, 0, 5, 8, 3, 7, 3, 1, 2, 9, 8, 3, 1, 9, 3]"],"[0, 0, 0, 0, 0, 9]"],[["[1, 8, 8, 3, 8, 1, 3, 5, 9, 7, 9, 9, 2, 3, 3, 3, 7, 4, 5, 3, 2, 3, 9, 3, 1, 8, 7, 3, 8, 9]"],"[0, 0, 2, 0, 0, 0]"],[["[2, 8, 4, 7, 2, 8, 6, 1, 0, 8, 8, 4, 4, 1, 3, 8, 5, 9, 2, 4, 0, 0, 3, 7, 3, 0, 1, 1, 0, 7]"],"[6, 2, 3, 5, 6, 13]"],[["[6, 9, 5, 3, 0, 8, 8, 9, 9, 9, 4, 4, 1, 6, 5, 3, 8, 7, 4, 5, 9, 2, 6, 8, 3, 7, 6, 7, 5, 2]"],"[1, 0, 0, 6, 0, 1]"],[["[6, 9, 2, 5, 4, 4, 9, 3, 9, 5, 3, 2, 2, 8, 7, 1, 6, 0, 2, 0, 4, 2, 1, 3, 7, 3, 9, 4, 4, 1]"],"[0, 2, 3, 4, 2, 6]"],[["[2, 4, 2, 1, 8, 5, 9, 5, 2, 3, 9, 6, 0, 9, 1, 5, 7, 4, 9, 2, 5, 2, 5, 9, 7, 5, 7, 9, 4, 2]"],"[5, 1, 0, 13, 6, 0]"],[["[2, 2, 6, 6, 0, 4, 7, 6, 6, 4, 1, 2, 1, 4, 6, 6, 3, 1, 5, 6, 2, 8, 5, 6, 9, 1, 6, 0, 0, 8]"],"[0, 1, 0, 9, 0, 0, 9, 0]"],[["[4, 5, 9, 2, 5, 7, 6, 7, 5, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 5, 4, 1, 8, 7, 3, 8, 0, 0, 7, 5]"],"[3, 1, 3, 4, 5, 6]"]],"type":"(list -> list)","name":"003","solution":"(letII (letII randnat (λx -> (case x#1 of O => randnat | S => (λn -> (- randnat randnat))))) (λk -> (map (λstate -> (case (flip 0.5) of True => state#1 | False => randnat)) (scanl (λacc x -> (- (inc acc#2) k#3)) 0 (take (letII (case k#1 of O => 6 | S => (λn -> randnat)) (λx -> (case (flip 0.3) of True => (case (flip 0.5) of True => randnat | False => x#1) | False => 6))) #2)))))","num_train":4},{"ios":[[["[5, 8, 3, 4, 8, 2, 9, 3, 8, 3, 5, 9, 1, 3, 5, 2, 8, 4, 6, 0, 1, 6, 8, 1, 4, 3, 3, 9, 8, 6]"],"[7, 11, 11, 0, 9, 10, 1, 4, 13, 17, 4, 6, 2]"],[["[0, 3, 8, 8, 7, 0, 1, 8, 2, 5, 4, 5, 2, 5, 2, 2, 5, 8, 4, 9, 2, 1, 4, 2, 6, 6, 9, 5, 7, 4]"],"[1, 4, 11, 0, 8, 6, 2]"],[["[5, 1, 9, 5, 1, 1, 2, 8, 6, 5, 7, 8, 5, 3, 0, 2, 0, 8, 0, 0, 7, 0, 2, 6, 5, 9, 0, 5, 0, 0]"],"[0, 2, 1, 14, 2, 0, 4, 1, 3]"],[["[5, 9, 1, 9, 1, 2, 9, 8, 6, 2, 3, 0, 7, 6, 4, 6, 7, 8, 1, 5, 1, 1, 6, 9, 6, 5, 0, 5, 3, 1]"],"[5, 35, 35, 10, 16, 1, 4, 25, 37, 37, 4, 7, 4]"],[["[5, 8, 1, 5, 9, 6, 2, 2, 7, 8, 3, 8, 7, 7, 6, 5, 7, 3, 3, 5, 4, 9, 7, 6, 7, 1, 4, 9, 1, 9]"],"[22, 3, 4, 4, 7, 0, 12, 3, 2, 1, 6]"],[["[2, 0, 6, 9, 3, 0, 3, 4, 2, 2, 6, 4, 5, 3, 7, 0, 2, 0, 4, 2, 0, 2, 0, 8, 3, 8, 0, 1, 4, 6]"],"[1, 1, 11, 1, 6, 10, 4]"],[["[4, 7, 1, 2, 2, 9, 4, 7, 6, 8, 6, 1, 6, 2, 2, 6, 6, 6, 3, 0, 1, 6, 5, 2, 0, 9, 6, 1, 2, 5]"],"[3, 8, 0, 3, 8, 3, 15, 0, 35, 9, 1, 5]"],[["[0, 2, 8, 0, 6, 5, 5, 5, 9, 6, 8, 3, 7, 7, 9, 5, 6, 7, 3, 0, 4, 5, 7, 3, 3, 4, 8, 6, 5, 1]"],"[7, 7, 12, 4, 0, 7, 0, 19, 1]"]],"type":"(list -> list)","name":"004","solution":"(letII (case (flip 0.1) of True => randnat | False => 5) (λk -> (map (λstate -> (case (flip 0.5) of True => state#1 | False => randnat)) (scanl (λacc x -> (case (flip 0.6) of True => (+ acc#2 randnat) | False => (inc x#1))) 0 (take (+ (case randnat of O => randnat | S => (λn -> (case n#1 of O => n#1 | S => (λn -> randnat)))) 7) #2)))))","num_train":4},{"ios":[[["[7, 8, 9, 4, 8, 4, 8, 3, 4, 2, 1, 0, 1, 8, 5, 3, 4, 6, 0, 3, 9, 3, 6, 5, 7, 9, 8, 4, 9, 6]"],"[7, 1, 1, 4, 6, 1]"],[["[8, 2, 0, 3, 1, 3, 9, 9, 4, 0, 7, 9, 9, 1, 2, 4, 9, 0, 8, 1, 2, 2, 5, 3, 1, 7, 5, 7, 8, 2]"],"[7, 3, 3, 15, 10, 0, 12, 10, 27]"],[["[2, 3, 7, 3, 9, 4, 2, 6, 9, 2, 9, 2, 2, 7, 3, 2, 2, 8, 1, 2, 7, 6, 9, 7, 5, 3, 1, 2, 7, 4]"],"[5, 4, 8]"],[["[6, 9, 6, 4, 2, 6, 1, 7, 5, 5, 9, 0, 4, 1, 5, 4, 3, 4, 7, 5, 7, 6, 3, 5, 6, 8, 8, 8, 9, 6]"],"[0, 1, 1]"],[["[2, 4, 4, 3, 0, 0, 6, 8, 1, 1, 5, 4, 4, 4, 3, 3, 6, 6, 8, 3, 9, 9, 0, 7, 4, 6, 2, 6, 4, 7]"],"[4, 1, 7, 8, 6, 4]"],[["[0, 5, 9, 9, 9, 4, 7, 3, 4, 0, 8, 1, 5, 3, 1, 7, 0, 5, 6, 8, 6, 3, 0, 8, 7, 0, 9, 5, 3, 8]"],"[5, 4, 9, 0, 11]"],[["[6, 2, 7, 3, 1, 8, 2, 7, 0, 3, 2, 0, 4, 1, 3, 4, 5, 3, 7, 8, 5, 8, 8, 2, 7, 8, 8, 6, 2, 0]"],"[3, 1, 3]"],[["[0, 5, 6, 7, 8, 6, 1, 4, 5, 7, 5, 3, 6, 5, 6, 6, 2, 0, 1, 6, 0, 1, 0, 8, 5, 0, 2, 4, 5, 5]"],"[4, 6, 6, 7]"]],"type":"(list -> list)","name":"005","solution":"(letII (letII (inc randnat) (λx -> (inc randnat))) (λk -> (map (λstate -> (case (- 8 state#1) of O => randnat | S => (λn -> state#2))) (scanl (λacc x -> (+ (case randnat of O => x#1 | S => (λn -> acc#3)) randnat)) 0 (take (letII 0 (λx -> (inc (letII randnat (λx -> (inc k#3)))))) #2)))))","num_train":4},{"ios":[[["[7, 7, 4, 8, 9, 4, 9, 8, 4, 2, 0, 1, 9, 1, 7, 8, 7, 2, 1, 4, 4, 4, 8, 2, 3, 5, 9, 2, 5, 6]"],"[10, 12]"],[["[1, 0, 9, 7, 9, 6, 2, 1, 0, 1, 7, 7, 7, 5, 5, 9, 3, 3, 9, 8, 5, 5, 0, 2, 4, 0, 5, 2, 3, 6]"],"[5, 4, 8, 11, 13, 6, 15, 4, 8, 4, 15, 12, 5, 4, 9, 4, 7, 16, 10, 15, 9]"],[["[0, 5, 7, 6, 0, 4, 2, 1, 6, 3, 4, 2, 0, 7, 7, 6, 6, 9, 2, 4, 2, 6, 6, 2, 8, 4, 2, 3, 8, 3]"],"[4, 13, 6, 6, 11, 6, 9, 5, 10, 9, 14, 12]"],[["[9, 6, 9, 7, 1, 5, 5, 6, 8, 1, 3, 4, 3, 8, 9, 3, 3, 9, 4, 3, 2, 4, 3, 5, 2, 3, 4, 4, 0, 7]"],"[9, 4, 10, 4, 7, 10, 10]"],[["[9, 6, 0, 6, 8, 3, 5, 8, 9, 5, 7, 1, 5, 9, 2, 5, 1, 3, 9, 6, 9, 1, 4, 8, 4, 7, 8, 4, 0, 0]"],"[6, 8, 4, 6, 7]"],[["[1, 7, 2, 8, 9, 0, 1, 1, 7, 9, 5, 2, 1, 4, 3, 8, 6, 8, 9, 7, 3, 0, 2, 6, 7, 2, 2, 7, 9, 7]"],"[6, 11, 5, 4, 10, 6, 7]"],[["[7, 5, 2, 6, 6, 1, 8, 5, 5, 2, 7, 4, 0, 6, 3, 8, 2, 3, 0, 0, 0, 3, 3, 2, 6, 6, 9, 3, 3, 5]"],"[13, 6, 4, 9, 4, 11, 6, 4, 7, 7, 4, 7, 4, 11, 4, 7, 6]"],[["[1, 2, 6, 8, 0, 4, 9, 8, 3, 9, 0, 9, 5, 1, 3, 3, 3, 7, 4, 8, 8, 2, 9, 0, 9, 9, 8, 9, 5, 7]"],"[5, 8, 10]"]],"type":"(list -> list)","name":"006","solution":"(letII (inc 3) (λk -> (map (λstate -> (+ (case k#2 of O => (letII k#2 (λx -> (+ state#2 k#3))) | S => (λn -> k#3)) randnat)) (scanl (λacc x -> (inc (case randnat of O => randnat | S => (λn -> (letII acc#3 (λx -> (case randnat of O => x#1 | S => (λn -> x#2)))))))) 0 (take (letII (letII k#1 (λx -> (- k#2 randnat))) (λx -> (+ randnat randnat))) #2)))))","num_train":4},{"ios":[[["[0, 2, 5, 8, 3, 2, 7, 3, 1, 0, 3, 7, 3, 4, 5, 3, 0, 8, 2, 8, 9, 4, 6, 2, 4, 1, 0, 9, 8, 4]"],"[1, 2]"],[["[3, 2, 8, 1, 3, 9, 5, 1, 1, 6, 9, 9, 1, 7, 4, 2, 5, 5, 7, 2, 3, 1, 6, 8, 3, 6, 8, 9, 1, 3]"],"[8, 4]"],[["[2, 9, 7, 6, 1, 8, 4, 0, 7, 5, 8, 5, 1, 0, 1, 1, 6, 1, 1, 7, 1, 9, 2, 7, 3, 2, 5, 5, 1, 1]"],"[7, 1]"],[["[2, 0, 8, 6, 2, 2, 3, 3, 4, 9, 3, 9, 2, 9, 3, 8, 4, 9, 1, 9, 5, 0, 5, 2, 8, 8, 6, 0, 0, 8]"],"[0, 4, 25, 2, 3]"],[["[9, 9, 7, 5, 9, 5, 4, 5, 3, 6, 4, 9, 4, 9, 7, 5, 3, 3, 1, 1, 0, 4, 2, 4, 4, 2, 0, 0, 8, 8]"],"[4, 11, 6]"],[["[8, 4, 6, 8, 9, 9, 2, 3, 3, 9, 3, 4, 2, 6, 2, 4, 8, 0, 8, 1, 6, 7, 8, 9, 0, 6, 8, 4, 4, 9]"],"[2, 10, 5]"],[["[7, 6, 7, 3, 7, 0, 0, 0, 4, 0, 1, 4, 3, 6, 7, 1, 4, 0, 9, 3, 6, 4, 2, 2, 7, 1, 2, 8, 4, 5]"],"[1, 2, 2, 17, 1, 7, 4, 4, 3]"],[["[3, 1, 9, 5, 6, 6, 0, 1, 5, 3, 0, 8, 6, 9, 4, 2, 2, 4, 7, 4, 7, 8, 6, 1, 7, 3, 8, 7, 4, 0]"],"[4, 2, 0]"]],"type":"(list -> list)","name":"007","solution":"(letII (letII 8 (λx -> (- (case randnat of O => x#1 | S => (λn -> x#2)) randnat))) (λk -> (map (λstate -> (case (> randnat state#1) of True => randnat | False => randnat)) (scanl (λacc x -> acc#2) 0 (take randnat #2)))))","num_train":4},{"ios":[[["[0, 7, 6, 3, 7, 5, 7, 3, 2, 4, 1, 8, 3, 1, 3, 3, 4, 2, 7, 4, 0, 0, 2, 8, 5, 0, 9, 8, 2, 7]"],"[0, 5, 0, 6, 6, 5, 7, 7, 7]"],[["[3, 3, 0, 7, 3, 8, 9, 1, 7, 9, 6, 6, 8, 5, 7, 3, 1, 7, 8, 3, 2, 4, 9, 3, 8, 4, 3, 5, 8, 9]"],"[3, 3, 3, 3, 3, 8, 9, 1, 7]"],[["[1, 8, 2, 0, 6, 4, 5, 0, 0, 7, 4, 6, 1, 3, 3, 3, 7, 4, 0, 9, 7, 3, 1, 7, 4, 7, 5, 2, 0, 2]"],"[3, 8, 8, 0, 6, 4, 4, 1, 7]"],[["[3, 5, 2, 6, 8, 0, 4, 2, 4, 2, 9, 2, 8, 2, 1, 0, 0, 6, 6, 9, 4, 1, 1, 3, 7, 9, 5, 7, 0, 1]"],"[1, 3, 2, 6, 0, 0, 0, 4, 8]"],[["[4, 7, 6, 0, 0, 7, 7, 8, 8, 2, 3, 8, 9, 2, 0, 8, 5, 3, 0, 2, 1, 4, 4, 6, 1, 8, 4, 3, 1, 3]"],"[2, 0, 6, 6, 10, 7, 7, 2, 8]"],[["[0, 5, 6, 9, 6, 9, 4, 7, 2, 3, 9, 7, 1, 6, 5, 2, 9, 4, 8, 3, 7, 9, 5, 7, 7, 1, 6, 2, 9, 8]"],"[0, 0, 5, 1, 3, 6, 0, 9, 2]"],[["[6, 3, 1, 3, 0, 7, 9, 4, 9, 7, 6, 8, 8, 1, 2, 9, 6, 8, 3, 7, 5, 0, 2, 3, 5, 6, 7, 2, 7, 0]"],"[1, 3, 2, 0, 0, 0, 1, 0, 4]"],[["[9, 4, 2, 4, 0, 9, 0, 3, 8, 8, 2, 8, 7, 0, 2, 9, 7, 4, 3, 7, 1, 9, 2, 3, 3, 2, 8, 8, 8, 5]"],"[10, 4, 4, 7, 0, 9, 4, 3, 3]"]],"type":"(list -> list)","name":"008","solution":"(letII (inc (case (flip 0.3) of True => 0 | False => randnat)) (λk -> (map (λstate -> (case (flip 0.4) of True => randnat | False => state#1)) (scanl (λacc x -> (letII x#1 (λx -> (case (flip 0.4) of True => (letII x#2 (λx -> (case (flip 0.1) of True => x#1 | False => acc#4))) | False => x#1)))) 0 (take (inc (inc (letII k#1 (λx -> (case (inc 7) of O => randnat | S => (λn -> n#1)))))) #2)))))","num_train":4},{"ios":[[["[5, 6, 4, 3, 3, 8, 3, 5, 1, 3, 7, 9, 3, 7, 7, 8, 6, 0, 3, 9, 4, 5, 1, 0, 5, 0, 1, 8, 9, 8]"],"[4, 2, 0, 1, 8, 1, 0]"],[["[2, 8, 2, 8, 9, 1, 3, 8, 6, 2, 6, 7, 0, 8, 3, 1, 1, 5, 8, 2, 3, 1, 2, 5, 5, 9, 4, 6, 0, 8]"],"[0, 4, 6, 0, 3, 14, 5]"],[["[3, 3, 2, 5, 7, 7, 4, 7, 9, 7, 3, 4, 8, 8, 9, 9, 7, 4, 0, 6, 1, 9, 1, 9, 4, 1, 7, 9, 7, 0]"],"[4, 19, 0, 6, 4, 1, 1]"],[["[2, 7, 3, 1, 0, 1, 6, 4, 9, 6, 7, 1, 4, 2, 3, 2, 6, 5, 6, 6, 7, 7, 2, 5, 7, 4, 5, 2, 1, 7]"],"[9, 0, 0, 3, 0, 2, 11]"],[["[8, 2, 9, 8, 5, 8, 5, 7, 8, 5, 2, 2, 9, 6, 7, 7, 0, 7, 9, 8, 4, 1, 5, 5, 9, 2, 7, 8, 5, 1]"],"[6, 8, 0, 1, 3, 6, 0]"],[["[4, 6, 8, 1, 4, 2, 0, 5, 6, 8, 5, 5, 1, 6, 0, 6, 0, 7, 4, 2, 0, 4, 5, 9, 1, 0, 4, 9, 0, 5]"],"[9, 0, 1, 9, 0, 0, 5]"],[["[8, 1, 6, 7, 8, 0, 7, 7, 7, 9, 7, 7, 1, 4, 0, 0, 2, 5, 4, 2, 9, 1, 8, 6, 4, 9, 7, 6, 3, 5]"],"[0, 4, 6, 2, 6, 14, 5]"],[["[5, 0, 7, 3, 6, 6, 2, 0, 8, 6, 3, 3, 5, 1, 2, 4, 7, 2, 4, 1, 6, 9, 5, 8, 0, 9, 1, 6, 5, 6]"],"[0, 8, 2, 17, 5, 0, 0]"]],"type":"(list -> list)","name":"009","solution":"(letII 5 (λk -> (map (λstate -> (case state#1 of O => randnat | S => (λn -> randnat))) (scanl (λacc x -> (- acc#2 (+ x#1 k#3))) 0 (take (letII (case k#1 of O => 2 | S => (λn -> 0)) (λx -> (case 8 of O => randnat | S => (λn -> n#1)))) #2)))))","num_train":4},{"ios":[[["[8, 9, 6, 8, 6, 5, 0, 1, 4, 8, 3, 4, 1, 3, 9, 9, 8, 4, 8, 4, 9, 8, 6, 3, 3, 4, 4, 9, 8, 9]"],"[4, 1, 5, 6, 3, 4, 14, 1]"],[["[7, 1, 4, 5, 0, 5, 9, 3, 8, 6, 3, 5, 2, 1, 5, 3, 3, 3, 3, 9, 4, 9, 2, 9, 9, 9, 9, 0, 2, 8]"],"[3, 1, 1]"],[["[9, 0, 2, 2, 1, 1, 7, 2, 9, 4, 7, 5, 0, 2, 1, 5, 7, 6, 4, 9, 3, 1, 0, 1, 3, 3, 1, 9, 0, 6]"],"[3, 5, 2, 7, 3, 1, 1]"],[["[3, 5, 9, 9, 4, 8, 6, 8, 9, 4, 9, 4, 6, 2, 1, 4, 2, 1, 3, 2, 5, 1, 4, 5, 2, 9, 8, 6, 5, 6]"],"[2, 5, 3, 13, 1, 2, 3]"],[["[6, 8, 1, 8, 2, 0, 4, 1, 6, 5, 9, 5, 8, 7, 5, 5, 9, 4, 7, 0, 7, 1, 2, 2, 1, 4, 2, 4, 3, 3]"],"[4, 3, 4, 5, 4, 3]"],[["[5, 6, 4, 7, 4, 9, 7, 8, 3, 3, 1, 0, 7, 2, 1, 0, 3, 9, 0, 7, 9, 2, 6, 5, 0, 9, 6, 1, 4, 8]"],"[4, 2, 9, 5, 8, 9, 4]"],[["[2, 0, 0, 0, 9, 0, 1, 2, 3, 7, 4, 2, 4, 3, 7, 4, 7, 9, 8, 1, 3, 2, 2, 3, 3, 6, 3, 3, 4, 9]"],"[27, 13]"],[["[5, 9, 3, 9, 7, 7, 4, 9, 0, 3, 3, 1, 6, 0, 2, 6, 4, 4, 3, 4, 5, 6, 6, 8, 6, 4, 4, 6, 2, 4]"],"[10, 4, 1, 7, 8, 1, 2, 19, 2, 4, 3, 5, 2, 1, 3, 9, 1, 9, 6, 1, 12, 10, 1, 12]"]],"type":"(list -> list)","name":"010","solution":"(letII (letII randnat (λx -> (case x#1 of O => x#1 | S => (λn -> randnat)))) (λk -> (map (λstate -> (inc (+ randnat (- state#1 randnat)))) (scanl (λacc x -> (- (+ acc#2 acc#2) acc#2)) 0 (take (+ randnat randnat) #2)))))","num_train":4},{"ios":[[["[5, 6, 7, 3, 6, 6, 7, 6, 7, 7, 7, 4, 6, 9, 5, 5, 4, 2, 6, 8, 7, 6, 0, 1, 1, 6, 6, 6, 8, 0]"],"[36, 35, 33, 35, 38, 29, 0, 0, 19, 0, 38, 35, 33, 0, 34, 34, 37, 0, 37, 37, 35, 36, 36, 38, 0, 29, 38, 38, 36, 36]"],[["[3, 4, 6, 3, 0, 4, 4, 3, 4, 5, 3, 5, 2, 3, 6, 4, 9, 4, 6, 7, 3, 2, 6, 0, 8, 7, 7, 5, 0, 6]"],"[2, 0, 0, 0]"],[["[5, 6, 4, 5, 8, 5, 7, 2, 6, 0, 6, 6, 7, 9, 5, 9, 5, 6, 4, 6, 7, 6, 1, 3, 9, 3, 2, 4, 7, 5]"],"[9, 7, 5, 9, 6, 6, 7, 7, 5]"],[["[5, 8, 6, 3, 7, 5, 0, 0, 0, 3, 9, 2, 9, 2, 5, 6, 7, 5, 3, 4, 4, 0, 9, 9, 8, 0, 5, 6, 0, 8]"],"[16, 12, 16, 16, 17, 16, 16, 16, 18, 0, 16, 0, 0, 18, 17, 15, 12, 15]"],[["[9, 8, 3, 1, 0, 3, 3, 3, 5, 3, 1, 3, 3, 5, 1, 9, 6, 3, 8, 2, 8, 7, 7, 0, 0, 4, 7, 4, 6, 0]"],"[8, 14, 16, 13, 0, 1, 14, 10, 14, 12, 14, 6, 12, 12, 1, 16]"],[["[3, 1, 7, 2, 3, 0, 3, 8, 9, 7, 7, 3, 8, 0, 9, 5, 7, 4, 2, 0, 5, 3, 3, 2, 0, 1, 8, 1, 3, 9]"],"[6, 2, 0, 0, 0, 8, 5, 4]"],[["[8, 4, 1, 9, 3, 2, 2, 4, 6, 3, 6, 6, 0, 7, 9, 5, 3, 9, 8, 2, 4, 1, 0, 5, 0, 6, 9, 9, 3, 7]"],"[0, 0, 4, 4]"],[["[5, 1, 8, 7, 1, 2, 5, 5, 3, 7, 0, 6, 1, 6, 9, 1, 7, 9, 7, 3, 1, 7, 8, 2, 5, 2, 7, 9, 5, 8]"],"[4, 0, 4, 0]"]],"type":"(list -> list)","name":"011","solution":"(letII (+ randnat 4) (λk -> (map (λstate -> (- k#2 (case (letII state#1 (λx -> (case randnat of O => randnat | S => (λn -> randnat)))) of O => k#2 | S => (λn -> randnat)))) (scanl (λacc x -> (letII (letII 3 (λx -> (- x#1 randnat))) (λx -> (- randnat acc#3)))) 0 (take k#1 #2)))))","num_train":4},{"ios":[[["[1, 4, 6, 4, 1, 2, 4, 6, 0, 2, 2, 7, 9, 0, 8, 7, 4, 5, 6, 1, 7, 1, 9, 2, 7, 4, 4, 4, 8, 2]"],"[2, 5, 0, 5, 3, 21, 3, 2, 2, 1, 6, 1]"],[["[7, 4, 6, 6, 4, 9, 3, 4, 5, 1, 2, 6, 8, 1, 9, 5, 8, 3, 5, 0, 5, 5, 7, 8, 1, 3, 2, 7, 7, 2]"],"[1, 3, 1, 20, 0, 10, 1, 1, 0, 1, 0, 7]"],[["[0, 3, 4, 7, 3, 8, 7, 5, 1, 0, 3, 9, 2, 4, 8, 0, 7, 1, 5, 1, 9, 7, 6, 6, 7, 1, 8, 8, 7, 4]"],"[1, 1, 2, 0, 4, 2, 17, 10, 0, 4, 3, 2]"],[["[9, 3, 2, 0, 8, 8, 1, 8, 6, 7, 1, 8, 8, 0, 7, 1, 6, 5, 8, 6, 4, 8, 3, 9, 0, 0, 3, 7, 1, 0]"],"[5, 5, 0, 1, 13, 5, 16, 0, 2, 0, 1, 1]"],[["[9, 4, 8, 2, 1, 0, 5, 6, 3, 8, 8, 6, 2, 3, 7, 5, 3, 8, 5, 6, 8, 9, 9, 9, 8, 0, 1, 9, 1, 5]"],"[0, 2, 1, 0, 4, 6, 7, 2, 6, 18, 0, 2]"],[["[4, 6, 0, 1, 3, 2, 2, 5, 0, 1, 6, 5, 9, 3, 3, 8, 0, 9, 1, 1, 1, 0, 5, 5, 5, 9, 6, 2, 3, 0]"],"[0, 5, 0, 5, 0, 4, 3, 3, 8, 0, 0, 0]"],[["[3, 1, 0, 1, 6, 0, 8, 7, 5, 6, 1, 0, 1, 0, 4, 1, 0, 3, 2, 4, 3, 0, 9, 7, 5, 5, 1, 8, 5, 5]"],"[2, 18, 0, 0, 0, 3, 0, 1, 1, 0, 3, 7]"],[["[4, 6, 4, 5, 6, 7, 1, 1, 6, 4, 2, 8, 5, 3, 2, 0, 0, 4, 5, 0, 2, 9, 9, 6, 4, 1, 6, 9, 8, 4]"],"[4, 0, 0, 2, 9, 1, 0, 4, 0, 8, 0, 10]"]],"type":"(list -> list)","name":"012","solution":"(letII (letII 4 (λx -> (+ 8 x#1))) (λk -> (map (λstate -> (+ randnat (case (case (flip 0.8) of True => 0 | False => randnat) of O => state#1 | S => (λn -> state#2)))) (scanl (λacc x -> acc#2) 0 (take k#1 #2)))))","num_train":4},{"ios":[[["[7, 3, 0, 3, 0, 0, 1, 2, 8, 1, 0, 5, 7, 2, 4, 5, 4, 9, 4, 4, 9, 1, 4, 7, 6, 7, 6, 4, 2, 5]"],"[13, 5, 2, 3, 10, 2, 0]"],[["[9, 5, 0, 0, 6, 5, 8, 1, 6, 6, 3, 1, 6, 1, 2, 7, 9, 6, 3, 7, 8, 7, 0, 1, 6, 9, 9, 9, 4, 5]"],"[1, 4, 5, 0, 8, 3, 1]"],[["[5, 1, 0, 9, 5, 9, 5, 6, 1, 2, 3, 1, 8, 1, 4, 7, 8, 7, 1, 5, 3, 9, 8, 8, 6, 7, 4, 9, 5, 3]"],"[6, 3, 4, 5, 7, 2, 10]"],[["[4, 0, 4, 3, 7, 8, 4, 9, 9, 1, 2, 6, 6, 9, 8, 2, 8, 3, 2, 7, 8, 5, 7, 3, 3, 5, 1, 5, 2, 1]"],"[1, 11, 0, 1, 1, 12, 7]"],[["[4, 0, 7, 2, 0, 4, 6, 3, 7, 2, 2, 1, 9, 8, 8, 3, 0, 5, 5, 2, 1, 0, 0, 0, 5, 9, 6, 3, 4, 9]"],"[1, 8, 3, 4, 1, 5, 0]"],[["[6, 0, 2, 5, 6, 2, 3, 0, 4, 0, 5, 5, 6, 6, 9, 6, 8, 0, 8, 5, 8, 0, 8, 7, 2, 3, 3, 4, 7, 1]"],"[2, 4, 0, 1, 0, 0, 3]"],[["[9, 3, 8, 4, 9, 4, 0, 6, 9, 8, 1, 7, 5, 6, 6, 6, 7, 6, 2, 0, 1, 0, 6, 9, 6, 2, 5, 5, 4, 8]"],"[1, 0, 18, 0, 2, 1, 9]"],[["[0, 6, 9, 1, 0, 3, 5, 4, 4, 9, 3, 5, 6, 5, 5, 1, 9, 3, 0, 5, 0, 4, 0, 5, 7, 8, 0, 1, 8, 9]"],"[1, 0, 1, 20, 3, 1, 0]"]],"type":"(list -> list)","name":"013","solution":"(letII (+ (inc (case (flip 0.3) of True => 0 | False => 4)) 4) (λk -> (map (λstate -> (+ (case state#1 of O => randnat | S => (λn -> randnat)) state#1)) (scanl (λacc x -> acc#2) 0 (take (letII k#1 (λx -> (case (letII (+ x#1 x#1) (λx -> (inc x#2))) of O => 7 | S => (λn -> 7)))) #2)))))","num_train":4},{"ios":[[["[0, 8, 8, 9, 2, 0, 2, 1, 3, 1, 5, 4, 5, 4, 2, 3, 7, 5, 7, 1, 6, 1, 1, 7, 1, 2, 5, 0, 8, 0]"],"[8, 0, 8, 0, 8, 0, 8, 0]"],[["[5, 0, 4, 9, 6, 5, 1, 2, 0, 7, 9, 6, 6, 1, 7, 3, 3, 8, 5, 9, 8, 2, 8, 9, 7, 7, 6, 4, 1, 1]"],"[10, 0, 10, 0, 10, 0, 10, 0, 10, 0]"],[["[6, 8, 7, 6, 4, 2, 7, 3, 0, 5, 5, 2, 6, 9, 6, 4, 4, 4, 5, 3, 6, 1, 2, 2, 8, 5, 8, 3, 2, 0]"],"[10, 0, 10, 0, 10, 0, 10, 0, 10, 0]"],[["[8, 6, 1, 6, 3, 5, 3, 6, 7, 6, 4, 5, 4, 0, 8, 6, 4, 2, 0, 9, 8, 0, 9, 4, 1, 3, 7, 6, 6, 9]"],"[13, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13]"],[["[1, 0, 0, 3, 9, 4, 4, 5, 8, 4, 8, 3, 1, 6, 5, 6, 7, 6, 3, 3, 4, 2, 9, 5, 1, 7, 6, 1, 7, 7]"],"[15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15]"],[["[6, 1, 2, 4, 9, 0, 8, 8, 3, 5, 9, 3, 6, 7, 0, 1, 2, 3, 3, 7, 5, 8, 6, 2, 6, 2, 5, 8, 7, 1]"],"[10, 0, 10, 0, 10, 0, 10, 0, 10, 0]"],[["[7, 7, 6, 9, 1, 4, 0, 5, 2, 7, 7, 2, 9, 5, 9, 8, 0, 7, 6, 0, 8, 1, 0, 4, 5, 5, 0, 0, 2, 2]"],"[8, 0, 8, 0, 8, 0, 8, 0]"],[["[8, 8, 8, 3, 5, 5, 6, 9, 5, 0, 8, 3, 7, 3, 9, 4, 0, 1, 6, 6, 5, 9, 5, 4, 7, 9, 4, 0, 0, 3]"],"[10, 0, 10, 0, 10, 0, 10, 0, 10, 0]"]],"type":"(list -> list)","name":"014","solution":"(letII (+ randnat 8) (λk -> (map (λstate -> state#1) (scanl (λacc x -> (letII x#1 (λx -> (- k#4 acc#3)))) 0 (take k#1 #2)))))","num_train":4},{"ios":[[["[1, 2, 3, 1, 3, 1, 2, 9, 2, 9, 5, 2, 8, 7, 6, 5, 8, 4, 2, 7, 4, 4, 8, 0, 3, 3, 8, 3, 8, 0]"],"[5, 3, 4]"],[["[3, 1, 7, 9, 1, 8, 3, 4, 7, 0, 9, 0, 9, 3, 3, 8, 1, 8, 1, 9, 5, 9, 2, 9, 2, 3, 2, 7, 0, 9]"],"[3, 5]"],[["[4, 0, 8, 2, 8, 9, 5, 1, 7, 9, 2, 7, 5, 6, 6, 3, 9, 7, 4, 7, 9, 8, 0, 4, 9, 0, 9, 2, 9, 0]"],"[6, 0, 11, 2, 5, 9]"],[["[2, 3, 4, 3, 5, 4, 6, 7, 5, 9, 6, 2, 7, 9, 1, 5, 6, 8, 5, 0, 4, 4, 1, 7, 2, 4, 3, 7, 7, 6]"],"[7, 2, 0, 5, 17, 5, 17, 1, 0, 7, 6, 5]"],[["[6, 3, 5, 2, 2, 4, 5, 0, 6, 1, 5, 6, 3, 2, 2, 0, 4, 1, 5, 8, 7, 4, 4, 6, 7, 3, 9, 9, 8, 1]"],"[3, 1, 5, 14, 2, 7, 5, 0, 6, 3, 0, 5, 1, 2]"],[["[4, 3, 1, 6, 4, 2, 1, 7, 1, 9, 9, 6, 6, 9, 4, 6, 7, 3, 9, 3, 1, 1, 2, 6, 2, 2, 1, 0, 1, 9]"],"[1, 3, 0, 1, 1, 3, 4, 2]"],[["[0, 1, 0, 4, 1, 7, 5, 5, 0, 3, 2, 6, 1, 3, 8, 9, 6, 6, 7, 0, 5, 9, 8, 7, 0, 2, 4, 8, 4, 7]"],"[1, 6]"],[["[0, 3, 7, 1, 9, 3, 2, 1, 2, 3, 7, 3, 8, 9, 0, 8, 8, 5, 0, 3, 6, 1, 9, 1, 6, 5, 7, 8, 2, 9]"],"[1, 2, 3, 7, 5, 6, 2, 5, 6, 6]"]],"type":"(list -> list)","name":"015","solution":"(letII (case 1 of O => randnat | S => (λn -> (inc randnat))) (λk -> (map (λstate -> (+ (+ state#1 (- state#1 k#2)) (case (flip 0.9) of True => randnat | False => k#2))) (scanl (λacc x -> acc#2) 0 (take (+ (letII k#1 (λx -> (- x#1 9))) (letII randnat (λx -> (inc x#1)))) #2)))))","num_train":4},{"ios":[[["[1, 7, 3, 2, 4, 1, 6, 1, 8, 1, 1, 1, 0, 5, 0, 4, 9, 4, 2, 7, 2, 7, 1, 0, 5, 0, 8, 5, 2, 3]"],"[14, 4, 3, 4, 2, 11, 4, 2, 6, 9, 8, 7, 6, 5, 5, 6, 1, 3, 7, 4]"],[["[6, 1, 6, 6, 3, 2, 0, 2, 5, 3, 9, 2, 5, 7, 7, 5, 5, 5, 3, 9, 3, 1, 5, 9, 9, 9, 6, 8, 1, 9]"],"[6, 1]"],[["[9, 6, 2, 3, 8, 8, 7, 7, 0, 6, 5, 6, 9, 4, 0, 4, 3, 2, 5, 8, 9, 6, 5, 8, 4, 6, 9, 2, 3, 0]"],"[3, 1]"],[["[2, 8, 6, 8, 2, 7, 5, 9, 8, 2, 0, 8, 2, 1, 1, 6, 4, 2, 5, 2, 1, 1, 4, 1, 2, 2, 6, 9, 0, 0]"],"[4, 1]"],[["[7, 0, 3, 0, 3, 6, 1, 1, 5, 9, 5, 0, 4, 1, 7, 4, 6, 8, 5, 7, 3, 9, 4, 3, 3, 7, 6, 5, 0, 1]"],"[14, 1, 1, 8, 3, 2, 2, 10, 6, 2, 1, 11, 5, 6, 4, 19]"],[["[6, 6, 2, 0, 7, 5, 6, 3, 1, 2, 2, 8, 8, 6, 4, 3, 9, 8, 0, 6, 6, 0, 3, 6, 8, 9, 0, 2, 5, 1]"],"[1, 12]"],[["[3, 8, 4, 6, 6, 2, 4, 7, 2, 4, 4, 7, 4, 8, 6, 1, 3, 9, 4, 0, 1, 3, 0, 4, 9, 8, 8, 5, 3, 4]"],"[1, 9]"],[["[3, 6, 9, 5, 1, 8, 8, 3, 6, 0, 3, 1, 7, 8, 5, 6, 3, 1, 9, 4, 4, 5, 7, 6, 8, 3, 9, 3, 7, 2]"],"[2, 7]"]],"type":"(list -> list)","name":"016","solution":"(letII (+ randnat randnat) (λk -> (map (λstate -> (inc (letII state#1 (λx -> (case (flip 0.1) of True => randnat | False => randnat))))) (scanl (λacc x -> (letII (letII 5 (λx -> (- x#1 randnat))) (λx -> (case (inc randnat) of O => randnat | S => (λn -> acc#4))))) 0 (take (inc (case (flip 0.2) of True => k#1 | False => 1)) #2)))))","num_train":4},{"ios":[[["[6, 7, 5, 4, 2, 9, 5, 3, 7, 1, 8, 3, 7, 0, 6, 6, 7, 9, 4, 0, 1, 5, 3, 2, 7, 8, 5, 8, 2, 6]"],"[1, 2]"],[["[7, 5, 5, 0, 5, 7, 4, 1, 6, 9, 2, 8, 7, 9, 2, 3, 6, 8, 6, 5, 9, 4, 5, 3, 1, 3, 3, 2, 4, 4]"],"[1, 2, 3]"],[["[4, 1, 0, 2, 7, 7, 2, 7, 8, 0, 9, 7, 8, 9, 6, 1, 1, 1, 4, 9, 6, 9, 9, 2, 1, 5, 6, 0, 5, 1]"],"[1, 2, 3, 4, 5, 6, 7, 8]"],[["[0, 0, 6, 4, 7, 6, 9, 7, 7, 2, 6, 9, 1, 8, 0, 6, 0, 8, 8, 3, 5, 4, 4, 4, 2, 4, 5, 0, 4, 7]"],"[1, 2, 3, 4, 5]"],[["[1, 6, 0, 4, 7, 5, 2, 8, 9, 9, 6, 9, 5, 3, 3, 4, 9, 2, 1, 5, 8, 3, 0, 0, 0, 9, 5, 0, 4, 7]"],"[1, 2]"],[["[7, 3, 0, 4, 9, 1, 7, 4, 3, 1, 8, 7, 2, 5, 5, 8, 9, 7, 8, 1, 1, 5, 9, 7, 6, 0, 2, 1, 6, 8]"],"[1, 2, 3, 4, 5, 6, 7, 8, 9]"],[["[6, 8, 3, 3, 7, 1, 8, 0, 2, 1, 8, 1, 5, 3, 8, 0, 3, 9, 0, 8, 5, 8, 2, 9, 5, 0, 3, 7, 8, 9]"],"[1, 2]"],[["[7, 0, 9, 6, 7, 8, 5, 6, 2, 4, 1, 0, 6, 1, 5, 0, 2, 7, 9, 8, 6, 4, 2, 8, 2, 7, 9, 8, 2, 7]"],"[1, 2, 3, 4, 5, 6, 7]"]],"type":"(list -> list)","name":"017","solution":"(letII (inc randnat) (λk -> (map (λstate -> state#1) (scanl (λacc x -> (letII acc#2 (λx -> (inc x#1)))) 0 (take (letII (case randnat of O => k#1 | S => (λn -> 0)) (λx -> (inc k#2))) #2)))))","num_train":4},{"ios":[[["[6, 2, 6, 1, 1, 2, 9, 3, 0, 8, 3, 6, 9, 3, 2, 0, 6, 3, 3, 4, 3, 5, 9, 0, 7, 5, 3, 8, 8, 2]"],"[14, 11, 6, 12, 4]"],[["[5, 5, 5, 0, 3, 4, 0, 6, 1, 5, 2, 2, 6, 8, 1, 3, 4, 4, 7, 1, 3, 2, 5, 5, 1, 8, 5, 1, 9, 8]"],"[8, 13, 5, 13, 7, 12]"],[["[8, 3, 1, 9, 3, 5, 5, 6, 8, 0, 7, 1, 2, 9, 8, 9, 2, 6, 3, 9, 7, 0, 5, 0, 3, 9, 7, 1, 1, 2]"],"[19, 6, 20, 35, 7]"],[["[0, 9, 5, 2, 7, 7, 4, 8, 2, 6, 8, 6, 3, 9, 1, 7, 0, 2, 5, 2, 5, 7, 8, 1, 1, 4, 9, 1, 1, 3]"],"[14, 13, 13, 7, 13]"],[["[0, 4, 3, 3, 6, 7, 3, 5, 4, 6, 5, 7, 9, 9, 1, 3, 9, 3, 6, 3, 8, 3, 5, 2, 0, 3, 4, 3, 6, 3]"],"[10, 18, 3, 38, 2]"],[["[7, 8, 8, 0, 8, 4, 2, 5, 5, 9, 6, 3, 9, 1, 4, 3, 0, 5, 7, 5, 9, 0, 0, 5, 1, 0, 3, 7, 6, 3]"],"[15, 3, 10, 28, 7]"],[["[7, 4, 9, 6, 3, 9, 3, 1, 3, 9, 8, 1, 1, 0, 5, 4, 4, 6, 9, 6, 4, 6, 9, 1, 5, 1, 2, 4, 1, 7]"],"[14, 3, 9, 4, 13]"],[["[4, 3, 3, 8, 7, 1, 6, 1, 1, 2, 5, 6, 5, 2, 6, 0, 8, 7, 5, 1, 2, 9, 2, 5, 0, 6, 7, 9, 1, 5]"],"[4, 14, 4, 3, 31]"]],"type":"(list -> list)","name":"018","solution":"(letII (letII randnat (λx -> (+ x#1 (+ randnat x#1)))) (λk -> (map (λstate -> (+ randnat state#1)) (scanl (λacc x -> (letII (case (+ x#1 k#3) of O => acc#2 | S => (λn -> 1)) (λx -> (inc (inc randnat))))) 0 (take (+ (- randnat k#1) 5) #2)))))","num_train":4},{"ios":[[["[7, 3, 4, 0, 7, 0, 4, 6, 3, 5, 7, 5, 0, 2, 1, 0, 5, 4, 4, 6, 1, 9, 8, 0, 0, 2, 0, 5, 1, 7]"],"[8, 0, 6, 5, 6, 0, 0, 0, 6, 2, 0, 0]"],[["[0, 4, 1, 9, 4, 9, 3, 7, 9, 7, 3, 4, 7, 1, 9, 9, 9, 8, 8, 1, 9, 9, 4, 1, 4, 1, 5, 6, 7, 2]"],"[0, 5, 1, 2, 1, 2, 1, 19, 2, 7, 3, 4, 1, 12, 11, 6, 19, 0, 1, 19, 0, 19, 1, 3, 19, 1, 2, 1, 2, 1]"],[["[7, 9, 9, 6, 7, 1, 8, 4, 0, 0, 6, 1, 2, 3, 5, 0, 2, 4, 3, 9, 3, 0, 5, 7, 3, 4, 6, 5, 3, 0]"],"[3, 2, 7, 7, 0, 9, 2, 14, 7, 19, 7, 2, 7, 7]"],[["[3, 4, 1, 9, 7, 7, 3, 6, 0, 2, 7, 5, 4, 5, 8, 1, 2, 3, 2, 7, 8, 5, 9, 1, 1, 0, 1, 9, 3, 7]"],"[15, 4, 0, 5, 1, 15, 7, 3, 13, 4, 15, 2, 5, 11, 5, 15, 0, 0, 5, 0, 2, 2, 5, 2, 3, 2, 0, 15, 0, 9]"],[["[8, 6, 7, 7, 1, 1, 8, 3, 1, 5, 5, 2, 0, 0, 9, 4, 7, 5, 0, 3, 0, 3, 9, 2, 0, 8, 6, 4, 4, 5]"],"[3, 3, 5, 1, 5, 5, 5, 1, 7, 2]"],[["[2, 6, 3, 9, 5, 4, 9, 5, 6, 8, 9, 0, 0, 1, 4, 8, 9, 1, 5, 5, 8, 2, 1, 8, 4, 6, 2, 0, 2, 4]"],"[4, 1, 2, 5, 5, 10, 7, 2, 0, 1]"],[["[5, 2, 2, 8, 1, 5, 3, 7, 7, 0, 1, 1, 0, 3, 2, 9, 4, 9, 2, 6, 9, 1, 1, 1, 2, 7, 1, 1, 6, 3]"],"[0, 6, 11, 0, 0, 4, 4, 4]"],[["[5, 5, 9, 8, 1, 9, 7, 7, 3, 3, 4, 8, 6, 1, 8, 1, 9, 5, 1, 6, 2, 0, 9, 9, 6, 2, 4, 9, 7, 0]"],"[1, 1, 6, 1, 0, 8, 0, 0, 2, 3, 13, 1, 0, 5, 13, 3, 0, 1, 1, 8, 4, 4, 7, 13, 6, 2]"]],"type":"(list -> list)","name":"019","solution":"(letII (letII 5 (λx -> (+ randnat randnat))) (λk -> (map (λstate -> (case (case (== state#1 (letII k#2 (λx -> (+ randnat k#3)))) of True => randnat | False => randnat) of O => k#2 | S => (λn -> randnat))) (scanl (λacc x -> (case x#1 of O => randnat | S => (λn -> (letII acc#3 (λx -> (+ acc#4 randnat)))))) 0 (take (+ k#1 k#1) #2)))))","num_train":4},{"ios":[[["[1, 6, 6, 0, 8, 7, 7, 6, 0, 2, 5, 2, 6, 0, 5, 4, 1, 6, 9, 7, 2, 1, 0, 4, 8, 8, 7, 4, 5, 5]"],"[10, 20, 20, 8, 24, 22, 22, 20]"],[["[3, 6, 2, 8, 1, 5, 5, 7, 1, 6, 1, 3, 5, 6, 4, 2, 4, 8, 5, 5, 5, 0, 4, 7, 2, 1, 6, 0, 5, 0]"],"[24, 30]"],[["[9, 2, 0, 9, 8, 6, 5, 4, 5, 3, 5, 5, 5, 5, 9, 0, 1, 3, 9, 0, 6, 0, 8, 0, 6, 8, 9, 6, 6, 3]"],"[26, 12, 8, 26, 24, 20, 18, 16, 18, 14, 18, 18, 18, 18]"],[["[9, 5, 5, 9, 0, 7, 7, 4, 7, 5, 6, 1, 4, 4, 5, 8, 0, 3, 4, 4, 3, 5, 3, 0, 0, 0, 9, 1, 1, 6]"],"[24, 16, 16]"],[["[9, 8, 8, 1, 3, 6, 2, 5, 9, 1, 0, 7, 4, 3, 7, 6, 8, 9, 6, 2, 9, 0, 1, 4, 8, 7, 3, 0, 1, 6]"],"[36, 34]"],[["[4, 3, 2, 0, 5, 8, 4, 3, 5, 4, 6, 2, 0, 4, 9, 8, 7, 8, 3, 2, 7, 4, 7, 5, 5, 7, 7, 4, 7, 0]"],"[10, 8, 6, 2, 12]"],[["[8, 6, 6, 2, 0, 3, 7, 1, 6, 4, 6, 1, 6, 4, 8, 1, 3, 4, 6, 9, 3, 8, 5, 1, 8, 3, 3, 7, 0, 9]"],"[32, 28, 28, 20, 16, 22, 30, 18, 28, 24, 28]"],[["[6, 6, 9, 7, 8, 3, 8, 8, 0, 6, 4, 4, 9, 8, 6, 6, 3, 6, 0, 5, 5, 6, 9, 7, 9, 9, 6, 1, 5, 1]"],"[24, 24, 30, 26, 28, 18, 28, 28, 12, 24, 20]"]],"type":"(list -> list)","name":"020","solution":"(letII (- 9 randnat) (λk -> (map (λstate -> (+ state#1 (case state#1 of O => randnat | S => (λn -> state#2)))) (scanl (λacc x -> (letII (- 6 (case (flip 0.9) of True => acc#2 | False => 2)) (λx -> (+ x#2 k#4)))) 0 (take (inc (inc randnat)) #2)))))","num_train":4},{"ios":[[["[7, 5, 8, 9, 6, 3, 8, 4, 5, 9, 7, 7, 8, 5, 9, 3, 3, 4, 3, 9, 3, 4, 1, 1, 4, 4, 0, 6, 2, 1]"],"[5, 4, 8, 4, 5, 6]"],[["[5, 3, 6, 2, 8, 8, 1, 1, 9, 9, 1, 8, 2, 2, 0, 6, 4, 2, 0, 0, 0, 4, 6, 5, 9, 6, 0, 4, 9, 0]"],"[3, 7, 3, 11, 5, 3, 3, 16, 15, 8, 3, 8, 4, 4, 9, 6, 9, 8, 12, 3, 9]"],[["[3, 4, 8, 6, 5, 8, 9, 6, 6, 8, 5, 5, 0, 5, 2, 8, 4, 0, 9, 6, 8, 7, 7, 3, 4, 0, 4, 1, 2, 6]"],"[5, 7, 14, 3, 5, 3, 4]"],[["[5, 2, 7, 9, 3, 5, 2, 5, 8, 2, 5, 6, 3, 4, 4, 4, 5, 6, 8, 8, 0, 5, 7, 1, 2, 6, 3, 9, 7, 3]"],"[4, 7, 4, 11, 6, 19, 3]"],[["[3, 6, 2, 8, 9, 8, 9, 7, 4, 4, 5, 0, 6, 2, 5, 7, 2, 5, 2, 8, 6, 4, 0, 7, 9, 4, 4, 4, 8, 5]"],"[4, 9]"],[["[4, 9, 6, 3, 2, 6, 6, 0, 3, 7, 9, 6, 1, 7, 3, 3, 0, 3, 9, 1, 6, 9, 9, 6, 2, 8, 6, 3, 7, 0]"],"[13, 5, 6, 3, 3, 3, 3, 11, 8]"],[["[4, 2, 2, 8, 1, 6, 8, 2, 9, 2, 5, 2, 3, 6, 7, 7, 7, 9, 6, 3, 2, 8, 5, 7, 1, 1, 8, 7, 4, 8]"],"[19, 14, 4]"],[["[7, 4, 5, 4, 7, 8, 6, 6, 2, 8, 9, 5, 6, 0, 7, 7, 6, 5, 6, 6, 8, 1, 4, 2, 9, 2, 0, 3, 3, 1]"],"[3, 10, 6, 5]"]],"type":"(list -> list)","name":"021","solution":"(letII (letII 8 (λx -> (+ randnat x#1))) (λk -> (map (λstate -> (letII randnat (λx -> (+ state#2 randnat)))) (scanl (λacc x -> (inc (letII randnat (λx -> (case (== acc#3 acc#3) of True => 2 | False => (case (flip 0.4) of True => x#2 | False => randnat)))))) 0 (take (- k#1 (inc randnat)) #2)))))","num_train":4},{"ios":[[["[6, 7, 6, 7, 4, 0, 9, 1, 0, 0, 2, 1, 1, 0, 5, 5, 0, 2, 9, 8, 2, 8, 8, 2, 4, 0, 6, 0, 5, 6]"],"[4, 1]"],[["[8, 0, 4, 8, 0, 3, 7, 6, 9, 0, 5, 4, 0, 4, 9, 8, 9, 6, 0, 1, 1, 2, 8, 4, 9, 4, 6, 7, 7, 2]"],"[4, 4, 0, 2, 0, 1, 5, 4]"],[["[0, 3, 5, 4, 3, 3, 7, 9, 3, 1, 4, 1, 5, 7, 5, 4, 7, 5, 9, 7, 4, 9, 3, 2, 3, 7, 1, 4, 9, 0]"],"[1, 5, 9, 2, 2, 14, 0, 3, 2, 4, 0, 0, 1, 6, 0, 18, 3, 0, 3, 1, 9, 0]"],[["[4, 9, 6, 7, 3, 5, 7, 3, 1, 8, 9, 4, 7, 2, 0, 5, 3, 6, 4, 8, 9, 2, 9, 3, 5, 7, 5, 8, 1, 8]"],"[2, 8, 15, 20, 3, 9, 0, 6, 4]"],[["[6, 1, 4, 8, 4, 8, 7, 4, 0, 5, 6, 2, 8, 2, 1, 1, 2, 3, 9, 9, 8, 6, 3, 0, 0, 3, 1, 2, 5, 1]"],"[1, 7, 0, 1, 32]"],[["[4, 4, 6, 9, 3, 9, 6, 4, 4, 4, 8, 4, 8, 5, 1, 8, 9, 8, 9, 4, 7, 4, 9, 7, 1, 0, 2, 7, 6, 0]"],"[1, 2, 3, 6, 1, 5, 4]"],[["[3, 4, 3, 2, 4, 9, 8, 8, 4, 1, 7, 6, 4, 2, 6, 4, 8, 4, 4, 2, 2, 8, 3, 9, 3, 3, 8, 1, 3, 5]"],"[13, 1]"],[["[7, 1, 1, 2, 6, 6, 0, 1, 8, 0, 2, 1, 7, 1, 8, 8, 5, 0, 5, 9, 2, 0, 6, 4, 4, 4, 9, 4, 6, 1]"],"[5, 1, 11, 6, 2, 3, 0]"]],"type":"(list -> list)","name":"022","solution":"(letII (case randnat of O => randnat | S => (λn -> n#1)) (λk -> (map (λstate -> state#1) (scanl (λacc x -> (case (flip 0.1) of True => (letII x#1 (λx -> (case (flip 0.9) of True => randnat | False => acc#3))) | False => randnat)) 0 (take (inc k#1) #2)))))","num_train":4},{"ios":[[["[0, 4, 3, 9, 9, 2, 0, 1, 2, 7, 7, 1, 2, 4, 1, 5, 4, 6, 3, 4, 8, 5, 8, 1, 1, 9, 6, 8, 9, 1]"],"[2, 10]"],[["[8, 8, 1, 3, 1, 5, 0, 1, 3, 6, 8, 8, 8, 6, 3, 2, 8, 7, 2, 0, 1, 8, 6, 2, 3, 3, 6, 5, 8, 7]"],"[5, 15, 9, 11]"],[["[9, 4, 0, 9, 5, 0, 3, 9, 1, 0, 2, 9, 0, 5, 4, 4, 2, 1, 4, 6, 5, 5, 5, 4, 1, 5, 4, 4, 3, 3]"],"[11, 6, 2, 21, 6]"],[["[5, 4, 3, 9, 3, 2, 2, 2, 4, 6, 5, 8, 0, 8, 1, 7, 1, 2, 4, 4, 0, 0, 5, 0, 4, 2, 8, 0, 8, 5]"],"[8, 13, 6, 17]"],[["[6, 2, 9, 0, 5, 6, 1, 6, 5, 8, 3, 9, 9, 2, 6, 7, 6, 4, 1, 1, 1, 0, 5, 7, 8, 0, 7, 9, 2, 1]"],"[7, 18, 11, 3, 4, 10, 6]"],[["[1, 4, 3, 1, 7, 9, 2, 6, 4, 8, 1, 1, 4, 2, 9, 8, 9, 4, 8, 4, 0, 6, 6, 3, 8, 5, 3, 0, 7, 1]"],"[3, 20, 5]"],[["[8, 2, 9, 6, 5, 6, 6, 3, 4, 6, 0, 7, 1, 8, 1, 5, 6, 6, 9, 3, 9, 5, 0, 8, 3, 0, 8, 2, 0, 1]"],"[15, 8, 11, 7, 15, 23]"],[["[3, 3, 0, 7, 8, 9, 1, 9, 6, 8, 1, 8, 6, 6, 8, 8, 7, 2, 9, 0, 9, 6, 5, 6, 8, 3, 2, 8, 9, 4]"],"[8, 3, 5, 17, 17, 12, 10]"]],"type":"(list -> list)","name":"023","solution":"(letII randnat (λk -> (map (λstate -> (+ randnat (inc (inc state#1)))) (scanl (λacc x -> (letII acc#2 (λx -> (- (case (flip 0.9) of True => x#2 | False => k#4) randnat)))) 0 (take (- 7 randnat) #2)))))","num_train":4},{"ios":[[["[7, 9, 0, 4, 8, 0, 0, 0, 6, 0, 4, 2, 3, 3, 8, 9, 7, 6, 9, 1, 6, 6, 9, 7, 0, 6, 9, 6, 4, 0]"],"[10, 14, 15, 15, 14, 8, 11, 20, 17, 8, 16, 10, 13, 8, 13, 15, 15, 8]"],[["[8, 1, 6, 9, 4, 0, 1, 4, 2, 6, 2, 6, 5, 8, 4, 8, 5, 5, 3, 1, 9, 4, 8, 2, 2, 4, 9, 2, 8, 1]"],"[7, 7, 6, 2, 6]"],[["[9, 6, 8, 9, 9, 2, 9, 2, 7, 7, 4, 4, 7, 4, 7, 2, 4, 7, 2, 2, 9, 4, 5, 3, 3, 5, 6, 8, 1, 3]"],"[3, 7, 9, 4, 9, 0, 1, 10, 4]"],[["[3, 1, 8, 9, 1, 2, 5, 1, 8, 7, 1, 4, 5, 7, 0, 1, 1, 5, 4, 8, 3, 5, 7, 6, 1, 4, 1, 0, 2, 5]"],"[0, 2, 11, 1, 0, 1, 8]"],[["[8, 9, 5, 8, 7, 2, 9, 2, 7, 4, 7, 0, 6, 6, 5, 3, 4, 1, 0, 6, 6, 7, 9, 9, 4, 9, 0, 5, 6, 3]"],"[13, 21, 8, 9, 8, 13, 11, 11, 7, 7, 25, 18, 7, 12, 10]"],[["[7, 4, 5, 6, 5, 6, 8, 5, 7, 4, 8, 5, 8, 6, 3, 8, 3, 1, 9, 7, 7, 0, 4, 3, 0, 7, 2, 9, 1, 3]"],"[0, 2, 3, 14, 2, 2, 9, 9, 0]"],[["[8, 1, 8, 2, 8, 8, 8, 8, 6, 2, 7, 2, 0, 8, 7, 8, 9, 7, 2, 1, 6, 2, 3, 8, 1, 1, 9, 0, 0, 3]"],"[2, 2, 5, 5, 3, 8, 9, 3, 2, 7, 5, 13, 2, 7, 4, 3, 2]"],[["[8, 5, 6, 2, 3, 8, 0, 4, 6, 4, 8, 8, 2, 5, 1, 8, 6, 7, 3, 4, 1, 4, 5, 0, 6, 0, 2, 8, 2, 0]"],"[3, 0, 3, 2, 4, 4]"]],"type":"(list -> list)","name":"024","solution":"(letII (inc randnat) (λk -> (map (λstate -> (+ (- k#2 6) state#1)) (scanl (λacc x -> (letII acc#2 (λx -> (case (== randnat x#1) of True => (letII randnat (λx -> (inc x#1))) | False => randnat)))) 0 (take (letII 2 (λx -> (+ 4 (case randnat of O => randnat | S => (λn -> randnat))))) #2)))))","num_train":4},{"ios":[[["[9, 7, 1, 6, 9, 7, 4, 2, 5, 3, 2, 5, 0, 2, 4, 3, 9, 3, 3, 6, 1, 8, 6, 4, 9, 3, 8, 0, 0, 6]"],"[5, 4, 2, 4]"],[["[8, 7, 7, 5, 0, 6, 4, 9, 7, 0, 0, 4, 3, 2, 5, 3, 1, 0, 3, 9, 9, 3, 8, 2, 2, 2, 1, 4, 4, 4]"],"[3, 2]"],[["[7, 6, 9, 2, 8, 3, 6, 3, 1, 8, 8, 7, 8, 3, 5, 1, 1, 6, 1, 7, 8, 8, 0, 2, 5, 3, 6, 3, 0, 4]"],"[4, 2, 1, 0, 11, 2, 3]"],[["[8, 8, 8, 2, 6, 2, 9, 7, 9, 9, 9, 0, 6, 9, 9, 2, 2, 2, 2, 0, 9, 0, 0, 6, 1, 7, 9, 7, 6, 5]"],"[1, 9, 3, 5, 4, 1, 0, 4, 0]"],[["[7, 1, 5, 2, 3, 6, 2, 7, 1, 8, 8, 4, 1, 1, 7, 9, 4, 5, 8, 8, 4, 9, 5, 9, 6, 8, 2, 9, 8, 4]"],"[1, 4, 3, 4, 1, 3, 3, 8, 0, 4, 0]"],[["[2, 9, 1, 8, 4, 2, 9, 3, 3, 7, 0, 4, 5, 6, 8, 4, 5, 3, 2, 1, 6, 8, 1, 6, 4, 0, 8, 4, 0, 6]"],"[10, 7, 13, 5, 0]"],[["[2, 7, 1, 3, 7, 9, 0, 9, 9, 3, 3, 5, 2, 7, 1, 9, 1, 9, 6, 7, 9, 9, 8, 7, 6, 5, 4, 5, 5, 9]"],"[9, 4, 0, 7, 4, 13, 0, 4, 0, 2, 6, 11]"],[["[1, 7, 8, 1, 8, 2, 4, 0, 8, 2, 4, 3, 3, 5, 0, 2, 2, 3, 4, 9, 5, 9, 6, 9, 8, 9, 7, 0, 9, 2]"],"[15, 0, 11]"]],"type":"(list -> list)","name":"025","solution":"(letII randnat (λk -> (map (λstate -> (+ state#1 randnat)) (scanl (λacc x -> acc#2) 0 (take (letII (inc 5) (λx -> (+ k#2 (inc (letII x#1 (λx -> (case x#2 of O => x#2 | S => (λn -> randnat)))))))) #2)))))","num_train":4},{"ios":[[["[6, 8, 0, 3, 3, 7, 8, 3, 9, 2, 6, 8, 2, 4, 1, 1, 4, 6, 5, 0, 0, 7, 8, 0, 7, 4, 2, 0, 3, 7]"],"[3, 7, 2, 8, 12, 2, 10]"],[["[7, 8, 6, 9, 4, 5, 0, 1, 8, 3, 4, 0, 0, 6, 2, 8, 6, 1, 4, 2, 5, 6, 7, 4, 7, 0, 1, 3, 4, 9]"],"[9, 18, 11, 8, 9, 5, 1]"],[["[5, 2, 7, 8, 0, 3, 2, 0, 5, 1, 8, 4, 7, 7, 2, 6, 5, 7, 4, 9, 1, 6, 3, 2, 0, 2, 5, 7, 9, 9]"],"[3, 1, 5, 1, 2, 2, 1]"],[["[5, 2, 5, 0, 1, 9, 6, 1, 1, 6, 4, 2, 3, 6, 9, 0, 5, 9, 7, 2, 9, 5, 1, 0, 0, 5, 3, 9, 2, 1]"],"[11, 4, 8, 18, 2, 6, 8]"],[["[2, 6, 2, 9, 9, 0, 4, 6, 0, 9, 7, 7, 0, 8, 0, 7, 4, 7, 5, 8, 3, 1, 9, 5, 8, 6, 3, 3, 6, 2]"],"[1, 12, 12, 12, 1, 4, 3]"],[["[6, 3, 7, 8, 0, 7, 0, 5, 8, 7, 2, 4, 6, 1, 5, 4, 6, 1, 0, 5, 4, 9, 2, 8, 9, 1, 2, 8, 2, 7]"],"[5, 7, 2, 5, 7, 3, 8]"],[["[0, 7, 6, 5, 2, 5, 7, 4, 2, 9, 7, 3, 8, 1, 9, 7, 5, 7, 2, 4, 4, 5, 9, 7, 3, 2, 0, 0, 9, 2]"],"[3, 8, 1, 1, 6, 6, 4]"],[["[6, 1, 9, 7, 3, 5, 0, 5, 2, 3, 3, 2, 4, 5, 8, 2, 7, 8, 9, 5, 6, 8, 9, 4, 4, 7, 7, 0, 5, 5]"],"[9, 1, 3, 2, 7, 8, 5]"]],"type":"(list -> list)","name":"026","solution":"(letII (+ (case (flip 0.1) of True => randnat | False => randnat) 8) (λk -> (map (λstate -> (case state#1 of O => randnat | S => (λn -> (letII 3 (λx -> (inc randnat)))))) (scanl (λacc x -> (+ acc#2 x#1)) 0 (take (letII k#1 (λx -> (case 2 of O => (case randnat of O => randnat | S => (λn -> 8)) | S => (λn -> 7)))) #2)))))","num_train":4},{"ios":[[["[9, 5, 7, 0, 9, 2, 3, 4, 0, 0, 5, 9, 2, 1, 8, 8, 8, 1, 6, 4, 1, 0, 6, 1, 0, 6, 9, 6, 7, 5]"],"[2, 0, 10]"],[["[9, 3, 8, 7, 2, 5, 1, 2, 3, 3, 8, 7, 2, 2, 6, 4, 9, 5, 3, 2, 3, 0, 6, 1, 9, 8, 9, 9, 9, 0]"],"[2, 0, 1]"],[["[8, 7, 3, 3, 3, 8, 4, 4, 0, 1, 2, 5, 3, 0, 4, 4, 9, 3, 5, 9, 8, 6, 9, 9, 5, 2, 6, 6, 9, 1]"],"[2, 0, 2]"],[["[3, 4, 7, 5, 8, 6, 6, 1, 4, 4, 4, 0, 5, 9, 1, 4, 7, 2, 2, 7, 2, 7, 9, 5, 7, 3, 2, 2, 4, 0]"],"[2, 0, 2]"],[["[0, 8, 8, 4, 1, 7, 5, 5, 9, 7, 2, 9, 3, 2, 4, 3, 0, 4, 7, 4, 8, 6, 3, 9, 7, 0, 2, 8, 1, 4]"],"[0, 1, 2]"],[["[9, 6, 1, 7, 8, 8, 5, 4, 7, 9, 0, 7, 0, 1, 6, 5, 5, 1, 8, 0, 8, 6, 3, 7, 4, 5, 2, 8, 7, 0]"],"[2, 0, 2]"],[["[2, 1, 6, 0, 8, 3, 1, 0, 9, 9, 3, 2, 6, 2, 1, 7, 1, 5, 5, 3, 8, 9, 3, 8, 9, 2, 7, 4, 9, 9]"],"[2, 0, 2]"],[["[4, 3, 3, 4, 6, 5, 7, 9, 1, 9, 2, 6, 4, 1, 1, 1, 7, 0, 9, 9, 4, 3, 9, 3, 6, 0, 9, 2, 7, 8]"],"[2, 0, 2]"]],"type":"(list -> list)","name":"027","solution":"(letII (letII 4 (λx -> (inc 3))) (λk -> (map (λstate -> (- (letII 8 (λx -> (case (flip 0.6) of True => state#2 | False => randnat))) 3)) (scanl (λacc x -> (- (- 9 acc#2) k#3)) 0 (take (letII (case k#1 of O => k#1 | S => (λn -> 2)) (λx -> (inc x#1))) #2)))))","num_train":4},{"ios":[[["[7, 7, 5, 3, 9, 7, 6, 9, 6, 4, 4, 3, 6, 6, 3, 8, 9, 1, 3, 8, 3, 7, 3, 2, 0, 6, 8, 4, 3, 0]"],"[11, 13]"],[["[7, 0, 1, 5, 7, 7, 3, 3, 7, 0, 9, 5, 5, 2, 3, 1, 2, 5, 3, 4, 8, 6, 6, 6, 1, 1, 1, 2, 7, 7]"],"[8, 11]"],[["[9, 4, 4, 5, 0, 4, 7, 7, 4, 4, 4, 3, 7, 3, 6, 7, 1, 0, 9, 2, 7, 8, 7, 2, 4, 3, 8, 9, 3, 4]"],"[8, 9]"],[["[7, 0, 3, 0, 4, 0, 7, 0, 2, 0, 5, 5, 7, 7, 4, 1, 3, 2, 2, 0, 3, 7, 0, 7, 9, 6, 3, 1, 0, 2]"],"[18, 12]"],[["[0, 6, 0, 6, 1, 0, 5, 9, 0, 0, 2, 5, 5, 4, 1, 2, 1, 0, 3, 4, 8, 5, 4, 8, 2, 7, 0, 1, 8, 9]"],"[8, 9, 9]"],[["[4, 9, 5, 8, 6, 8, 1, 5, 9, 8, 1, 0, 2, 6, 0, 7, 6, 6, 9, 3, 9, 1, 8, 5, 4, 0, 5, 7, 7, 4]"],"[9, 10, 13]"],[["[4, 3, 2, 5, 2, 3, 5, 2, 8, 0, 4, 3, 0, 7, 2, 6, 4, 3, 4, 1, 2, 4, 3, 6, 2, 0, 3, 9, 1, 9]"],"[17, 14]"],[["[3, 2, 2, 1, 1, 0, 2, 6, 9, 1, 3, 1, 6, 9, 8, 1, 0, 6, 5, 2, 7, 3, 2, 7, 4, 9, 4, 6, 2, 0]"],"[9, 12]"]],"type":"(list -> list)","name":"028","solution":"(letII (case randnat of O => randnat | S => (λn -> randnat)) (λk -> (map (λstate -> (+ (inc 7) (case 4 of O => state#1 | S => (λn -> randnat)))) (scanl (λacc x -> (+ randnat acc#2)) 0 (take (inc (letII k#1 (λx -> (case (letII (letII 1 (λx -> (case (flip 0.9) of True => k#3 | False => randnat))) (λx -> (- randnat randnat))) of O => 1 | S => (λn -> x#2))))) #2)))))","num_train":4},{"ios":[[["[2, 9, 9, 6, 4, 0, 4, 5, 1, 4, 1, 2, 1, 3, 8, 9, 3, 3, 9, 4, 9, 3, 9, 6, 2, 1, 4, 4, 9, 3]"],"[0, 0, 0, 0, 13, 19, 19, 30, 33, 40, 40, 53, 72, 74, 74, 74, 76, 76, 82, 85, 89]"],[["[7, 0, 6, 3, 6, 9, 0, 6, 3, 0, 2, 2, 6, 7, 5, 8, 8, 7, 1, 1, 5, 4, 7, 3, 8, 5, 2, 0, 9, 6]"],"[0, 4, 9, 15, 16, 25, 27, 27, 27, 29, 29, 36, 38, 38, 38, 47, 48, 48, 49, 51, 59, 59]"],[["[7, 1, 7, 0, 0, 5, 4, 7, 6, 5, 7, 1, 5, 5, 8, 7, 8, 0, 7, 3, 3, 3, 7, 7, 2, 3, 6, 4, 4, 6]"],"[4, 4, 10, 11]"],[["[4, 6, 3, 2, 0, 5, 7, 3, 0, 6, 8, 3, 4, 6, 0, 1, 7, 8, 4, 0, 6, 1, 7, 9, 2, 1, 3, 2, 9, 9]"],"[0, 11, 12, 13, 28, 42, 42]"],[["[0, 4, 1, 8, 4, 8, 2, 6, 4, 6, 5, 5, 6, 8, 9, 6, 8, 4, 3, 0, 5, 0, 5, 7, 0, 2, 5, 0, 5, 4]"],"[0, 0, 6]"],[["[4, 2, 1, 8, 3, 5, 0, 3, 2, 2, 0, 7, 2, 6, 3, 8, 9, 8, 4, 0, 6, 7, 7, 5, 7, 0, 0, 5, 7, 8]"],"[0, 1]"],[["[9, 9, 2, 4, 7, 7, 8, 8, 6, 9, 2, 9, 7, 9, 6, 0, 6, 2, 8, 1, 8, 3, 2, 1, 3, 9, 4, 5, 7, 6]"],"[0, 3, 3, 3, 3, 3]"],[["[2, 1, 4, 5, 7, 9, 3, 5, 5, 5, 9, 0, 8, 1, 4, 0, 8, 3, 5, 8, 4, 6, 8, 2, 5, 8, 2, 0, 5, 7]"],"[9, 10, 10, 14, 19, 19]"]],"type":"(list -> list)","name":"029","solution":"(letII (inc (+ randnat randnat)) (λk -> (map (λstate -> (case (letII randnat (λx -> (+ (case x#1 of O => x#1 | S => (λn -> randnat)) state#2))) of O => state#1 | S => (λn -> state#2))) (scanl (λacc x -> (+ acc#2 (case randnat of O => randnat | S => (λn -> (- randnat randnat))))) 0 (take (letII randnat (λx -> (+ x#1 randnat))) #2)))))","num_train":4},{"ios":[[["[5, 6, 7, 3, 7, 5, 7, 5, 5, 5, 5, 2, 5, 9, 0, 3, 8, 2, 3, 1, 2, 9, 7, 7, 0, 6, 6, 2, 7, 5]"],"[7, 2]"],[["[2, 0, 8, 8, 4, 1, 0, 9, 9, 2, 0, 6, 0, 2, 1, 9, 3, 6, 1, 1, 4, 2, 8, 4, 0, 0, 0, 0, 4, 8]"],"[7, 1]"],[["[9, 4, 1, 0, 7, 0, 9, 9, 4, 3, 0, 9, 5, 9, 1, 7, 6, 1, 5, 5, 9, 0, 8, 2, 4, 0, 7, 4, 0, 1]"],"[1, 13]"],[["[7, 8, 2, 9, 5, 8, 4, 4, 2, 7, 6, 0, 1, 4, 9, 8, 4, 8, 8, 6, 6, 0, 6, 2, 6, 7, 6, 6, 9, 9]"],"[18, 15]"],[["[9, 2, 5, 0, 9, 2, 4, 0, 5, 8, 0, 2, 0, 0, 4, 2, 3, 6, 4, 2, 7, 1, 1, 6, 6, 3, 7, 6, 2, 3]"],"[0, 1]"],[["[7, 2, 4, 7, 2, 5, 5, 6, 3, 5, 0, 8, 1, 8, 0, 5, 8, 4, 8, 7, 7, 2, 7, 5, 5, 4, 4, 0, 6, 2]"],"[2, 1]"],[["[3, 4, 6, 0, 6, 0, 1, 0, 0, 7, 2, 6, 1, 3, 1, 1, 6, 4, 2, 9, 8, 0, 4, 0, 0, 9, 8, 0, 4, 4]"],"[0, 1]"],[["[0, 2, 4, 8, 1, 5, 0, 5, 8, 1, 0, 2, 4, 7, 9, 3, 7, 7, 8, 4, 5, 5, 9, 9, 3, 2, 3, 4, 7, 2]"],"[0, 5]"]],"type":"(list -> list)","name":"030","solution":"(letII (inc (case (flip 0.3) of True => 2 | False => (inc 5))) (λk -> (map (λstate -> (letII k#2 (λx -> (+ state#2 randnat)))) (scanl (λacc x -> (case (iseven k#3) of True => k#3 | False => (case x#1 of O => randnat | S => (λn -> acc#3)))) 0 (take (case (letII k#1 (λx -> (case randnat of O => 9 | S => (λn -> k#3)))) of O => randnat | S => (λn -> 2)) #2)))))","num_train":4},{"ios":[[["[7, 8, 6, 6, 8, 5, 7, 2, 7, 0, 8, 7, 9, 3, 7, 1, 6, 5, 0, 4, 1, 4, 3, 9, 0, 9, 9, 4, 4, 7]"],"[0, 2, 6, 7, 1, 6, 6, 6, 6, 1, 4, 6, 8, 6]"],[["[3, 6, 1, 8, 9, 0, 0, 9, 6, 6, 6, 0, 1, 6, 9, 9, 9, 1, 1, 2, 4, 9, 2, 0, 9, 6, 0, 0, 8, 3]"],"[1, 2, 6, 6, 12, 2, 6]"],[["[3, 5, 0, 1, 5, 7, 2, 0, 1, 1, 1, 4, 1, 9, 2, 7, 3, 3, 1, 1, 2, 1, 3, 5, 2, 3, 4, 2, 8, 6]"],"[0, 4, 1, 6, 5, 6, 1]"],[["[0, 3, 1, 1, 2, 3, 1, 0, 8, 9, 1, 9, 7, 6, 5, 7, 3, 1, 8, 4, 8, 3, 6, 8, 3, 4, 0, 0, 7, 1]"],"[0, 4, 6, 6, 6, 6, 5, 6, 6, 4, 6, 6, 6, 3]"],[["[6, 1, 4, 1, 5, 8, 5, 1, 9, 7, 0, 6, 7, 0, 6, 9, 2, 8, 5, 4, 7, 3, 6, 9, 8, 0, 7, 2, 0, 7]"],"[6, 2, 11, 4, 5, 2, 21, 6]"],[["[8, 3, 0, 8, 5, 0, 5, 0, 9, 3, 8, 2, 2, 8, 9, 2, 2, 5, 3, 4, 1, 1, 5, 0, 1, 7, 9, 2, 6, 8]"],"[6, 6, 0, 0, 15, 6, 2, 8]"],[["[1, 9, 4, 3, 4, 4, 4, 7, 1, 0, 7, 3, 8, 4, 4, 0, 2, 9, 2, 2, 2, 5, 0, 4, 1, 1, 0, 8, 6, 6]"],"[3, 6, 6, 5, 6, 6, 6]"],[["[5, 3, 3, 0, 1, 6, 8, 4, 0, 5, 6, 0, 6, 6, 6, 3, 7, 4, 1, 1, 9, 0, 1, 5, 5, 2, 6, 5, 0, 8]"],"[5, 6, 6, 6, 6, 6, 6]"]],"type":"(list -> list)","name":"031","solution":"(letII (case (flip 0.3) of True => 8 | False => 7) (λk -> (map (λstate -> (letII randnat (λx -> (case (flip 0.2) of True => randnat | False => (letII k#3 (λx -> (case state#3 of O => x#1 | S => (λn -> (letII randnat (λx -> (case (flip 0.5) of True => randnat | False => 6))))))))))) (scanl (λacc x -> (letII acc#2 (λx -> (case x#1 of O => randnat | S => (λn -> x#2))))) 0 (take (case randnat of O => (+ k#1 k#1) | S => (λn -> k#2)) #2)))))","num_train":4},{"ios":[[["[0, 6, 0, 2, 5, 2, 5, 4, 6, 8, 2, 3, 8, 9, 7, 5, 4, 6, 6, 2, 7, 9, 4, 9, 7, 3, 5, 1, 0, 4]"],"[2, 6, 3]"],[["[1, 0, 8, 2, 4, 6, 5, 6, 7, 7, 5, 2, 2, 2, 6, 3, 7, 6, 4, 1, 4, 5, 7, 8, 8, 7, 1, 6, 6, 4]"],"[2, 4, 2, 9, 6, 4, 1, 1, 1, 1, 8, 3, 12]"],[["[8, 3, 0, 7, 0, 8, 6, 0, 1, 9, 9, 3, 5, 1, 8, 3, 9, 9, 4, 7, 5, 8, 3, 8, 7, 5, 6, 7, 5, 6]"],"[7, 2, 1, 9, 1]"],[["[4, 7, 2, 8, 3, 9, 1, 8, 6, 8, 4, 0, 5, 7, 7, 5, 9, 1, 4, 3, 9, 0, 3, 3, 6, 4, 0, 5, 3, 7]"],"[4, 7]"],[["[8, 1, 5, 6, 2, 5, 2, 1, 7, 7, 3, 6, 1, 4, 6, 1, 2, 1, 6, 2, 1, 2, 6, 3, 8, 7, 2, 1, 2, 8]"],"[3, 2, 7, 4, 3]"],[["[0, 5, 8, 9, 1, 0, 3, 2, 7, 4, 8, 3, 4, 6, 9, 3, 3, 1, 9, 1, 1, 6, 9, 8, 4, 8, 0, 1, 0, 9]"],"[3, 6, 2, 1]"],[["[0, 7, 2, 5, 9, 9, 0, 1, 4, 1, 2, 5, 4, 7, 9, 3, 0, 0, 7, 4, 2, 7, 1, 8, 5, 4, 2, 2, 4, 3]"],"[6, 8, 1, 3]"],[["[7, 1, 3, 7, 9, 9, 5, 7, 6, 5, 0, 5, 9, 9, 4, 7, 6, 1, 0, 1, 7, 7, 2, 8, 1, 8, 0, 6, 0, 9]"],"[19, 8, 9]"]],"type":"(list -> list)","name":"032","solution":"(letII (letII 3 (λx -> (+ x#1 randnat))) (λk -> (map (λstate -> (inc (letII state#1 (λx -> (case 8 of O => randnat | S => (λn -> randnat)))))) (scanl (λacc x -> (letII (- acc#2 5) (λx -> (case randnat of O => (inc 9) | S => (λn -> randnat))))) 0 (take (case k#1 of O => (- k#1 k#1) | S => (λn -> n#1)) #2)))))","num_train":4},{"ios":[[["[3, 9, 9, 5, 6, 1, 1, 6, 8, 2, 2, 3, 9, 5, 0, 9, 6, 5, 0, 9, 6, 4, 6, 7, 9, 0, 8, 5, 3, 6]"],"[13, 11, 11, 19, 11, 14, 16, 11]"],[["[5, 4, 1, 7, 6, 1, 8, 6, 5, 4, 4, 3, 6, 4, 2, 9, 0, 4, 1, 5, 2, 9, 9, 8, 1, 0, 8, 5, 4, 2]"],"[21, 18, 17, 23, 17, 19, 17, 20]"],[["[1, 2, 8, 3, 6, 0, 7, 1, 4, 5, 6, 5, 9, 7, 8, 5, 0, 8, 0, 7, 6, 3, 0, 7, 8, 5, 0, 1, 7, 1]"],"[16, 16, 18, 21, 16, 28, 16, 21]"],[["[8, 7, 0, 3, 7, 4, 0, 1, 8, 1, 0, 7, 2, 8, 2, 3, 0, 9, 2, 3, 8, 3, 2, 5, 4, 8, 4, 8, 8, 0]"],"[16, 16, 19, 16, 20, 22, 16, 16]"],[["[5, 6, 1, 6, 5, 8, 3, 9, 0, 3, 1, 5, 0, 6, 9, 0, 9, 7, 2, 1, 9, 6, 4, 0, 0, 9, 7, 0, 0, 6]"],"[40, 26, 28, 28, 26, 34, 26, 30]"],[["[1, 7, 2, 2, 9, 7, 9, 1, 1, 0, 1, 1, 7, 9, 6, 0, 6, 3, 3, 0, 0, 0, 9, 2, 8, 8, 5, 2, 7, 9]"],"[35, 20, 24, 20, 26, 20, 20, 29]"],[["[3, 5, 3, 1, 8, 7, 2, 1, 3, 5, 4, 9, 2, 5, 1, 4, 9, 1, 1, 5, 7, 6, 8, 6, 8, 3, 6, 6, 4, 8]"],"[15, 24, 13, 14, 14, 13, 20, 13]"],[["[6, 1, 8, 8, 4, 0, 3, 4, 6, 8, 1, 2, 2, 9, 4, 7, 2, 4, 3, 3, 6, 5, 4, 9, 1, 3, 9, 7, 3, 5]"],"[21, 21, 21, 29, 25, 21, 31, 21]"]],"type":"(list -> list)","name":"033","solution":"(letII (+ randnat 9) (λk -> (map (λstate -> (letII state#1 (λx -> (+ (inc x#1) k#3)))) (scanl (λacc x -> (- randnat acc#2)) 0 (take (letII (+ k#1 randnat) (λx -> (case k#2 of O => 8 | S => (λn -> 8)))) #2)))))","num_train":4},{"ios":[[["[0, 7, 0, 4, 8, 0, 9, 9, 6, 4, 0, 1, 3, 3, 6, 1, 6, 9, 6, 0, 6, 4, 9, 9, 9, 1, 4, 9, 7, 5]"],"[3, 4, 2, 1]"],[["[1, 8, 8, 6, 9, 8, 5, 5, 3, 0, 0, 3, 1, 6, 4, 6, 1, 6, 6, 2, 3, 6, 0, 9, 9, 1, 4, 6, 7, 1]"],"[17, 3, 1, 1, 8, 5, 9, 2, 19, 6, 6, 2]"],[["[7, 9, 1, 7, 4, 0, 3, 7, 3, 0, 6, 6, 7, 3, 4, 1, 0, 0, 8, 3, 0, 0, 9, 7, 2, 8, 0, 0, 2, 5]"],"[6, 7, 1, 2, 4, 3, 2, 2, 13, 4, 4, 5, 4]"],[["[6, 6, 3, 9, 9, 8, 3, 8, 1, 9, 0, 8, 0, 8, 4, 1, 5, 1, 7, 3, 1, 9, 3, 7, 0, 9, 1, 3, 9, 7]"],"[2, 10, 8, 8, 24, 6, 1, 1]"],[["[8, 7, 3, 6, 0, 0, 9, 8, 5, 2, 2, 2, 9, 2, 7, 8, 8, 9, 0, 5, 0, 0, 1, 8, 4, 2, 0, 1, 1, 6]"],"[1, 1, 5, 1, 1, 2, 3]"],[["[8, 8, 3, 0, 2, 2, 0, 9, 8, 0, 8, 3, 9, 6, 4, 4, 3, 4, 8, 4, 1, 2, 7, 1, 3, 3, 0, 0, 3, 0]"],"[7, 4, 6, 3, 9, 5]"],[["[5, 0, 6, 6, 2, 3, 1, 4, 3, 4, 7, 5, 8, 2, 0, 9, 9, 9, 4, 8, 3, 9, 4, 9, 0, 2, 5, 0, 7, 7]"],"[2, 2, 1, 1, 2, 4, 4, 2, 2, 1, 2, 2, 1, 4, 2, 13, 14]"],[["[0, 2, 4, 4, 2, 2, 0, 5, 2, 2, 4, 4, 1, 4, 3, 6, 7, 6, 0, 3, 8, 0, 4, 3, 0, 9, 7, 1, 3, 4]"],"[1, 3]"]],"type":"(list -> list)","name":"034","solution":"(letII 5 (λk -> (map (λstate -> (letII (case state#1 of O => k#2 | S => (λn -> state#2)) (λx -> (inc randnat)))) (scanl (λacc x -> (case (flip 0.5) of True => x#1 | False => (letII acc#2 (λx -> (case (flip 0.9) of True => randnat | False => k#4))))) 0 (take (+ randnat (case randnat of O => randnat | S => (λn -> n#1))) #2)))))","num_train":4},{"ios":[[["[8, 9, 4, 8, 7, 7, 1, 8, 6, 4, 5, 4, 3, 1, 4, 0, 2, 5, 7, 4, 6, 0, 4, 2, 4, 7, 6, 3, 2, 7]"],"[8, 15, 16, 25, 32, 39, 41, 50]"],[["[5, 6, 9, 1, 2, 7, 1, 9, 7, 8, 8, 7, 3, 1, 6, 2, 8, 8, 2, 4, 6, 8, 5, 8, 9, 9, 8, 7, 6, 9]"],"[4, 11, 21, 22, 25, 32, 33, 43]"],[["[9, 0, 7, 4, 2, 6, 3, 2, 1, 1, 7, 2, 6, 0, 1, 6, 0, 5, 5, 9, 8, 5, 3, 6, 0, 0, 4, 8, 1, 4]"],"[10, 11, 19, 20]"],[["[4, 9, 7, 3, 3, 2, 2, 4, 9, 1, 6, 8, 9, 0, 5, 2, 6, 8, 6, 4, 2, 8, 3, 8, 7, 7, 2, 2, 7, 7]"],"[1, 10, 15, 16, 17, 18, 19, 20]"],[["[8, 7, 7, 4, 6, 8, 9, 5, 1, 7, 7, 1, 3, 3, 6, 4, 8, 3, 9, 6, 4, 7, 3, 8, 5, 5, 7, 0, 3, 8]"],"[9, 17, 25, 30, 31, 32, 40, 43]"],[["[1, 6, 9, 5, 7, 8, 4, 3, 4, 9, 7, 5, 2, 6, 0, 5, 1, 6, 3, 4, 6, 9, 4, 7, 7, 0, 8, 2, 4, 9]"],"[1, 5, 14, 19, 27, 36, 40, 42]"],[["[7, 4, 5, 2, 2, 3, 0, 3, 2, 4, 0, 5, 6, 0, 5, 2, 7, 7, 0, 3, 5, 6, 1, 6, 5, 7, 9, 9, 5, 2]"],"[1, 3, 8, 9, 12, 13, 14, 18]"],[["[4, 2, 5, 3, 0, 2, 0, 7, 5, 3, 9, 6, 3, 4, 0, 8, 2, 3, 4, 7, 2, 7, 1, 1, 3, 8, 4, 4, 4, 2]"],"[1, 3, 8, 10, 11, 12, 13, 15]"]],"type":"(list -> list)","name":"035","solution":"(letII (+ 6 randnat) (λk -> (map (λstate -> state#1) (scanl (λacc x -> (+ (- x#1 randnat) (inc acc#2))) 0 (take (- 8 (- randnat k#1)) #2)))))","num_train":4},{"ios":[[["[9, 9, 6, 9, 9, 2, 4, 8, 6, 6, 8, 1, 8, 3, 9, 6, 5, 7, 6, 8, 4, 7, 9, 0, 1, 6, 4, 4, 2, 8]"],"[2, 4, 7, 4, 5, 12, 6]"],[["[6, 9, 4, 9, 5, 4, 6, 8, 7, 5, 9, 7, 7, 3, 9, 8, 2, 8, 5, 9, 9, 2, 5, 9, 3, 3, 9, 8, 5, 2]"],"[3, 2, 6, 8, 2, 6, 1]"],[["[2, 0, 3, 6, 9, 4, 0, 3, 1, 3, 0, 1, 2, 1, 8, 3, 2, 6, 4, 9, 7, 7, 3, 2, 5, 5, 8, 6, 9, 6]"],"[2, 6, 12, 4, 3, 2, 7]"],[["[2, 1, 4, 3, 5, 4, 7, 5, 8, 2, 1, 5, 4, 8, 0, 5, 6, 0, 8, 6, 6, 8, 8, 6, 8, 3, 0, 7, 8, 5]"],"[8, 10, 12, 2, 5, 5, 7]"],[["[2, 3, 6, 0, 3, 9, 9, 9, 2, 5, 9, 2, 5, 9, 4, 3, 6, 1, 6, 7, 8, 7, 4, 4, 7, 9, 9, 3, 4, 0]"],"[8, 3, 1, 1, 5, 2, 21]"],[["[0, 0, 4, 3, 7, 6, 8, 3, 9, 1, 6, 0, 2, 0, 3, 2, 7, 5, 7, 8, 0, 5, 0, 8, 5, 9, 9, 2, 2, 1]"],"[10, 5, 6, 2, 1, 5, 4]"],[["[3, 9, 4, 1, 1, 6, 4, 4, 1, 1, 9, 1, 1, 0, 7, 2, 5, 9, 2, 1, 1, 4, 7, 5, 2, 7, 7, 6, 8, 3]"],"[1, 6, 5, 3, 8, 2, 1]"],[["[8, 5, 8, 4, 2, 8, 0, 3, 6, 5, 8, 3, 2, 6, 2, 8, 0, 1, 1, 2, 1, 0, 4, 1, 6, 2, 5, 0, 1, 2]"],"[4, 2, 8, 3, 5, 10, 16]"]],"type":"(list -> list)","name":"036","solution":"(letII 6 (λk -> (map (λstate -> (letII randnat (λx -> (inc (case randnat of O => state#2 | S => (λn -> randnat)))))) (scanl (λacc x -> (case (case acc#2 of O => (letII x#1 (λx -> (case (flip 0.9) of True => x#2 | False => x#1))) | S => (λn -> randnat)) of O => 5 | S => (λn -> n#1))) 0 (take (inc k#1) #2)))))","num_train":4},{"ios":[[["[7, 6, 4, 0, 3, 6, 1, 3, 8, 6, 5, 1, 1, 5, 2, 8, 4, 3, 6, 0, 8, 8, 7, 7, 0, 3, 6, 2, 3, 9]"],"[0, 4, 6, 12, 10, 12, 12, 12, 12, 12, 12, 1, 1, 10, 1, 12, 12, 12, 1, 12, 12]"],[["[0, 8, 5, 5, 5, 7, 1, 6, 6, 6, 1, 1, 0, 8, 5, 0, 8, 7, 1, 7, 9, 0, 5, 0, 0, 2, 1, 3, 8, 4]"],"[12, 4, 5, 10, 10, 2, 10, 4, 10, 10, 10, 10, 1, 10, 4, 10, 5, 10, 3]"],[["[0, 1, 5, 6, 2, 7, 0, 2, 1, 0, 5, 7, 5, 6, 0, 0, 3, 8, 4, 6, 3, 7, 2, 3, 6, 5, 1, 8, 1, 3]"],"[3, 0, 0, 9, 9, 9, 9, 9, 7, 10, 9, 3, 9, 4, 9, 1, 7, 4]"],[["[5, 9, 6, 4, 8, 3, 1, 8, 6, 7, 0, 7, 4, 6, 9, 8, 4, 4, 1, 0, 2, 4, 1, 3, 7, 4, 4, 2, 9, 5]"],"[2, 2, 0, 8, 1, 3, 13, 13, 13, 13, 0, 0, 1, 13, 2, 1, 13, 13, 13, 12, 1, 13]"],[["[8, 2, 9, 8, 0, 3, 3, 2, 3, 3, 8, 4, 6, 5, 2, 3, 4, 4, 8, 6, 5, 6, 0, 5, 2, 7, 1, 9, 0, 9]"],"[2, 5, 8, 14, 8, 8, 5, 5, 5, 4, 6, 5, 5, 5]"],[["[3, 0, 1, 6, 5, 2, 7, 6, 5, 7, 4, 5, 9, 1, 5, 6, 2, 3, 3, 0, 4, 0, 9, 1, 8, 7, 0, 9, 8, 3]"],"[9, 1, 9, 7, 1, 7, 3, 4, 9, 7, 7, 7, 2, 7, 7, 7]"],[["[7, 4, 3, 0, 9, 1, 2, 3, 6, 1, 4, 5, 5, 4, 9, 5, 2, 4, 8, 1, 0, 8, 6, 5, 5, 0, 4, 2, 8, 0]"],"[4, 9, 5, 9, 9, 9, 9, 1, 7, 9, 9, 9, 9, 0, 0, 9, 9, 1]"],[["[3, 5, 5, 2, 0, 0, 4, 6, 1, 1, 0, 8, 0, 4, 2, 2, 4, 0, 7, 9, 0, 2, 7, 4, 4, 3, 9, 2, 2, 8]"],"[4, 8, 4, 8, 8, 8, 9, 0, 8, 8, 0, 9, 0, 8, 8, 8, 13]"]],"type":"(list -> list)","name":"037","solution":"(letII (+ (inc randnat) 4) (λk -> (map (λstate -> (case (flip 0.5) of True => randnat | False => state#1)) (scanl (λacc x -> (case (- randnat acc#2) of O => k#3 | S => (λn -> 9))) 0 (take (- (letII k#1 (λx -> (+ x#1 (+ 9 k#2)))) k#1) #2)))))","num_train":4},{"ios":[[["[9, 8, 9, 2, 9, 9, 8, 6, 7, 2, 5, 1, 8, 6, 9, 1, 3, 6, 2, 1, 7, 5, 5, 5, 7, 9, 1, 5, 5, 5]"],"[0, 0, 1, 2, 5]"],[["[5, 9, 3, 5, 7, 8, 2, 1, 0, 7, 8, 7, 6, 7, 0, 4, 9, 1, 9, 8, 8, 8, 5, 1, 4, 9, 4, 6, 9, 3]"],"[1, 3, 2, 2, 2]"],[["[9, 1, 2, 4, 4, 4, 7, 4, 7, 8, 0, 1, 2, 1, 1, 8, 0, 8, 4, 6, 1, 3, 9, 0, 3, 4, 1, 7, 7, 7]"],"[2, 3, 6, 0, 1]"],[["[8, 2, 5, 1, 5, 4, 4, 5, 9, 9, 8, 4, 5, 7, 2, 2, 9, 9, 8, 8, 9, 5, 8, 0, 5, 0, 1, 2, 7, 0]"],"[1, 3, 0, 0, 6]"],[["[9, 2, 7, 2, 7, 9, 2, 1, 9, 2, 5, 9, 0, 4, 4, 9, 9, 3, 2, 6, 7, 9, 0, 3, 6, 6, 5, 7, 0, 8]"],"[1, 6, 6, 2, 6]"],[["[0, 8, 7, 9, 1, 4, 7, 7, 3, 7, 2, 5, 2, 8, 0, 7, 7, 3, 8, 2, 1, 4, 0, 1, 4, 5, 9, 6, 2, 4]"],"[5, 2, 3, 2, 1]"],[["[3, 7, 9, 1, 3, 5, 1, 4, 2, 6, 3, 2, 6, 5, 3, 8, 5, 9, 1, 8, 1, 8, 2, 6, 5, 0, 4, 6, 3, 4]"],"[2, 6, 2, 0, 0]"],[["[2, 0, 6, 5, 7, 3, 5, 8, 2, 8, 6, 0, 0, 8, 3, 8, 2, 2, 2, 4, 0, 3, 1, 2, 7, 4, 9, 6, 9, 9]"],"[0, 6, 0, 6, 1]"]],"type":"(list -> list)","name":"038","solution":"(letII (inc (letII randnat (λx -> (case (flip 0.4) of True => randnat | False => (case (flip 0.9) of True => 4 | False => x#1))))) (λk -> (map (λstate -> (- (case (flip 0.8) of True => 6 | False => state#1) (letII randnat (λx -> (- 5 randnat))))) (scanl (λacc x -> acc#2) 0 (take 5 #2)))))","num_train":4},{"ios":[[["[8, 0, 1, 6, 8, 1, 0, 3, 5, 8, 4, 9, 8, 9, 7, 0, 9, 1, 5, 2, 5, 8, 9, 8, 8, 0, 9, 2, 8, 9]"],"[0, 2, 2, 0]"],[["[8, 0, 4, 8, 5, 9, 2, 4, 0, 8, 2, 9, 3, 5, 5, 2, 1, 3, 3, 0, 3, 4, 9, 3, 1, 0, 9, 7, 0, 4]"],"[6, 1, 2]"],[["[0, 8, 0, 9, 0, 3, 2, 3, 6, 8, 3, 8, 1, 8, 4, 6, 8, 0, 5, 0, 1, 1, 3, 9, 3, 9, 2, 1, 1, 7]"],"[1, 0, 4, 1, 1, 2, 18, 1, 2, 3, 4, 4, 4, 6, 0, 3]"],[["[1, 9, 3, 6, 2, 0, 2, 7, 8, 7, 8, 5, 6, 3, 2, 1, 9, 9, 9, 5, 3, 0, 1, 6, 0, 0, 3, 2, 8, 9]"],"[1, 7, 3, 5, 16, 0, 2]"],[["[4, 8, 3, 1, 1, 2, 3, 0, 7, 9, 8, 1, 4, 7, 3, 7, 1, 7, 2, 0, 6, 0, 6, 9, 1, 8, 9, 3, 2, 1]"],"[1, 7, 1, 6, 6, 2, 8, 3]"],[["[9, 0, 5, 9, 7, 6, 0, 2, 8, 5, 7, 2, 9, 4, 7, 5, 8, 2, 0, 0, 5, 2, 8, 2, 2, 0, 5, 8, 3, 2]"],"[3, 0]"],[["[6, 2, 3, 3, 2, 7, 2, 1, 1, 6, 6, 1, 9, 3, 1, 7, 9, 9, 0, 5, 7, 7, 5, 3, 0, 2, 1, 1, 6, 2]"],"[1, 3, 10, 13, 10]"],[["[5, 7, 8, 0, 6, 7, 3, 4, 5, 4, 5, 3, 8, 7, 5, 8, 1, 6, 8, 0, 6, 8, 5, 6, 0, 6, 3, 3, 5, 6]"],"[2, 13, 0, 1, 9, 10, 0]"]],"type":"(list -> list)","name":"039","solution":"(letII (+ randnat (case 2 of O => 0 | S => (λn -> 1))) (λk -> (map (λstate -> (case (== state#1 k#2) of True => 2 | False => randnat)) (scanl (λacc x -> (letII acc#2 (λx -> (+ (letII 3 (λx -> (inc randnat))) x#1)))) 0 (take (inc (case (flip 0.9) of True => k#1 | False => 5)) #2)))))","num_train":4},{"ios":[[["[8, 4, 0, 9, 9, 6, 4, 9, 1, 1, 1, 6, 7, 0, 9, 5, 9, 4, 0, 0, 5, 8, 0, 5, 8, 8, 5, 1, 8, 8]"],"[9, 18, 18, 32, 43, 51, 55]"],[["[4, 9, 9, 4, 4, 8, 8, 7, 7, 8, 5, 6, 4, 5, 2, 3, 9, 0, 8, 9, 4, 9, 5, 5, 1, 0, 2, 2, 4, 7]"],"[5, 14, 29, 34, 40, 48, 56]"],[["[8, 7, 2, 8, 5, 3, 2, 7, 4, 2, 3, 7, 4, 6, 4, 3, 3, 1, 6, 3, 8, 9, 8, 4, 3, 7, 7, 6, 7, 8]"],"[10, 17, 20, 31, 38, 45, 47]"],[["[9, 0, 9, 4, 3, 4, 7, 9, 2, 2, 4, 8, 4, 6, 8, 2, 7, 0, 8, 8, 2, 2, 1, 8, 4, 5, 0, 8, 0, 5]"],"[11, 11, 21, 32, 35, 42, 49]"],[["[0, 0, 4, 1, 2, 8, 2, 1, 7, 4, 9, 0, 2, 6, 4, 3, 0, 0, 4, 8, 2, 9, 4, 8, 5, 2, 5, 7, 5, 5]"],"[0, 0, 7, 9, 11, 22, 29]"],[["[9, 5, 1, 3, 5, 0, 0, 0, 8, 4, 3, 9, 9, 0, 0, 5, 0, 6, 0, 9, 5, 8, 0, 0, 7, 1, 1, 0, 7, 5]"],"[17, 27, 31, 44, 50, 53, 54]"],[["[2, 2, 2, 3, 3, 2, 5, 2, 9, 1, 2, 0, 4, 0, 7, 0, 4, 8, 4, 0, 0, 2, 2, 0, 4, 4, 5, 0, 2, 9]"],"[12, 18, 20, 37, 40, 48, 55]"],[["[4, 4, 6, 6, 9, 7, 3, 4, 0, 0, 1, 3, 7, 7, 2, 6, 8, 0, 5, 8, 6, 6, 8, 0, 6, 8, 5, 6, 7, 1]"],"[6, 19, 30, 53, 67, 78, 89]"]],"type":"(list -> list)","name":"040","solution":"(letII 6 (λk -> (map (λstate -> (letII randnat (λx -> (case state#2 of O => randnat | S => (λn -> n#1))))) (scanl (λacc x -> (letII randnat (λx -> (+ acc#3 (+ x#2 randnat))))) 0 (take (inc (letII (letII k#1 (λx -> (case (- x#1 randnat) of O => randnat | S => (λn -> randnat)))) (λx -> (case (inc k#2) of O => k#2 | S => (λn -> k#3))))) #2)))))","num_train":4},{"ios":[[["[2, 0, 6, 9, 6, 4, 7, 6, 8, 3, 6, 9, 0, 5, 7, 0, 8, 3, 9, 9, 4, 3, 0, 1, 0, 7, 2, 1, 6, 4]"],"[6, 4, 5, 0, 21, 11, 7, 21, 0, 1]"],[["[2, 8, 0, 6, 9, 1, 0, 8, 0, 5, 3, 3, 0, 2, 3, 3, 5, 0, 1, 5, 8, 1, 0, 6, 9, 0, 2, 1, 3, 2]"],"[6, 6, 5, 0, 0, 2, 0, 9, 3, 15, 6]"],[["[0, 2, 3, 3, 5, 6, 2, 6, 6, 5, 3, 4, 5, 7, 5, 0, 9, 1, 7, 7, 2, 4, 1, 2, 5, 2, 7, 8, 0, 2]"],"[0, 2, 3, 0]"],[["[8, 5, 1, 2, 4, 4, 5, 3, 2, 5, 2, 2, 7, 1, 6, 3, 8, 3, 4, 9, 1, 2, 4, 7, 9, 7, 9, 2, 6, 4]"],"[1, 5, 0, 3, 7, 1, 11, 2, 6, 5, 5, 3, 2, 4]"],[["[1, 6, 5, 2, 3, 3, 4, 6, 1, 8, 6, 4, 5, 7, 2, 7, 0, 4, 4, 3, 3, 6, 4, 3, 6, 1, 9, 6, 8, 9]"],"[3, 5, 0, 2, 4, 2, 12, 1]"],[["[8, 1, 8, 2, 4, 5, 1, 5, 2, 3, 3, 7, 6, 2, 9, 6, 7, 7, 4, 2, 1, 5, 3, 7, 6, 8, 7, 5, 6, 0]"],"[0, 9, 0, 0, 1, 6, 9, 2, 2, 9, 0, 4, 10, 0, 5]"],[["[3, 6, 1, 6, 4, 1, 2, 5, 7, 7, 8, 2, 6, 1, 6, 0, 3, 5, 6, 3, 9, 6, 2, 6, 4, 3, 6, 6, 8, 5]"],"[6, 4, 0, 2, 2, 4, 16, 2, 0, 2, 0, 5, 10, 7, 7, 21]"],[["[0, 4, 0, 2, 7, 4, 9, 7, 0, 6, 2, 1, 1, 1, 8, 7, 3, 9, 7, 8, 9, 7, 9, 1, 4, 6, 2, 4, 9, 8]"],"[7, 2]"]],"type":"(list -> list)","name":"041","solution":"(letII 3 (λk -> (map (λstate -> (case (letII randnat (λx -> (+ randnat (+ state#2 state#2)))) of O => randnat | S => (λn -> randnat))) (scanl (λacc x -> (- (letII x#1 (λx -> (- randnat randnat))) acc#2)) 0 (take (inc (case randnat of O => (+ k#1 randnat) | S => (λn -> randnat))) #2)))))","num_train":4},{"ios":[[["[0, 0, 8, 1, 3, 1, 3, 9, 4, 5, 3, 6, 9, 6, 5, 3, 2, 2, 1, 6, 4, 6, 9, 6, 0, 2, 4, 0, 6, 8]"],"[10, 10, 0]"],[["[0, 1, 5, 1, 7, 4, 7, 1, 7, 5, 3, 8, 7, 2, 5, 9, 8, 1, 7, 4, 6, 5, 9, 2, 5, 6, 0, 5, 8, 0]"],"[0, 10, 10, 10, 0, 10]"],[["[7, 0, 4, 8, 9, 1, 6, 1, 7, 9, 6, 1, 3, 4, 9, 1, 7, 6, 0, 1, 5, 0, 9, 2, 6, 2, 0, 1, 6, 3]"],"[0, 10, 10, 10, 0, 0]"],[["[7, 7, 1, 7, 4, 7, 9, 7, 4, 2, 0, 9, 6, 6, 9, 4, 5, 8, 6, 7, 0, 6, 8, 2, 3, 6, 5, 4, 8, 1]"],"[0, 9, 0, 9, 0]"],[["[1, 1, 2, 4, 9, 1, 7, 4, 6, 0, 2, 2, 6, 4, 9, 6, 3, 5, 2, 9, 3, 2, 8, 8, 6, 8, 8, 5, 7, 9]"],"[0, 0, 9]"],[["[6, 3, 2, 0, 2, 3, 1, 1, 7, 6, 7, 5, 5, 4, 7, 9, 9, 3, 4, 7, 6, 0, 5, 4, 9, 3, 4, 3, 8, 0]"],"[9, 9, 0, 0, 0, 10]"],[["[5, 0, 7, 6, 4, 8, 2, 0, 8, 0, 7, 3, 4, 3, 6, 6, 9, 4, 4, 4, 3, 0, 4, 9, 9, 7, 1, 6, 2, 3]"],"[0, 0, 10, 10, 0, 10, 10]"],[["[7, 0, 0, 5, 7, 3, 2, 9, 0, 3, 2, 7, 0, 1, 3, 3, 6, 0, 4, 9, 1, 0, 7, 7, 1, 4, 6, 5, 2, 5]"],"[0, 0, 10, 0, 0, 10, 10]"]],"type":"(list -> list)","name":"042","solution":"(letII (inc (- randnat randnat)) (λk -> (map (λstate -> (letII (- randnat randnat) (λx -> (case (- 3 randnat) of O => (case randnat of O => randnat | S => (λn -> 0)) | S => (λn -> (+ 9 state#3)))))) (scanl (λacc x -> (case x#1 of O => k#3 | S => (λn -> acc#3))) 0 (take (letII k#1 (λx -> (- 7 randnat))) #2)))))","num_train":4},{"ios":[[["[4, 2, 8, 8, 3, 3, 7, 8, 2, 8, 7, 4, 8, 1, 0, 8, 3, 7, 5, 7, 4, 9, 2, 1, 1, 0, 1, 4, 6, 0]"],"[14, 9, 8, 8, 13, 10, 8, 20]"],[["[3, 8, 9, 0, 2, 0, 3, 9, 0, 1, 0, 0, 9, 2, 8, 1, 2, 8, 3, 2, 4, 6, 5, 6, 7, 9, 5, 8, 9, 1]"],"[8, 16, 8, 8, 9, 4, 4, 9]"],[["[2, 2, 0, 7, 0, 4, 1, 1, 0, 0, 8, 8, 7, 0, 2, 2, 3, 5, 9, 0, 2, 1, 1, 3, 2, 9, 8, 9, 8, 0]"],"[33, 15, 17, 9, 9, 8, 18, 10]"],[["[8, 7, 8, 8, 9, 3, 1, 6, 2, 3, 2, 2, 1, 6, 9, 3, 8, 8, 7, 5, 3, 0, 9, 1, 3, 4, 7, 1, 0, 4]"],"[8, 11, 8, 9, 10, 4, 9, 14]"],[["[5, 0, 5, 8, 4, 0, 2, 3, 1, 1, 1, 1, 8, 4, 7, 2, 1, 1, 6, 4, 5, 2, 2, 7, 7, 9, 1, 8, 2, 4]"],"[6, 12, 8, 13, 11, 20, 9, 9, 6]"],[["[7, 8, 8, 2, 2, 9, 0, 0, 4, 0, 2, 3, 4, 7, 9, 0, 1, 4, 8, 1, 9, 1, 9, 4, 8, 4, 6, 4, 2, 1]"],"[18, 8, 17, 9, 8, 21, 13, 15]"],[["[6, 1, 3, 4, 6, 8, 0, 2, 8, 7, 0, 9, 3, 3, 1, 8, 6, 6, 2, 7, 6, 4, 5, 7, 9, 6, 2, 3, 1, 4]"],"[12, 3, 9, 10, 11, 19, 9, 10]"],[["[8, 5, 6, 0, 3, 3, 6, 3, 5, 9, 8, 2, 5, 0, 5, 5, 2, 1, 5, 2, 7, 1, 1, 2, 0, 2, 9, 9, 8, 3]"],"[20, 19, 19, 1, 17, 6, 8, 8, 8]"]],"type":"(list -> list)","name":"043","solution":"(letII (letII randnat (λx -> (inc randnat))) (λk -> (map (λstate -> (letII (letII randnat (λx -> (+ (+ randnat state#2) randnat))) (λx -> (+ (letII randnat (λx -> (inc randnat))) (letII k#3 (λx -> (case (flip 0.8) of True => 7 | False => randnat))))))) (scanl (λacc x -> (inc acc#2)) 0 (take (letII randnat (λx -> (case randnat of O => x#1 | S => (λn -> 8)))) #2)))))","num_train":4},{"ios":[[["[9, 5, 5, 2, 5, 8, 5, 8, 1, 3, 8, 9, 5, 0, 0, 6, 2, 4, 3, 6, 5, 9, 5, 8, 2, 4, 9, 5, 8, 3]"],"[1, 1, 1, 10, 0, 0]"],[["[0, 7, 4, 1, 5, 1, 6, 2, 7, 0, 2, 6, 1, 9, 9, 9, 8, 0, 8, 4, 9, 6, 6, 5, 6, 8, 9, 3, 1, 4]"],"[6, 0, 1, 0, 2, 0]"],[["[9, 8, 5, 6, 6, 7, 2, 0, 5, 8, 5, 9, 3, 1, 6, 7, 7, 6, 0, 9, 5, 0, 6, 6, 8, 2, 2, 5, 0, 2]"],"[5, 4, 4, 1, 8, 1]"],[["[0, 1, 8, 4, 1, 2, 6, 2, 8, 2, 3, 9, 8, 3, 7, 1, 9, 6, 1, 4, 3, 4, 6, 9, 0, 0, 2, 4, 1, 2]"],"[0, 0, 0, 0, 1, 0]"],[["[6, 6, 3, 3, 7, 3, 2, 7, 7, 0, 6, 3, 0, 5, 9, 3, 8, 4, 7, 1, 7, 2, 2, 7, 1, 5, 9, 4, 2, 8]"],"[2, 11, 0, 7, 0, 0]"],[["[6, 1, 6, 3, 1, 5, 0, 8, 0, 4, 6, 9, 5, 1, 0, 2, 2, 4, 0, 9, 5, 6, 3, 0, 6, 2, 9, 8, 8, 0]"],"[3, 16, 2, 8, 0, 15]"],[["[7, 8, 4, 8, 9, 3, 6, 5, 1, 6, 6, 2, 2, 6, 0, 8, 2, 4, 2, 8, 3, 6, 4, 2, 6, 7, 1, 5, 5, 7]"],"[6, 8, 11, 0, 0, 0]"],[["[3, 2, 9, 6, 2, 3, 4, 9, 4, 4, 7, 6, 1, 2, 1, 1, 9, 2, 6, 3, 6, 6, 4, 0, 6, 7, 8, 4, 8, 9]"],"[5, 0, 0, 6, 0, 0]"]],"type":"(list -> list)","name":"044","solution":"(letII (letII 3 (λx -> (case (== x#1 0) of True => 1 | False => (+ x#1 x#1)))) (λk -> (map (λstate -> (letII randnat (λx -> (- randnat state#2)))) (scanl (λacc x -> (inc acc#2)) 0 (take (- (letII randnat (λx -> (case (flip 0.1) of True => k#2 | False => k#2))) (- k#1 (letII randnat (λx -> (+ k#2 randnat))))) #2)))))","num_train":4},{"ios":[[["[8, 1, 5, 5, 5, 5, 8, 8, 9, 4, 1, 7, 0, 0, 7, 7, 1, 6, 5, 9, 4, 3, 9, 2, 4, 3, 4, 6, 1, 5]"],"[18, 6, 14, 7, 2, 20, 3, 3, 0, 13, 18, 8, 13]"],[["[3, 2, 5, 2, 5, 0, 7, 9, 4, 0, 5, 5, 6, 8, 3, 4, 6, 6, 1, 7, 6, 0, 8, 0, 5, 5, 8, 5, 7, 2]"],"[3, 5, 5, 3, 5, 2, 12, 9, 1, 5, 2]"],[["[6, 5, 3, 6, 6, 2, 8, 1, 6, 7, 9, 7, 1, 5, 4, 2, 9, 1, 3, 1, 2, 4, 6, 1, 9, 9, 7, 1, 7, 0]"],"[16, 3, 4, 3, 3, 8, 0, 10, 9, 10]"],[["[6, 6, 2, 9, 5, 0, 1, 5, 4, 8, 1, 5, 7, 0, 8, 1, 6, 2, 3, 7, 7, 4, 8, 3, 0, 3, 7, 1, 1, 1]"],"[7, 9, 5, 9, 0, 7, 0]"],[["[6, 5, 0, 0, 4, 4, 3, 6, 8, 5, 0, 3, 3, 2, 7, 2, 4, 4, 5, 0, 2, 7, 4, 6, 8, 1, 1, 3, 0, 5]"],"[4, 22, 0, 6, 9, 9, 3, 11]"],[["[2, 8, 6, 7, 1, 3, 3, 7, 3, 1, 0, 0, 0, 2, 7, 6, 6, 7, 2, 0, 8, 6, 1, 2, 5, 0, 1, 1, 0, 6]"],"[22, 0, 1, 14, 8, 6, 1, 3, 16]"],[["[2, 3, 4, 4, 8, 4, 7, 1, 9, 7, 4, 7, 8, 2, 9, 0, 4, 5, 7, 0, 4, 4, 4, 8, 8, 2, 7, 0, 4, 1]"],"[12, 6]"],[["[6, 5, 1, 3, 8, 5, 0, 9, 1, 0, 6, 7, 2, 8, 7, 2, 1, 4, 3, 0, 0, 2, 3, 3, 6, 0, 5, 6, 5, 2]"],"[5, 11, 7, 14, 19, 10, 15, 3, 4, 5, 1, 7, 3, 3, 3, 2]"]],"type":"(list -> list)","name":"045","solution":"(letII (+ randnat 6) (λk -> (map (λstate -> (+ randnat state#1)) (scanl (λacc x -> (- (inc randnat) acc#2)) 0 (take (letII randnat (λx -> (case (flip 0.2) of True => x#1 | False => k#2))) #2)))))","num_train":4},{"ios":[[["[9, 5, 8, 2, 2, 1, 1, 6, 8, 3, 0, 2, 5, 7, 7, 9, 7, 5, 7, 0, 4, 8, 1, 3, 6, 9, 8, 4, 4, 0]"],"[1, 1, 1, 3, 1, 8, 0, 6]"],[["[0, 3, 6, 3, 0, 6, 2, 2, 1, 3, 3, 4, 2, 8, 7, 2, 8, 1, 7, 4, 3, 1, 2, 5, 2, 1, 6, 0, 6, 7]"],"[13, 17, 14, 1, 8, 15, 4, 0, 3, 0, 1, 2, 10, 16, 2, 1, 13, 5, 0, 4, 8, 0]"],[["[9, 5, 6, 3, 5, 4, 6, 4, 7, 8, 9, 2, 5, 7, 8, 0, 5, 9, 1, 8, 5, 5, 0, 6, 7, 2, 8, 7, 2, 1]"],"[4, 1]"],[["[3, 0, 4, 8, 9, 8, 1, 0, 6, 8, 8, 0, 9, 4, 5, 6, 4, 6, 3, 0, 4, 7, 9, 3, 6, 9, 8, 7, 9, 4]"],"[4, 21, 10, 3, 8]"],[["[2, 7, 9, 3, 3, 3, 6, 2, 9, 0, 2, 0, 5, 4, 9, 1, 1, 1, 9, 3, 4, 6, 2, 8, 8, 6, 0, 6, 4, 6]"],"[7, 7, 4]"],[["[9, 2, 6, 1, 2, 5, 8, 4, 5, 2, 1, 9, 7, 9, 9, 3, 4, 8, 5, 4, 9, 1, 5, 1, 9, 8, 0, 8, 7, 8]"],"[0, 0, 1, 8, 1]"],[["[8, 4, 5, 9, 5, 0, 6, 5, 7, 0, 5, 1, 0, 6, 5, 6, 4, 7, 7, 2, 8, 7, 6, 8, 1, 9, 5, 3, 0, 9]"],"[3, 4, 5, 1, 2]"],[["[4, 3, 5, 2, 9, 2, 4, 8, 8, 8, 4, 5, 3, 1, 7, 7, 8, 6, 2, 8, 1, 5, 8, 3, 2, 0, 9, 7, 0, 8]"],"[2, 0, 7, 6, 19]"]],"type":"(list -> list)","name":"046","solution":"(letII (- (case randnat of O => randnat | S => (λn -> randnat)) (letII 6 (λx -> (- x#1 randnat)))) (λk -> (map (λstate -> (case randnat of O => state#1 | S => (λn -> randnat))) (scanl (λacc x -> (+ (case x#1 of O => x#1 | S => (λn -> randnat)) (case randnat of O => acc#2 | S => (λn -> randnat)))) 0 (take (inc (letII k#1 (λx -> (inc randnat)))) #2)))))","num_train":4},{"ios":[[["[8, 6, 0, 2, 2, 2, 2, 8, 0, 8, 4, 1, 3, 0, 3, 8, 8, 4, 9, 6, 6, 7, 4, 5, 3, 7, 4, 8, 3, 4]"],"[12, 1, 8, 4, 32, 4, 7]"],[["[1, 7, 8, 9, 5, 2, 4, 5, 4, 8, 7, 5, 3, 5, 6, 6, 4, 6, 1, 8, 2, 1, 4, 2, 2, 5, 4, 8, 1, 9]"],"[4, 3, 5, 2, 1, 3, 2, 9, 3, 1, 2]"],[["[5, 8, 6, 7, 7, 6, 3, 5, 4, 5, 5, 9, 3, 2, 4, 2, 6, 2, 4, 1, 6, 4, 5, 1, 2, 2, 8, 5, 1, 7]"],"[27, 3, 3, 8, 1, 1, 6, 5]"],[["[5, 9, 8, 6, 0, 6, 9, 9, 8, 6, 0, 5, 5, 9, 3, 5, 5, 6, 0, 2, 8, 1, 8, 5, 6, 2, 3, 6, 5, 0]"],"[2, 22, 2]"],[["[9, 3, 2, 7, 4, 4, 1, 7, 8, 0, 4, 0, 4, 7, 7, 2, 1, 9, 3, 6, 5, 5, 0, 3, 6, 7, 5, 0, 2, 9]"],"[2, 1, 8]"],[["[3, 0, 1, 6, 0, 6, 5, 6, 5, 7, 5, 5, 4, 9, 0, 5, 2, 0, 6, 7, 1, 9, 1, 3, 3, 1, 4, 9, 0, 8]"],"[5, 2, 3]"],[["[4, 6, 1, 3, 1, 6, 8, 9, 0, 5, 2, 8, 3, 5, 6, 5, 2, 0, 6, 3, 9, 1, 4, 7, 7, 7, 0, 7, 7, 7]"],"[5, 2, 2]"],[["[6, 2, 0, 3, 4, 9, 6, 4, 1, 4, 1, 5, 5, 3, 1, 3, 1, 1, 0, 5, 4, 4, 7, 8, 4, 4, 5, 8, 5, 7]"],"[1, 2, 5, 6, 6, 1, 3, 5, 7, 1, 13, 5, 6, 2, 2, 23, 3]"]],"type":"(list -> list)","name":"047","solution":"(letII (+ (case randnat of O => randnat | S => (λn -> n#1)) (case (iseven randnat) of True => randnat | False => randnat)) (λk -> (map (λstate -> (letII (+ state#1 state#1) (λx -> (inc randnat)))) (scanl (λacc x -> (letII acc#2 (λx -> (inc x#2)))) 0 (take k#1 #2)))))","num_train":4},{"ios":[[["[1, 0, 9, 4, 2, 7, 7, 4, 5, 4, 4, 8, 3, 6, 7, 4, 2, 4, 9, 8, 8, 3, 1, 4, 4, 1, 5, 6, 8, 3]"],"[0, 8, 4, 2, 4, 20, 10, 8, 18]"],[["[3, 4, 1, 1, 8, 0, 6, 6, 3, 6, 9, 3, 4, 3, 5, 7, 0, 4, 0, 0, 2, 9, 3, 9, 6, 4, 8, 0, 9, 8]"],"[14, 8, 12, 18, 16, 48, 12, 12, 0]"],[["[5, 8, 2, 9, 6, 8, 1, 7, 2, 6, 5, 2, 4, 2, 0, 4, 8, 4, 3, 0, 4, 8, 7, 8, 2, 4, 2, 3, 5, 5]"],"[2, 16, 0, 4, 8, 2, 2, 14, 4]"],[["[3, 0, 7, 9, 5, 6, 3, 2, 8, 9, 1, 4, 2, 9, 0, 3, 5, 3, 7, 9, 2, 0, 5, 6, 0, 0, 9, 3, 0, 8]"],"[4, 6, 14, 18, 10, 12, 8, 20, 2]"],[["[2, 6, 3, 8, 7, 4, 2, 1, 9, 0, 1, 6, 6, 9, 0, 2, 4, 9, 0, 5, 5, 6, 5, 8, 0, 3, 5, 8, 4, 4]"],"[0, 6, 6, 16, 36, 14, 4, 2, 18]"],[["[1, 1, 2, 9, 4, 0, 1, 4, 0, 4, 9, 0, 8, 5, 8, 3, 1, 4, 8, 6, 7, 6, 2, 8, 3, 1, 1, 5, 0, 7]"],"[2, 2, 4, 6, 8, 18, 2, 8, 22]"],[["[1, 5, 5, 9, 2, 6, 4, 6, 7, 0, 7, 2, 1, 1, 9, 5, 4, 7, 9, 9, 0, 7, 9, 4, 6, 4, 0, 0, 8, 3]"],"[2, 10, 10, 18, 4, 4, 6, 12, 8]"],[["[2, 8, 1, 7, 5, 8, 6, 7, 0, 6, 3, 0, 6, 1, 9, 4, 4, 8, 4, 7, 4, 9, 5, 0, 0, 4, 0, 1, 7, 0]"],"[0, 12, 12, 12, 4, 4, 6, 14, 0]"]],"type":"(list -> list)","name":"048","solution":"(letII 0 (λk -> (map (λstate -> (+ state#1 state#1)) (scanl (λacc x -> (letII x#1 (λx -> (+ (letII randnat (λx -> (case (iseven acc#4) of True => randnat | False => x#2))) k#4)))) 0 (take 9 #2)))))","num_train":4},{"ios":[[["[4, 7, 4, 2, 8, 8, 5, 4, 0, 6, 1, 0, 1, 6, 1, 7, 7, 8, 8, 6, 0, 7, 8, 4, 1, 4, 6, 1, 2, 6]"],"[0, 13]"],[["[4, 0, 0, 7, 1, 4, 0, 8, 5, 6, 9, 9, 6, 3, 5, 2, 9, 8, 4, 1, 7, 9, 5, 6, 2, 9, 2, 8, 5, 8]"],"[0, 1, 6, 9]"],[["[6, 5, 7, 2, 7, 0, 1, 6, 5, 9, 9, 4, 9, 8, 9, 0, 1, 8, 9, 6, 8, 9, 4, 4, 5, 7, 2, 4, 7, 8]"],"[0, 4, 7, 0, 6, 7, 3, 5]"],[["[4, 2, 6, 0, 7, 9, 5, 9, 0, 1, 0, 9, 7, 5, 6, 1, 4, 3, 3, 5, 4, 0, 8, 0, 6, 3, 7, 4, 6, 0]"],"[2, 2, 0, 2, 1, 2, 0, 13, 4, 0, 0]"],[["[8, 6, 0, 0, 8, 7, 8, 5, 4, 3, 2, 5, 3, 9, 4, 0, 6, 7, 5, 4, 5, 7, 6, 5, 5, 9, 3, 7, 9, 4]"],"[1, 0, 6, 6, 0]"],[["[3, 0, 2, 8, 4, 0, 5, 8, 4, 7, 9, 7, 1, 4, 5, 1, 0, 1, 5, 8, 3, 1, 5, 8, 1, 2, 0, 1, 1, 8]"],"[1, 3, 0, 3]"],[["[4, 0, 7, 0, 1, 0, 3, 5, 0, 7, 9, 5, 3, 8, 0, 4, 2, 4, 8, 3, 8, 9, 3, 7, 7, 7, 6, 1, 1, 1]"],"[2, 1]"],[["[0, 7, 7, 7, 2, 9, 5, 4, 3, 9, 7, 3, 7, 4, 0, 8, 0, 2, 8, 0, 9, 5, 0, 6, 8, 6, 0, 1, 9, 8]"],"[0, 1, 0, 5, 1, 1]"]],"type":"(list -> list)","name":"049","solution":"(letII (inc (case randnat of O => randnat | S => (λn -> n#1))) (λk -> (map (λstate -> (letII randnat (λx -> (case state#2 of O => randnat | S => (λn -> randnat))))) (scanl (λacc x -> (letII acc#2 (λx -> (case k#4 of O => (- randnat acc#3) | S => (λn -> (letII x#3 (λx -> (+ 3 randnat)))))))) 0 (take (letII k#1 (λx -> (case x#1 of O => randnat | S => (λn -> n#1)))) #2)))))","num_train":4},{"ios":[[["[8, 6, 7, 7, 3, 0, 5, 7, 5, 0, 4, 6, 1, 7, 8, 3, 9, 2, 1, 0, 0, 9, 8, 5, 1, 8, 7, 5, 1, 7]"],"[4, 8, 12, 16]"],[["[4, 5, 3, 3, 5, 3, 7, 8, 4, 5, 4, 3, 4, 7, 0, 9, 4, 2, 1, 9, 7, 9, 6, 1, 6, 0, 5, 4, 6, 0]"],"[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108]"],[["[7, 9, 3, 5, 8, 1, 8, 5, 6, 0, 4, 2, 9, 5, 6, 1, 9, 1, 3, 7, 1, 9, 0, 3, 6, 7, 9, 5, 1, 9]"],"[4, 8, 12, 16, 20, 24, 28, 32, 36]"],[["[9, 1, 9, 3, 7, 3, 6, 3, 4, 9, 2, 4, 6, 3, 7, 8, 6, 1, 1, 1, 4, 5, 2, 7, 3, 7, 1, 4, 5, 0]"],"[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44]"],[["[8, 3, 4, 0, 4, 4, 4, 4, 2, 1, 3, 0, 7, 0, 4, 7, 5, 3, 8, 6, 8, 1, 1, 3, 4, 1, 5, 4, 1, 2]"],"[4, 8, 12, 16]"],[["[8, 9, 5, 8, 4, 2, 2, 2, 5, 2, 6, 6, 3, 8, 1, 0, 6, 9, 5, 4, 6, 3, 2, 1, 8, 3, 2, 4, 7, 7]"],"[4, 8, 12, 16]"],[["[3, 1, 7, 7, 8, 0, 4, 9, 0, 0, 3, 4, 1, 5, 3, 8, 9, 2, 9, 2, 1, 4, 7, 9, 8, 3, 3, 4, 8, 9]"],"[4, 8]"],[["[2, 3, 4, 6, 8, 2, 5, 9, 9, 2, 5, 0, 5, 4, 0, 1, 7, 6, 0, 9, 9, 7, 9, 1, 1, 8, 4, 4, 7, 3]"],"[4, 8, 12, 16, 20, 24, 28, 32, 36, 40]"]],"type":"(list -> list)","name":"050","solution":"(letII (+ 1 (+ randnat 3)) (λk -> (map (λstate -> state#1) (scanl (λacc x -> (letII (letII randnat (λx -> (inc x#2))) (λx -> (+ 4 acc#3)))) 0 (take (letII 3 (λx -> (case (flip 0.6) of True => k#2 | False => randnat))) #2)))))","num_train":4},{"ios":[[["[1, 1, 2, 5, 5, 4, 3, 1, 1, 2, 3, 5, 0, 2, 2, 6, 5, 9, 8, 0, 1, 3, 4, 4, 8, 8, 9, 8, 3, 6]"],"[19, 7, 10, 9, 5, 15, 8]"],[["[5, 6, 4, 5, 1, 6, 0, 7, 5, 8, 7, 4, 0, 4, 0, 8, 9, 3, 8, 9, 8, 0, 9, 4, 8, 7, 5, 5, 4, 0]"],"[5, 6, 6, 16, 6, 6, 9, 6, 22, 9, 6, 8, 5, 5, 16, 12, 24, 16, 17, 7, 5, 5, 7, 9, 7, 14, 6]"],[["[3, 5, 6, 3, 7, 3, 2, 8, 3, 5, 6, 0, 1, 0, 8, 7, 5, 7, 1, 1, 1, 5, 9, 1, 4, 4, 6, 2, 8, 0]"],"[9, 6, 5, 10, 13]"],[["[9, 9, 2, 0, 0, 5, 9, 5, 5, 9, 4, 6, 9, 0, 1, 7, 7, 5, 4, 0, 3, 6, 4, 0, 6, 8, 6, 3, 0, 4]"],"[8, 9, 6, 8, 14, 10, 5, 10, 10, 12, 8]"],[["[9, 4, 4, 2, 2, 0, 1, 6, 7, 9, 5, 8, 1, 2, 7, 3, 7, 1, 3, 7, 1, 8, 4, 6, 4, 2, 9, 9, 6, 2]"],"[14, 11, 10, 10, 7, 8, 12, 7, 10, 14, 7, 5, 7, 6, 5, 17, 9, 6, 7]"],[["[6, 0, 9, 6, 4, 9, 1, 9, 5, 0, 6, 1, 0, 8, 3, 4, 2, 5, 2, 1, 0, 2, 9, 3, 9, 3, 1, 9, 5, 8]"],"[7, 6, 11, 9, 8, 5, 5, 5, 16, 5, 5, 5, 5, 5, 7, 16, 14, 10, 14, 5, 5, 12, 5]"],[["[1, 6, 1, 3, 3, 6, 0, 8, 1, 5, 7, 8, 9, 8, 1, 5, 5, 7, 4, 0, 8, 7, 2, 6, 5, 9, 8, 6, 9, 6]"],"[6, 6, 5, 8, 8, 7, 15]"],[["[2, 9, 5, 1, 2, 4, 0, 3, 9, 6, 7, 4, 6, 7, 2, 5, 3, 7, 7, 3, 1, 2, 4, 1, 2, 2, 0, 3, 0, 0]"],"[9, 8, 5, 10, 5, 6, 10, 8, 20, 8, 12, 6, 5, 12, 13]"]],"type":"(list -> list)","name":"051","solution":"(letII (letII (case 9 of O => randnat | S => (λn -> n#1)) (λx -> (inc randnat))) (λk -> (map (λstate -> (letII randnat (λx -> (+ state#2 5)))) (scanl (λacc x -> (case (== (case (case (flip 0.3) of True => acc#2 | False => k#3) of O => randnat | S => (λn -> k#4)) x#1) of True => x#1 | False => randnat)) 0 (take (+ (inc k#1) k#1) #2)))))","num_train":4},{"ios":[[["[1, 8, 4, 0, 4, 3, 1, 7, 1, 4, 7, 3, 8, 4, 9, 7, 1, 3, 6, 0, 9, 5, 0, 7, 3, 4, 1, 3, 2, 3]"],"[3, 0, 7]"],[["[5, 6, 1, 8, 9, 8, 0, 4, 7, 4, 7, 4, 1, 5, 7, 9, 0, 6, 6, 0, 9, 3, 1, 9, 9, 6, 8, 2, 5, 2]"],"[0, 7, 0]"],[["[6, 3, 2, 2, 5, 2, 3, 9, 4, 6, 2, 2, 0, 8, 5, 9, 7, 6, 8, 3, 2, 7, 5, 4, 8, 2, 7, 7, 2, 9]"],"[6, 6, 2, 0, 6, 0, 6, 0, 2, 6, 6, 9, 8, 3, 2, 6, 6]"],[["[6, 3, 6, 1, 3, 8, 6, 6, 4, 3, 5, 3, 1, 6, 4, 8, 7, 7, 6, 3, 2, 7, 3, 8, 5, 6, 9, 2, 0, 6]"],"[6, 10, 3]"],[["[4, 5, 1, 6, 1, 9, 0, 4, 1, 8, 9, 9, 1, 6, 7, 6, 0, 4, 0, 6, 5, 5, 6, 0, 6, 3, 0, 8, 4, 6]"],"[7, 7, 0]"],[["[5, 3, 7, 3, 3, 3, 9, 3, 7, 7, 9, 1, 9, 1, 9, 4, 3, 1, 0, 6, 9, 4, 5, 9, 2, 3, 5, 3, 7, 8]"],"[5, 0, 6]"],[["[4, 4, 4, 3, 4, 8, 3, 6, 4, 9, 1, 5, 1, 6, 8, 0, 3, 2, 5, 4, 0, 4, 3, 2, 5, 7, 8, 4, 4, 0]"],"[6, 6, 1]"],[["[1, 6, 1, 5, 8, 4, 3, 6, 5, 8, 4, 4, 2, 3, 1, 4, 7, 5, 9, 1, 3, 3, 8, 8, 1, 6, 1, 7, 8, 4]"],"[6, 6, 0]"]],"type":"(list -> list)","name":"052","solution":"(letII (letII 6 (λx -> (case randnat of O => 7 | S => (λn -> x#2)))) (λk -> (map (λstate -> (case (> randnat (case randnat of O => randnat | S => (λn -> randnat))) of True => randnat | False => (case (flip 0.3) of True => state#1 | False => k#2))) (scanl (λacc x -> acc#2) 0 (take (case (letII k#1 (λx -> (inc randnat))) of O => k#1 | S => (λn -> (case randnat of O => n#1 | S => (λn -> 3)))) #2)))))","num_train":4},{"ios":[[["[6, 5, 5, 6, 9, 6, 4, 2, 2, 1, 9, 8, 9, 5, 0, 4, 0, 0, 3, 4, 0, 2, 6, 6, 0, 4, 7, 3, 0, 3]"],"[3, 3, 0, 4, 2, 0, 2, 14, 4, 3, 3, 4, 1, 2]"],[["[3, 0, 5, 7, 2, 6, 1, 5, 5, 5, 3, 6, 9, 4, 3, 7, 4, 9, 7, 0, 2, 9, 0, 0, 9, 3, 3, 5, 0, 2]"],"[13, 1, 3, 7, 0, 2, 2, 9, 5, 5, 4, 3, 9, 1, 5, 0, 0, 2, 1, 0, 17]"],[["[4, 2, 4, 8, 5, 9, 2, 9, 5, 3, 6, 6, 4, 3, 0, 4, 9, 8, 0, 6, 7, 3, 9, 0, 7, 8, 1, 3, 5, 7]"],"[2, 10]"],[["[9, 8, 1, 6, 2, 3, 3, 3, 8, 5, 9, 8, 5, 7, 5, 8, 9, 5, 0, 6, 6, 6, 8, 2, 3, 9, 2, 9, 2, 0]"],"[5, 0, 0, 1, 0]"],[["[9, 2, 3, 1, 5, 3, 9, 0, 2, 1, 6, 9, 4, 5, 5, 6, 8, 3, 8, 8, 5, 0, 6, 8, 1, 4, 4, 0, 9, 6]"],"[4, 16, 6, 0, 7, 0, 2]"],[["[3, 0, 0, 2, 7, 7, 9, 9, 1, 5, 0, 2, 2, 0, 4, 2, 4, 4, 1, 9, 4, 6, 3, 2, 5, 6, 5, 0, 2, 5]"],"[1, 12]"],[["[5, 6, 7, 4, 4, 4, 8, 5, 3, 3, 7, 7, 5, 2, 1, 6, 6, 3, 6, 2, 6, 7, 7, 8, 3, 8, 7, 8, 7, 7]"],"[3, 4]"],[["[2, 6, 7, 1, 2, 6, 0, 7, 3, 0, 5, 3, 3, 8, 6, 9, 8, 2, 5, 6, 4, 3, 1, 2, 4, 5, 9, 3, 5, 9]"],"[6, 2, 0, 0, 7, 8]"]],"type":"(list -> list)","name":"053","solution":"(letII (+ 4 (inc (letII randnat (λx -> (case (flip 0.1) of True => 9 | False => randnat))))) (λk -> (map (λstate -> (case (flip 0.8) of True => randnat | False => state#1)) (scanl (λacc x -> (letII (letII x#1 (λx -> (+ randnat acc#3))) (λx -> (case (flip 0.4) of True => x#1 | False => randnat)))) 0 (take (letII (letII k#1 (λx -> (case (flip 0.2) of True => randnat | False => randnat))) (λx -> (inc (inc randnat)))) #2)))))","num_train":4},{"ios":[[["[5, 6, 0, 4, 1, 5, 5, 6, 1, 1, 0, 9, 2, 0, 8, 7, 8, 7, 9, 8, 1, 1, 7, 5, 9, 0, 5, 0, 1, 3]"],"[2, 7, 26, 0, 7, 4, 14, 18, 0, 0]"],[["[6, 6, 6, 4, 8, 8, 3, 6, 9, 3, 2, 8, 9, 4, 5, 8, 7, 1, 7, 6, 3, 9, 6, 5, 2, 2, 9, 9, 8, 5]"],"[2, 4, 1, 2, 19, 0, 24, 37, 43, 47, 0]"],[["[7, 2, 9, 2, 5, 6, 7, 2, 3, 6, 8, 9, 0, 9, 4, 6, 5, 3, 2, 6, 4, 7, 3, 0, 9, 2, 9, 4, 8, 9]"],"[0, 3, 0, 6, 24, 2, 1, 6, 2, 65]"],[["[9, 2, 7, 1, 9, 4, 7, 6, 7, 7, 2, 9, 8, 1, 9, 7, 7, 8, 5, 5, 3, 6, 5, 6, 8, 7, 2, 5, 0, 5]"],"[6, 10, 5, 24, 2, 7, 6, 42, 43, 0, 2, 14, 7]"],[["[0, 2, 0, 2, 4, 9, 8, 6, 6, 4, 9, 5, 0, 0, 8, 2, 7, 8, 2, 4, 8, 6, 8, 9, 7, 7, 3, 8, 0, 7]"],"[3, 5, 15, 1, 20, 1, 2, 1, 4, 6, 0, 2, 7, 2, 48, 57, 0, 8, 3, 71, 3, 7, 81]"],[["[4, 8, 5, 0, 0, 0, 3, 3, 0, 8, 0, 1, 9, 1, 6, 4, 7, 6, 0, 3, 2, 2, 6, 9, 6, 0, 1, 8, 6, 9]"],"[0, 1, 0, 5, 2, 0, 0, 23, 2, 17]"],[["[9, 7, 1, 6, 3, 8, 5, 4, 4, 3, 2, 6, 7, 1, 8, 2, 6, 7, 5, 6, 5, 8, 8, 4, 6, 9, 6, 1, 1, 9]"],"[4, 5, 3, 7, 11, 2, 1, 12, 13, 6, 3, 7]"],[["[5, 2, 4, 8, 3, 0, 2, 3, 9, 7, 3, 1, 2, 9, 7, 9, 8, 1, 7, 0, 0, 1, 7, 5, 2, 4, 4, 6, 6, 1]"],"[6, 0, 1, 12, 2, 18, 2, 7, 5, 2]"]],"type":"(list -> list)","name":"054","solution":"(letII (- (letII randnat (λx -> (- randnat randnat))) 3) (λk -> (map (λstate -> (case (flip 0.3) of True => state#1 | False => randnat)) (scanl (λacc x -> (+ (case (flip 0.6) of True => randnat | False => randnat) (letII acc#2 (λx -> (+ k#4 x#1))))) 0 (take (+ randnat 9) #2)))))","num_train":4},{"ios":[[["[4, 1, 2, 3, 3, 8, 9, 5, 8, 0, 8, 2, 2, 3, 1, 7, 9, 8, 6, 2, 2, 7, 5, 3, 1, 1, 4, 5, 5, 5]"],"[7, 5, 4, 24, 7, 16, 17, 1, 22, 25]"],[["[3, 0, 7, 0, 4, 2, 3, 3, 0, 3, 5, 3, 4, 6, 6, 5, 3, 6, 2, 5, 8, 5, 3, 0, 0, 6, 1, 1, 1, 1]"],"[1, 4, 12, 7, 9, 10, 14, 8, 13, 11]"],[["[3, 8, 0, 3, 8, 9, 3, 8, 0, 9, 3, 8, 8, 4, 9, 5, 7, 3, 0, 5, 6, 2, 0, 9, 1, 1, 8, 6, 6, 9]"],"[7, 10, 33, 18, 20, 10, 47, 0, 7, 11]"],[["[5, 9, 9, 8, 7, 4, 4, 7, 3, 8, 2, 7, 5, 7, 8, 9, 3, 7, 3, 0, 4, 9, 3, 2, 4, 5, 9, 5, 8, 1]"],"[7, 15, 15, 13, 14, 14, 16, 16, 18, 0]"],[["[1, 1, 0, 2, 7, 5, 3, 7, 2, 9, 6, 3, 1, 8, 4, 7, 3, 9, 3, 0, 2, 6, 8, 7, 0, 6, 4, 0, 7, 2]"],"[16, 3, 7, 4, 5, 7, 11, 9, 12, 7]"],[["[6, 5, 8, 4, 8, 5, 4, 4, 1, 6, 2, 4, 8, 3, 0, 2, 1, 5, 4, 3, 2, 3, 1, 5, 5, 3, 0, 4, 2, 6]"],"[1, 3, 7, 12, 4, 7, 7, 4, 11, 7]"],[["[8, 3, 2, 2, 6, 7, 5, 9, 3, 0, 8, 8, 5, 7, 8, 6, 8, 7, 1, 9, 5, 5, 2, 1, 1, 6, 4, 5, 6, 7]"],"[10, 13, 11, 14, 26, 14, 16, 4, 5, 8]"],[["[3, 6, 6, 1, 0, 0, 6, 4, 0, 8, 1, 8, 1, 6, 7, 6, 8, 0, 4, 8, 0, 5, 2, 2, 8, 5, 8, 6, 4, 4]"],"[9, 16, 4, 5, 7, 7, 19, 8, 15, 0]"]],"type":"(list -> list)","name":"055","solution":"(letII (letII 7 (λx -> (inc x#1))) (λk -> (map (λstate -> (+ (case (flip 0.1) of True => 1 | False => randnat) state#1)) (scanl (λacc x -> (case (> k#3 x#1) of True => (inc acc#2) | False => randnat)) 0 (take (inc (inc k#1)) #2)))))","num_train":4},{"ios":[[["[1, 0, 8, 9, 8, 6, 2, 9, 7, 6, 2, 9, 7, 8, 4, 6, 0, 9, 5, 4, 7, 1, 6, 0, 9, 2, 5, 4, 4, 1]"],"[33, 7, 5, 2, 1, 0, 0, 0, 8, 3, 4, 1, 2, 1, 12, 2, 4, 2, 2, 3, 8, 8, 0, 3, 2, 4, 0, 3, 10, 1]"],[["[7, 4, 0, 9, 9, 0, 3, 7, 3, 6, 0, 8, 2, 5, 2, 3, 3, 3, 7, 0, 3, 3, 7, 6, 2, 8, 6, 9, 3, 9]"],"[3, 0, 14, 5, 15, 0, 2, 4, 3, 2, 6, 2, 1, 4, 10, 8, 1, 1, 0, 1, 4, 7, 0, 0, 8, 4, 11, 0, 13]"],[["[7, 0, 5, 5, 2, 3, 9, 7, 6, 9, 3, 9, 6, 8, 3, 2, 4, 8, 2, 0, 8, 9, 6, 7, 4, 1, 9, 0, 4, 9]"],"[3, 1, 0, 2, 13, 5, 3, 1, 11, 3, 2, 0, 2, 3, 0]"],[["[5, 3, 7, 1, 5, 1, 2, 2, 5, 5, 8, 6, 3, 8, 4, 5, 2, 9, 0, 5, 6, 4, 3, 3, 1, 8, 8, 3, 9, 7]"],"[0, 3, 4, 1, 0, 0, 5, 3, 1, 2, 11, 0, 4, 6, 7]"],[["[1, 5, 2, 1, 5, 9, 9, 6, 1, 0, 4, 0, 3, 9, 6, 1, 8, 3, 3, 2, 4, 4, 6, 6, 0, 9, 8, 0, 6, 3]"],"[4, 3, 4, 1, 2, 0, 6, 2, 2, 5, 4, 14, 3, 0, 6, 1, 1, 0, 0, 6, 15, 0, 2, 4, 14, 14, 0, 1, 4, 1]"],[["[6, 9, 2, 2, 8, 4, 6, 5, 8, 2, 5, 6, 7, 0, 2, 4, 1, 8, 5, 6, 1, 0, 8, 6, 4, 4, 3, 1, 2, 3]"],"[1, 0, 2, 14, 2, 5, 0, 2, 5, 4, 16, 4, 1, 0, 8, 2, 1, 1, 0, 13, 3, 4, 1, 4, 9, 3, 0, 2, 0, 0]"],[["[2, 3, 6, 0, 0, 5, 4, 9, 6, 4, 4, 0, 8, 0, 9, 0, 5, 0, 4, 1, 9, 9, 2, 8, 3, 6, 3, 6, 4, 8]"],"[4, 0, 0, 5, 0, 13, 2, 4, 2, 1, 0, 1, 3, 5, 3, 5, 7, 4, 1, 6, 8]"],[["[1, 0, 4, 8, 5, 9, 1, 5, 2, 1, 5, 2, 5, 2, 3, 3, 6, 5, 4, 1, 5, 9, 0, 6, 6, 2, 9, 2, 0, 7]"],"[1, 1, 4, 13, 0, 4, 2, 2, 4]"]],"type":"(list -> list)","name":"056","solution":"(letII (letII (letII randnat (λx -> (inc x#1))) (λx -> (+ randnat x#1))) (λk -> (map (λstate -> (case 6 of O => state#1 | S => (λn -> randnat))) (scanl (λacc x -> (case (iseven acc#2) of True => randnat | False => (case x#1 of O => acc#2 | S => (λn -> n#1)))) 0 (take (+ (inc (case (flip 0.7) of True => k#1 | False => randnat)) k#1) #2)))))","num_train":4},{"ios":[[["[5, 1, 5, 9, 8, 6, 1, 0, 9, 9, 5, 7, 6, 1, 7, 6, 4, 3, 5, 8, 0, 4, 2, 6, 0, 6, 2, 5, 4, 3]"],"[17, 7, 4]"],[["[1, 7, 4, 2, 7, 5, 2, 0, 7, 8, 1, 4, 7, 8, 8, 1, 4, 6, 3, 8, 3, 2, 8, 0, 7, 4, 0, 1, 7, 0]"],"[4, 1, 10]"],[["[1, 4, 3, 1, 8, 1, 9, 6, 0, 5, 5, 4, 3, 3, 4, 8, 0, 5, 5, 3, 4, 4, 4, 3, 9, 8, 3, 1, 6, 0]"],"[4, 13, 4]"],[["[7, 3, 2, 0, 9, 7, 4, 7, 3, 6, 7, 7, 6, 9, 3, 4, 5, 4, 1, 2, 0, 1, 7, 0, 2, 4, 9, 3, 4, 6]"],"[2, 10, 4]"],[["[5, 3, 6, 8, 9, 0, 0, 0, 4, 6, 2, 8, 0, 3, 9, 0, 4, 1, 0, 6, 7, 8, 3, 9, 0, 6, 9, 6, 5, 3]"],"[3, 3, 12]"],[["[2, 3, 3, 1, 2, 3, 9, 7, 1, 0, 4, 3, 0, 7, 7, 9, 5, 2, 8, 8, 1, 0, 9, 2, 9, 5, 4, 7, 3, 0]"],"[1, 5, 3]"],[["[2, 7, 1, 9, 0, 5, 8, 9, 7, 2, 7, 9, 3, 3, 8, 2, 2, 3, 4, 7, 4, 2, 2, 8, 8, 5, 9, 2, 1, 5]"],"[6, 1, 9]"],[["[2, 2, 8, 9, 8, 4, 7, 5, 9, 5, 8, 8, 2, 8, 3, 2, 2, 6, 3, 6, 8, 7, 6, 4, 2, 6, 8, 8, 3, 7]"],"[12, 8, 5]"]],"type":"(list -> list)","name":"057","solution":"(letII (- 3 0) (λk -> (map (λstate -> (case (flip 0.5) of True => (case (> randnat state#1) of True => randnat | False => randnat) | False => (+ k#2 state#1))) (scanl (λacc x -> (case (flip 0.3) of True => (letII 5 (λx -> (+ k#4 x#2))) | False => (case x#1 of O => acc#2 | S => (λn -> randnat)))) 0 (take (letII randnat (λx -> (case k#2 of O => randnat | S => (λn -> k#3)))) #2)))))","num_train":4},{"ios":[[["[8, 7, 1, 0, 8, 8, 3, 6, 0, 3, 0, 1, 2, 5, 6, 0, 6, 2, 2, 3, 9, 6, 3, 5, 8, 9, 9, 7, 6, 9]"],"[1, 4, 1, 7, 2, 0]"],[["[6, 5, 8, 5, 0, 5, 1, 8, 2, 4, 7, 3, 1, 7, 9, 1, 9, 9, 2, 9, 1, 6, 6, 5, 7, 8, 4, 8, 0, 2]"],"[2, 6, 1, 0, 3, 8]"],[["[0, 2, 7, 7, 8, 6, 7, 2, 9, 9, 2, 4, 9, 2, 3, 2, 9, 2, 8, 4, 0, 9, 2, 8, 0, 0, 6, 8, 9, 8]"],"[1, 0, 1, 3, 0, 1]"],[["[7, 4, 1, 1, 0, 5, 8, 6, 9, 1, 4, 5, 0, 6, 2, 9, 2, 9, 4, 6, 7, 6, 1, 0, 9, 1, 4, 9, 2, 1]"],"[4, 2, 3]"],[["[8, 7, 0, 3, 2, 0, 7, 1, 2, 9, 6, 4, 1, 6, 5, 5, 0, 9, 6, 2, 3, 6, 9, 7, 8, 6, 9, 7, 9, 7]"],"[1, 13, 0, 0, 3, 0]"],[["[4, 3, 3, 8, 4, 9, 7, 1, 8, 0, 3, 0, 3, 2, 8, 6, 3, 5, 7, 6, 6, 1, 8, 6, 1, 8, 7, 4, 1, 1]"],"[5, 2, 3, 14, 8, 2]"],[["[3, 7, 8, 3, 4, 2, 5, 7, 4, 7, 7, 1, 2, 9, 4, 3, 0, 8, 7, 9, 9, 1, 8, 6, 9, 6, 1, 5, 7, 4]"],"[0, 1, 1, 0, 1, 6]"],[["[6, 9, 1, 0, 9, 7, 8, 6, 4, 1, 9, 3, 8, 6, 0, 1, 9, 4, 9, 0, 4, 8, 3, 6, 0, 3, 4, 9, 8, 3]"],"[6, 4, 5, 2, 1, 4]"]],"type":"(list -> list)","name":"058","solution":"(letII (case (> randnat 3) of True => randnat | False => (letII randnat (λx -> (inc 4)))) (λk -> (map (λstate -> (letII (letII randnat (λx -> (inc state#2))) (λx -> (case (flip 0.1) of True => 1 | False => randnat)))) (scanl (λacc x -> (case (flip 0.2) of True => (+ k#3 acc#2) | False => x#1)) 0 (take (inc k#1) #2)))))","num_train":4},{"ios":[[["[0, 1, 7, 0, 1, 3, 7, 8, 2, 3, 4, 4, 9, 2, 3, 2, 7, 7, 3, 0, 2, 4, 2, 5, 4, 4, 3, 9, 8, 7]"],"[28, 28, 30]"],[["[6, 7, 5, 9, 1, 2, 1, 4, 0, 1, 6, 9, 2, 1, 2, 9, 8, 1, 0, 5, 9, 3, 3, 3, 9, 4, 5, 2, 0, 7]"],"[12, 13, 14, 18, 13, 18, 13]"],[["[7, 6, 4, 3, 5, 5, 1, 8, 7, 3, 4, 3, 0, 2, 6, 6, 4, 6, 5, 3, 5, 1, 6, 3, 5, 7, 7, 2, 1, 8]"],"[25, 24, 29, 34, 24, 23, 28, 35, 23, 28, 34, 26, 29, 34, 23, 28, 23, 28]"],[["[9, 6, 1, 9, 2, 8, 7, 7, 1, 5, 3, 0, 7, 0, 9, 6, 0, 4, 1, 6, 9, 4, 4, 4, 2, 6, 5, 4, 7, 9]"],"[31, 36, 21, 26, 21, 26, 20, 20, 25, 30, 22, 22, 27, 20, 25]"],[["[3, 9, 1, 5, 7, 4, 0, 0, 6, 0, 4, 1, 8, 1, 0, 3, 0, 2, 2, 8, 2, 7, 4, 5, 4, 3, 3, 8, 1, 4]"],"[19, 13, 20, 13, 23, 17, 17]"],[["[4, 4, 1, 9, 4, 9, 5, 8, 7, 2, 0, 9, 1, 6, 7, 6, 5, 9, 5, 2, 7, 0, 0, 2, 6, 7, 3, 8, 2, 5]"],"[34, 34, 33, 40, 36, 33, 33, 39, 33, 38, 43, 48, 53, 58, 63, 35, 37, 37, 42, 36, 34, 40, 34, 33, 38, 43, 48, 53]"],[["[7, 3, 5, 3, 4, 4, 7, 0, 2, 3, 0, 7, 6, 2, 6, 1, 8, 3, 3, 5, 2, 7, 9, 1, 7, 8, 0, 1, 7, 0]"],"[20, 25, 21, 26, 22, 22, 20, 20, 22, 23, 28, 22, 27, 22, 28]"],[["[9, 4, 1, 6, 6, 5, 2, 8, 1, 3, 1, 1, 1, 2, 9, 3, 4, 2, 0, 9, 7, 2, 6, 2, 7, 5, 0, 1, 2, 2]"],"[20, 20, 32, 37, 20, 22, 20, 26, 29, 26, 31, 32, 24, 21, 24]"]],"type":"(list -> list)","name":"059","solution":"(letII (+ (+ randnat 6) randnat) (λk -> (map (λstate -> (+ state#1 k#2)) (scanl (λacc x -> (letII acc#2 (λx -> (+ (case (flip 0.3) of True => x#1 | False => randnat) (inc 4))))) 0 (take (case (flip 0.8) of True => k#1 | False => (case (flip 0.6) of True => k#1 | False => 3)) #2)))))","num_train":4},{"ios":[[["[9, 3, 7, 7, 4, 0, 3, 3, 5, 0, 7, 7, 4, 5, 7, 4, 4, 2, 3, 0, 6, 6, 0, 6, 2, 3, 4, 5, 0, 0]"],"[7, 2, 5, 11, 2, 9]"],[["[8, 0, 7, 6, 3, 3, 2, 0, 3, 4, 2, 9, 8, 7, 9, 0, 8, 7, 6, 0, 0, 6, 1, 8, 0, 2, 5, 4, 8, 4]"],"[1, 19, 2, 0, 7, 1]"],[["[6, 4, 9, 2, 6, 8, 4, 4, 2, 1, 4, 9, 0, 8, 6, 5, 4, 4, 9, 7, 8, 7, 3, 1, 8, 3, 5, 8, 1, 4]"],"[2, 17, 16, 0, 14, 1]"],[["[4, 2, 9, 9, 1, 4, 3, 0, 4, 8, 3, 6, 4, 0, 8, 6, 3, 6, 6, 3, 4, 6, 5, 8, 6, 7, 9, 4, 2, 9]"],"[1, 3, 0, 0, 2, 4]"],[["[1, 6, 8, 8, 9, 0, 0, 0, 2, 5, 9, 5, 3, 8, 3, 4, 4, 0, 7, 9, 7, 3, 2, 3, 8, 8, 2, 9, 2, 1]"],"[1, 14, 0, 0, 4, 19]"],[["[5, 4, 6, 8, 0, 2, 3, 8, 5, 7, 5, 8, 7, 4, 1, 5, 7, 1, 8, 6, 1, 6, 2, 4, 2, 2, 6, 0, 9, 5]"],"[0, 0, 1, 0, 11, 13]"],[["[3, 2, 9, 8, 9, 0, 7, 2, 0, 6, 3, 4, 5, 5, 4, 4, 4, 7, 1, 6, 5, 5, 4, 9, 0, 6, 3, 7, 1, 3]"],"[1, 5, 2, 0, 11, 3]"],[["[5, 6, 3, 3, 2, 9, 0, 0, 3, 9, 7, 6, 5, 8, 9, 1, 2, 9, 3, 2, 3, 7, 1, 2, 4, 9, 2, 7, 0, 7]"],"[8, 0, 0, 3, 7, 2]"]],"type":"(list -> list)","name":"060","solution":"(letII randnat (λk -> (map (λstate -> (case (letII randnat (λx -> (case (flip 0.6) of True => randnat | False => state#2))) of O => randnat | S => (λn -> randnat))) (scanl (λacc x -> (inc (letII (letII randnat (λx -> (+ randnat randnat))) (λx -> (case (== acc#3 randnat) of True => acc#3 | False => x#1))))) 0 (take (case (flip 0.1) of True => (case k#1 of O => 3 | S => (λn -> k#2)) | False => 6) #2)))))","num_train":4},{"ios":[[["[9, 0, 3, 2, 6, 0, 6, 9, 7, 3, 4, 9, 6, 3, 6, 8, 8, 8, 0, 8, 1, 3, 4, 3, 7, 0, 1, 0, 5, 5]"],"[9, 0]"],[["[4, 0, 7, 7, 2, 4, 9, 1, 5, 2, 4, 6, 0, 1, 2, 7, 7, 1, 5, 3, 6, 5, 5, 3, 4, 7, 2, 0, 6, 0]"],"[5, 9, 7, 10, 2, 4, 9, 1, 8, 2, 7, 6, 6, 1, 2, 3, 9, 4, 5, 3, 9]"],[["[7, 5, 5, 7, 4, 6, 9, 2, 8, 4, 5, 2, 6, 8, 6, 2, 9, 5, 0, 5, 7, 0, 8, 9, 8, 0, 3, 0, 8, 3]"],"[15, 10, 12, 13, 6, 8, 20, 9]"],[["[4, 5, 9, 7, 5, 2, 4, 9, 6, 1, 0, 6, 4, 7, 3, 3, 3, 9, 7, 4, 0, 3, 1, 8, 9, 0, 4, 3, 4, 5]"],"[4, 12, 9, 7]"],[["[6, 8, 1, 2, 6, 5, 4, 9, 9, 0, 1, 7, 0, 8, 1, 7, 2, 3, 6, 1, 9, 7, 6, 4, 4, 9, 3, 3, 9, 9]"],"[6, 9, 1, 13, 6, 10, 4, 8, 9, 9]"],[["[7, 8, 4, 2, 2, 4, 2, 9, 2, 0, 8, 0, 0, 8, 7, 6, 2, 3, 3, 4, 5, 4, 9, 9, 8, 9, 2, 6, 9, 8]"],"[7, 9, 10, 3, 2, 4, 3, 9, 2, 0, 8, 0, 0, 9, 7, 6, 11, 3, 3, 4, 4]"],[["[9, 3, 9, 2, 3, 4, 2, 4, 7, 7, 0, 8, 5, 7, 1, 5, 0, 5, 9, 3, 6, 3, 4, 2, 8, 9, 8, 9, 4, 7]"],"[9, 10, 9, 16, 6, 9, 2, 9, 19, 7, 1, 11, 9, 11, 3, 5, 9, 5, 12, 10, 9, 5, 9, 2, 9, 11, 8, 9]"],[["[5, 5, 5, 3, 9, 1, 2, 1, 4, 9, 2, 1, 7, 6, 6, 7, 3, 3, 2, 9, 3, 5, 0, 0, 3, 8, 9, 3, 8, 7]"],"[6, 6, 5, 3, 11, 3, 3, 1, 4, 9, 3, 3, 9]"]],"type":"(list -> list)","name":"061","solution":"(letII randnat (λk -> (map (λstate -> (+ (- k#2 randnat) state#1)) (scanl (λacc x -> (case randnat of O => (letII randnat (λx -> (+ acc#3 randnat))) | S => (λn -> x#2))) 0 (take randnat #2)))))","num_train":4},{"ios":[[["[7, 9, 9, 6, 6, 3, 0, 3, 5, 6, 8, 1, 9, 3, 0, 0, 0, 4, 2, 8, 5, 3, 7, 4, 7, 9, 4, 8, 2, 7]"],"[5, 10, 4, 0, 39, 0, 21, 8]"],[["[9, 3, 7, 5, 1, 3, 1, 1, 1, 6, 1, 3, 7, 8, 4, 1, 3, 0, 0, 1, 4, 7, 3, 4, 7, 1, 3, 3, 2, 3]"],"[1, 5, 1]"],[["[5, 4, 2, 7, 5, 4, 0, 9, 0, 3, 0, 2, 5, 0, 1, 7, 5, 7, 3, 1, 8, 8, 6, 8, 8, 6, 6, 1, 1, 0]"],"[6, 2, 3, 8, 0, 0]"],[["[8, 7, 5, 6, 2, 7, 2, 7, 6, 4, 3, 9, 9, 9, 6, 3, 6, 2, 5, 1, 8, 9, 0, 9, 8, 8, 1, 5, 4, 4]"],"[0, 5, 9, 19, 4, 2, 7, 0, 4, 4, 3, 59, 4, 0]"],[["[5, 8, 7, 4, 0, 4, 3, 2, 0, 5, 6, 4, 4, 0, 8, 8, 6, 6, 7, 3, 3, 9, 6, 8, 0, 6, 3, 4, 0, 6]"],"[1, 10, 11, 1, 0, 4, 0, 2, 2, 3, 9, 1, 55, 1, 7, 5, 1, 6]"],[["[7, 5, 6, 3, 6, 0, 7, 9, 6, 0, 1, 9, 1, 6, 8, 2, 9, 7, 2, 7, 7, 5, 3, 0, 6, 5, 5, 6, 8, 6]"],"[5, 6, 0, 17, 1, 1]"],[["[0, 4, 4, 9, 9, 1, 4, 1, 2, 9, 7, 3, 5, 5, 5, 4, 6, 3, 0, 2, 9, 3, 9, 5, 3, 3, 2, 6, 7, 5]"],"[13, 9, 3, 12, 0, 1, 4]"],[["[5, 1, 1, 4, 0, 0, 2, 0, 2, 8, 2, 9, 5, 7, 2, 2, 4, 5, 6, 8, 1, 8, 9, 1, 2, 9, 0, 8, 3, 5]"],"[0, 3]"]],"type":"(list -> list)","name":"062","solution":"(letII (case (flip 0.2) of True => 3 | False => randnat) (λk -> (map (λstate -> (letII state#1 (λx -> (case (flip 0.1) of True => x#1 | False => randnat)))) (scanl (λacc x -> (case acc#2 of O => randnat | S => (λn -> (+ x#2 acc#3)))) 0 (take (+ randnat randnat) #2)))))","num_train":4},{"ios":[[["[4, 4, 8, 8, 9, 2, 8, 7, 7, 7, 0, 4, 4, 0, 0, 4, 9, 1, 0, 1, 8, 8, 8, 4, 8, 2, 5, 1, 2, 4]"],"[2, 4, 28, 28, 28, 31]"],[["[1, 7, 6, 2, 5, 0, 2, 5, 4, 9, 5, 3, 1, 9, 7, 0, 8, 4, 6, 3, 3, 8, 5, 0, 8, 0, 7, 8, 0, 5]"],"[5, 9, 9, 10, 11, 17, 17, 19, 25]"],[["[7, 5, 1, 9, 2, 5, 5, 9, 7, 2, 6, 3, 6, 2, 2, 2, 1, 1, 2, 0, 6, 3, 9, 6, 4, 9, 7, 6, 9, 9]"],"[2, 5, 6, 16, 17, 19, 19, 22, 30]"],[["[7, 4, 1, 6, 9, 2, 6, 7, 8, 9, 5, 2, 1, 1, 0, 7, 2, 5, 5, 3, 9, 8, 4, 3, 9, 7, 6, 9, 4, 1]"],"[1, 3, 4, 9, 13, 15]"],[["[2, 4, 6, 9, 9, 2, 1, 8, 5, 2, 3, 5, 0, 2, 8, 0, 3, 9, 3, 8, 2, 3, 2, 2, 6, 0, 6, 2, 9, 2]"],"[3, 6, 10, 18, 24]"],[["[8, 7, 7, 1, 3, 0, 9, 4, 1, 7, 2, 3, 7, 1, 7, 1, 1, 4, 6, 9, 9, 2, 3, 4, 1, 1, 6, 0, 1, 9]"],"[0, 5, 5, 5, 6, 6, 7, 9, 13, 15, 22, 27, 28, 30, 30]"],[["[4, 4, 6, 5, 1, 7, 8, 8, 1, 7, 7, 5, 5, 6, 5, 2, 2, 5, 2, 3, 9, 3, 3, 1, 7, 1, 9, 6, 7, 9]"],"[1, 2, 3, 8, 8, 9, 10, 21, 27, 28, 30, 30]"],[["[8, 4, 5, 1, 4, 9, 5, 8, 6, 0, 8, 2, 3, 6, 7, 2, 1, 7, 7, 9, 3, 2, 3, 8, 1, 5, 4, 1, 0, 3]"],"[0, 5, 11, 12, 12, 21, 25, 28, 28]"]],"type":"(list -> list)","name":"063","solution":"(letII (letII (+ 0 randnat) (λx -> (inc (letII randnat (λx -> (case (flip 0.3) of True => x#1 | False => randnat)))))) (λk -> (map (λstate -> state#1) (scanl (λacc x -> (+ acc#2 randnat)) 0 (take (+ randnat (letII 4 (λx -> (case randnat of O => randnat | S => (λn -> 5))))) #2)))))","num_train":4},{"ios":[[["[9, 0, 7, 6, 9, 9, 8, 3, 7, 8, 9, 1, 4, 8, 2, 5, 6, 1, 3, 3, 3, 9, 9, 4, 5, 8, 5, 0, 8, 1]"],"[29, 0]"],[["[6, 4, 3, 9, 7, 2, 9, 0, 3, 4, 8, 0, 5, 9, 6, 8, 4, 0, 7, 3, 8, 5, 6, 4, 7, 7, 2, 3, 2, 2]"],"[16, 0, 0, 6, 13, 0, 1, 0]"],[["[2, 8, 9, 6, 1, 6, 3, 1, 5, 2, 4, 4, 5, 8, 8, 5, 6, 4, 9, 5, 4, 7, 0, 0, 4, 5, 1, 7, 2, 5]"],"[1, 9, 12, 19, 1]"],[["[9, 7, 8, 7, 9, 0, 8, 8, 7, 9, 1, 0, 6, 2, 6, 3, 8, 2, 4, 8, 6, 1, 3, 9, 3, 3, 5, 3, 4, 6]"],"[0, 0, 14, 3]"],[["[6, 6, 8, 1, 8, 3, 7, 3, 8, 4, 0, 8, 3, 2, 8, 8, 6, 7, 4, 6, 6, 6, 8, 9, 8, 8, 6, 2, 4, 1]"],"[7, 15, 20, 23, 8, 6, 15, 2, 10, 0, 0, 34, 0, 6, 0, 2]"],[["[8, 7, 8, 9, 2, 7, 1, 6, 4, 9, 6, 3, 3, 3, 4, 6, 7, 0, 2, 2, 0, 2, 2, 8, 8, 3, 7, 8, 4, 3]"],"[4, 11, 10, 8]"],[["[1, 6, 9, 7, 0, 3, 3, 0, 2, 3, 3, 8, 4, 4, 3, 6, 4, 9, 0, 9, 9, 1, 5, 3, 5, 1, 5, 3, 4, 9]"],"[3, 10, 0, 13, 5, 7, 0, 7]"],[["[4, 6, 2, 7, 3, 3, 0, 2, 4, 5, 8, 3, 4, 9, 8, 2, 5, 0, 0, 5, 0, 1, 7, 9, 1, 7, 6, 6, 7, 9]"],"[0, 11, 0]"]],"type":"(list -> list)","name":"064","solution":"(letII (letII randnat (λx -> (case randnat of O => x#1 | S => (λn -> randnat)))) (λk -> (map (λstate -> (case (letII (- k#2 randnat) (λx -> (case (flip 0.1) of True => randnat | False => 8))) of O => k#2 | S => (λn -> (- state#2 randnat)))) (scanl (λacc x -> (letII randnat (λx -> (case (flip 0.8) of True => (letII acc#3 (λx -> (+ x#2 x#3))) | False => randnat)))) 0 (take (inc (case (flip 0.4) of True => k#1 | False => k#1)) #2)))))","num_train":4},{"ios":[[["[4, 4, 7, 5, 2, 3, 4, 6, 6, 2, 7, 6, 5, 0, 9, 7, 3, 5, 1, 2, 5, 0, 9, 2, 3, 2, 0, 9, 8, 3]"],"[4, 4, 7, 5, 2, 3, 4]"],[["[3, 7, 9, 0, 7, 5, 8, 3, 8, 5, 4, 9, 4, 0, 9, 7, 7, 5, 5, 5, 7, 6, 4, 1, 8, 2, 8, 4, 1, 5]"],"[3, 3, 9, 0, 7, 5, 8, 3, 8, 5, 4, 9, 4, 0]"],[["[2, 2, 0, 8, 0, 4, 4, 5, 6, 3, 3, 4, 5, 2, 1, 4, 9, 3, 5, 8, 7, 4, 3, 9, 8, 5, 9, 1, 9, 7]"],"[2, 2, 0, 8, 0]"],[["[1, 1, 6, 1, 7, 8, 2, 7, 8, 7, 9, 7, 6, 9, 6, 6, 3, 1, 8, 1, 9, 4, 2, 1, 9, 1, 2, 6, 2, 5]"],"[1, 1, 6, 1, 1, 1]"],[["[7, 4, 3, 6, 8, 6, 9, 1, 8, 0, 4, 1, 5, 4, 8, 4, 4, 6, 1, 4, 4, 4, 9, 1, 2, 7, 8, 7, 0, 4]"],"[0, 4, 3, 6, 6, 6, 9, 1]"],[["[4, 0, 8, 8, 9, 0, 0, 0, 2, 3, 2, 4, 3, 0, 9, 1, 8, 5, 1, 4, 1, 2, 7, 1, 6, 4, 1, 9, 5, 0]"],"[4, 4, 8, 8, 9, 0, 0, 0, 2, 3, 2]"],[["[4, 5, 0, 5, 6, 5, 5, 3, 7, 7, 5, 8, 2, 1, 4, 9, 7, 8, 7, 2, 3, 3, 4, 9, 8, 8, 7, 0, 1, 3]"],"[4, 5, 0, 5, 5, 5, 5, 3, 7, 7]"],[["[1, 5, 9, 9, 3, 6, 6, 9, 6, 3, 1, 6, 8, 9, 0, 6, 4, 7, 6, 2, 7, 7, 4, 4, 8, 4, 6, 5, 5, 5]"],"[1, 5, 9, 9, 3, 6, 6, 9, 6, 3]"]],"type":"(list -> list)","name":"065","solution":"(letII 9 (λk -> (map (λstate -> state#1) (scanl (λacc x -> (letII k#3 (λx -> (case randnat of O => acc#3 | S => (λn -> x#3))))) 0 (take (+ randnat randnat) #2)))))","num_train":4},{"ios":[[["[5, 7, 2, 8, 7, 3, 1, 5, 2, 6, 0, 4, 6, 8, 4, 9, 6, 3, 1, 7, 0, 6, 3, 8, 0, 6, 8, 0, 5, 4]"],"[10, 11, 12, 13, 10]"],[["[7, 3, 9, 7, 0, 5, 3, 1, 3, 8, 6, 7, 4, 7, 2, 6, 8, 6, 2, 5, 7, 6, 1, 8, 8, 8, 9, 1, 5, 4]"],"[10, 11, 10]"],[["[9, 6, 3, 9, 0, 1, 8, 1, 7, 8, 8, 3, 0, 5, 6, 9, 9, 8, 8, 4, 0, 3, 2, 2, 8, 4, 6, 5, 6, 8]"],"[3, 4, 10, 11, 12, 13, 14, 15, 10, 11, 12, 10, 11, 10, 10, 10, 10, 11, 12, 13, 14, 15, 16]"],[["[4, 7, 4, 8, 7, 7, 7, 9, 2, 1, 5, 8, 1, 2, 7, 1, 1, 7, 2, 2, 5, 6, 4, 2, 4, 2, 1, 4, 2, 2]"],"[3, 4, 10, 11, 10, 11, 12, 13, 10, 11, 12, 13, 14]"],[["[7, 9, 7, 1, 2, 1, 2, 0, 8, 7, 5, 6, 1, 5, 4, 7, 0, 6, 6, 4, 2, 9, 2, 6, 0, 3, 0, 8, 3, 3]"],"[3, 10, 11, 12, 13, 14, 15, 10, 11]"],[["[5, 9, 9, 6, 2, 0, 2, 6, 6, 7, 0, 8, 5, 2, 6, 5, 5, 1, 5, 4, 6, 8, 0, 4, 6, 5, 4, 9, 5, 4]"],"[3, 10, 11, 12]"],[["[9, 2, 6, 3, 5, 3, 1, 6, 7, 6, 7, 0, 2, 9, 4, 1, 7, 0, 2, 0, 1, 9, 2, 9, 9, 2, 3, 0, 0, 1]"],"[3, 4, 5, 6, 10, 11, 12, 13]"],[["[6, 8, 8, 7, 2, 5, 4, 2, 4, 2, 5, 6, 5, 8, 8, 8, 5, 5, 4, 6, 1, 0, 0, 4, 3, 2, 0, 1, 6, 1]"],"[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 10, 11]"]],"type":"(list -> list)","name":"066","solution":"(letII (letII randnat (λx -> (- x#1 x#1))) (λk -> (map (λstate -> (letII k#2 (λx -> (inc (letII randnat (λx -> (inc state#3))))))) (scanl (λacc x -> (case randnat of O => 8 | S => (λn -> (letII x#2 (λx -> (inc acc#4)))))) 0 (take (inc (inc (letII randnat (λx -> (+ randnat x#1))))) #2)))))","num_train":4},{"ios":[[["[6, 0, 9, 6, 6, 2, 9, 4, 3, 5, 0, 6, 4, 1, 8, 2, 8, 3, 9, 5, 6, 8, 5, 5, 5, 0, 0, 6, 0, 6]"],"[10, 13, 6]"],[["[2, 1, 1, 3, 0, 7, 9, 9, 3, 3, 4, 5, 0, 2, 4, 3, 7, 5, 4, 3, 8, 7, 5, 7, 2, 0, 2, 9, 1, 1]"],"[0, 7, 6, 6, 4, 5, 17]"],[["[6, 2, 6, 7, 4, 4, 7, 4, 7, 0, 8, 6, 5, 9, 4, 5, 3, 4, 3, 7, 4, 1, 6, 6, 9, 0, 0, 3, 8, 2]"],"[2, 18, 6]"],[["[4, 7, 6, 2, 1, 4, 6, 4, 3, 9, 9, 7, 8, 4, 5, 9, 5, 8, 2, 6, 4, 6, 0, 7, 5, 9, 5, 1, 6, 6]"],"[28, 5, 1, 0, 4, 15, 3, 9, 4, 9, 1, 6, 7, 22, 1, 2, 31, 4, 2, 15, 5, 10, 11, 1, 3, 13, 5, 2, 7, 2]"],[["[8, 0, 3, 0, 8, 7, 2, 3, 3, 9, 9, 6, 6, 7, 3, 5, 8, 6, 3, 1, 2, 7, 1, 9, 9, 2, 7, 8, 5, 2]"],"[5, 11, 6, 4, 1, 6, 2, 13]"],[["[6, 6, 9, 5, 1, 3, 7, 1, 7, 4, 4, 6, 0, 2, 3, 0, 3, 0, 6, 6, 1, 9, 0, 1, 3, 8, 0, 1, 8, 5]"],"[10, 0, 9, 7]"],[["[0, 8, 5, 9, 2, 8, 7, 0, 9, 7, 5, 2, 0, 8, 8, 1, 4, 6, 7, 1, 0, 1, 8, 8, 3, 0, 8, 6, 9, 6]"],"[7, 3, 7]"],[["[0, 6, 5, 9, 8, 3, 3, 6, 4, 6, 2, 0, 5, 9, 4, 2, 6, 5, 4, 4, 7, 1, 9, 8, 5, 9, 2, 1, 8, 2]"],"[3, 2, 6, 0, 26, 1]"]],"type":"(list -> list)","name":"067","solution":"(letII 1 (λk -> (map (λstate -> (- (+ randnat randnat) (- state#1 k#2))) (scanl (λacc x -> (- randnat (+ (case acc#2 of O => randnat | S => (λn -> randnat)) x#1))) 0 (take (inc randnat) #2)))))","num_train":4},{"ios":[[["[5, 3, 7, 4, 7, 3, 7, 0, 3, 1, 8, 9, 1, 1, 1, 5, 5, 3, 1, 3, 0, 9, 7, 5, 3, 6, 6, 4, 3, 8]"],"[6, 0, 6, 3]"],[["[8, 0, 2, 3, 6, 2, 6, 3, 7, 3, 5, 9, 6, 1, 2, 2, 8, 2, 6, 5, 2, 8, 6, 3, 9, 5, 5, 8, 8, 8]"],"[18, 6, 10, 8]"],[["[2, 4, 7, 5, 6, 5, 6, 0, 2, 7, 1, 7, 1, 2, 9, 2, 4, 6, 8, 6, 3, 0, 6, 8, 7, 5, 1, 3, 2, 3]"],"[2, 4, 0, 1]"],[["[4, 2, 2, 9, 2, 4, 4, 0, 8, 7, 0, 9, 9, 6, 9, 4, 6, 9, 7, 1, 1, 2, 4, 2, 8, 4, 5, 4, 2, 9]"],"[6, 8, 5, 1]"],[["[0, 0, 6, 7, 4, 9, 3, 9, 2, 3, 9, 8, 8, 7, 2, 3, 8, 5, 6, 7, 6, 1, 3, 1, 4, 6, 9, 8, 0, 8]"],"[2, 0, 3, 11]"],[["[8, 7, 7, 5, 1, 4, 3, 7, 7, 3, 8, 7, 3, 3, 7, 2, 6, 4, 7, 5, 7, 3, 1, 4, 2, 3, 1, 9, 6, 3]"],"[9, 0, 2, 1]"],[["[3, 9, 6, 5, 6, 8, 6, 1, 1, 1, 6, 8, 2, 6, 8, 1, 8, 0, 8, 1, 8, 3, 7, 7, 0, 0, 3, 5, 5, 0]"],"[0, 0, 0, 2]"],[["[1, 4, 5, 7, 8, 2, 5, 9, 2, 0, 5, 5, 8, 0, 9, 5, 8, 0, 4, 5, 6, 8, 9, 0, 8, 1, 1, 0, 2, 9]"],"[20, 4, 3, 2]"]],"type":"(list -> list)","name":"068","solution":"(letII (inc (letII randnat (λx -> (+ x#1 randnat)))) (λk -> (map (λstate -> state#1) (scanl (λacc x -> (case 5 of O => (case x#1 of O => acc#2 | S => (λn -> randnat)) | S => (λn -> randnat))) 0 (take (case 9 of O => (+ k#1 k#1) | S => (λn -> 4)) #2)))))","num_train":4},{"ios":[[["[5, 3, 8, 3, 7, 4, 7, 3, 8, 7, 6, 8, 1, 9, 5, 3, 9, 4, 6, 7, 9, 3, 9, 3, 5, 0, 6, 1, 2, 8]"],"[11, 12, 8, 12, 5, 7, 15, 3, 3, 7, 6, 16, 15, 5]"],[["[3, 1, 2, 3, 4, 1, 2, 4, 6, 0, 8, 3, 6, 3, 3, 4, 6, 1, 4, 5, 6, 9, 7, 2, 6, 0, 9, 4, 3, 6]"],"[20, 6, 16, 16, 7, 7, 2, 1, 8, 9, 5, 34, 6, 12, 22]"],[["[7, 3, 9, 4, 0, 0, 9, 2, 7, 6, 1, 3, 5, 0, 9, 9, 8, 4, 1, 6, 7, 3, 5, 8, 3, 4, 4, 9, 0, 9]"],"[7, 6, 4, 3, 18, 2, 4, 6, 8, 1, 3, 1, 2, 18, 11, 7, 14, 8, 1, 16, 13, 8, 8, 6, 7, 17]"],[["[4, 0, 9, 6, 2, 1, 8, 7, 7, 2, 5, 1, 5, 5, 1, 9, 3, 4, 4, 7, 9, 6, 2, 0, 8, 3, 6, 1, 8, 4]"],"[9, 8, 18, 10, 39, 18, 15, 1, 4, 25, 4, 14, 8, 5, 11]"],[["[9, 0, 3, 2, 3, 2, 0, 5, 0, 0, 2, 1, 1, 3, 0, 6, 4, 7, 9, 7, 8, 6, 5, 8, 3, 1, 1, 5, 1, 6]"],"[4, 15, 6, 12, 23, 12, 12, 7, 2, 2, 2, 5, 4, 9, 5]"],[["[1, 4, 0, 3, 3, 0, 7, 2, 6, 2, 2, 2, 9, 6, 1, 7, 9, 6, 7, 6, 8, 1, 1, 6, 9, 0, 4, 3, 6, 6]"],"[3, 12, 10, 19, 5, 7, 9, 11, 5, 16, 14, 8, 7, 1, 6, 12]"],[["[5, 1, 7, 2, 4, 3, 3, 1, 2, 5, 5, 8, 4, 9, 8, 3, 6, 6, 7, 8, 0, 3, 0, 6, 4, 9, 5, 0, 6, 8]"],"[5, 2, 3, 11, 17, 9, 8, 1, 14, 2, 10, 9, 2, 1, 11]"],[["[6, 6, 8, 5, 5, 4, 6, 9, 2, 4, 2, 7, 2, 4, 5, 7, 8, 5, 1, 7, 4, 5, 1, 0, 9, 5, 2, 5, 0, 2]"],"[2, 14, 3, 1, 10, 2, 14, 4, 17, 15, 1, 4, 2, 4, 9, 4, 3, 10, 0, 9, 12, 3, 1, 4, 16]"]],"type":"(list -> list)","name":"069","solution":"(letII (letII (case (flip 0.2) of True => randnat | False => randnat) (λx -> (+ 6 x#1))) (λk -> (map (λstate -> (+ (letII state#1 (λx -> (case x#1 of O => randnat | S => (λn -> 0)))) randnat)) (scanl (λacc x -> acc#2) 0 (take (case (flip 0.8) of True => (+ (inc 7) k#1) | False => k#1) #2)))))","num_train":4},{"ios":[[["[8, 4, 2, 4, 4, 5, 1, 1, 8, 7, 9, 7, 3, 7, 5, 9, 4, 3, 8, 5, 6, 0, 4, 8, 3, 9, 0, 4, 2, 0]"],"[8, 12, 14, 18]"],[["[4, 6, 0, 3, 3, 7, 0, 6, 1, 5, 3, 6, 4, 6, 7, 0, 4, 4, 5, 5, 3, 1, 0, 2, 2, 1, 0, 8, 0, 1]"],"[4, 10, 10]"],[["[7, 3, 1, 9, 7, 9, 6, 9, 0, 1, 9, 0, 9, 1, 7, 4, 7, 4, 8, 3, 9, 1, 4, 8, 1, 7, 8, 9, 0, 6]"],"[7, 10, 11, 20, 27, 36, 42, 51, 51, 52]"],[["[4, 1, 6, 0, 8, 5, 7, 4, 8, 1, 6, 5, 3, 8, 9, 6, 6, 5, 3, 3, 0, 4, 3, 9, 4, 6, 4, 5, 1, 6]"],"[4, 5, 11, 11, 19, 24, 31, 35, 43]"],[["[1, 4, 6, 9, 8, 3, 2, 1, 0, 6, 8, 1, 3, 9, 9, 0, 3, 0, 0, 1, 6, 8, 8, 5, 5, 3, 8, 4, 5, 8]"],"[1, 5, 11]"],[["[0, 2, 7, 9, 5, 1, 3, 3, 5, 7, 6, 1, 1, 6, 3, 2, 1, 9, 8, 9, 9, 7, 6, 7, 6, 0, 6, 8, 9, 2]"],"[0, 2, 9, 18, 23, 24, 27, 30, 35, 42, 48, 49, 50, 56, 59, 61, 62, 71, 79, 88]"],[["[1, 5, 9, 9, 5, 7, 8, 3, 7, 7, 9, 1, 2, 5, 2, 1, 3, 1, 6, 0, 3, 2, 6, 9, 1, 9, 9, 4, 3, 4]"],"[1, 6, 15, 24, 29, 36]"],[["[1, 4, 7, 2, 0, 6, 8, 5, 2, 3, 6, 9, 9, 5, 5, 2, 1, 4, 0, 4, 4, 6, 2, 6, 2, 3, 5, 2, 8, 0]"],"[1, 5, 12, 14, 14, 20, 28, 33, 35, 38, 44]"]],"type":"(list -> list)","name":"070","solution":"(letII (letII 5 (λx -> (case x#1 of O => 0 | S => (λn -> randnat)))) (λk -> (map (λstate -> state#1) (scanl (λacc x -> (letII randnat (λx -> (+ x#2 acc#3)))) 0 (take (letII k#1 (λx -> (+ randnat x#1))) #2)))))","num_train":4},{"ios":[[["[3, 5, 5, 1, 3, 2, 5, 2, 0, 7, 5, 5, 8, 4, 5, 8, 1, 8, 8, 1, 3, 0, 3, 8, 0, 1, 0, 2, 7, 5]"],"[0, 5, 16, 1, 3, 2, 9, 5, 8, 5, 5, 2, 0, 4]"],[["[7, 2, 7, 9, 4, 9, 4, 9, 0, 5, 8, 6, 5, 1, 5, 4, 9, 2, 1, 4, 4, 9, 2, 2, 0, 0, 7, 6, 4, 6]"],"[4, 0, 6, 9, 0, 2, 1, 8]"],[["[8, 4, 1, 6, 6, 2, 0, 2, 1, 2, 6, 9, 0, 2, 1, 6, 4, 7, 3, 6, 0, 9, 8, 4, 8, 4, 9, 5, 4, 7]"],"[14, 2, 0, 9, 6, 3, 4, 1]"],[["[5, 5, 8, 0, 8, 3, 6, 4, 5, 2, 8, 4, 1, 1, 0, 3, 1, 1, 2, 5, 1, 7, 0, 1, 2, 0, 9, 6, 8, 7]"],"[11, 2]"],[["[3, 9, 8, 4, 3, 0, 7, 4, 3, 2, 7, 1, 8, 6, 5, 2, 2, 7, 0, 6, 2, 8, 2, 2, 6, 6, 0, 9, 0, 5]"],"[9, 2, 5]"],[["[3, 5, 8, 4, 4, 0, 1, 3, 7, 0, 0, 7, 2, 6, 2, 7, 2, 4, 1, 1, 3, 6, 9, 7, 1, 4, 2, 9, 8, 5]"],"[6, 3]"],[["[6, 8, 1, 9, 9, 6, 4, 7, 2, 3, 7, 5, 8, 5, 6, 5, 4, 5, 6, 6, 2, 1, 7, 1, 2, 8, 5, 6, 5, 5]"],"[12, 15, 1]"],[["[4, 0, 3, 9, 2, 7, 2, 2, 8, 1, 8, 4, 3, 3, 4, 2, 3, 4, 8, 3, 2, 8, 6, 5, 5, 5, 3, 3, 3, 1]"],"[11, 13, 25, 0]"]],"type":"(list -> list)","name":"071","solution":"(letII (+ randnat randnat) (λk -> (map (λstate -> (case (flip 0.3) of True => state#1 | False => randnat)) (scanl (λacc x -> (+ x#1 (letII 6 (λx -> (- 6 acc#3))))) 0 (take (case randnat of O => (case k#1 of O => randnat | S => (λn -> k#2)) | S => (λn -> (letII 9 (λx -> (case n#2 of O => randnat | S => (λn -> n#3)))))) #2)))))","num_train":4},{"ios":[[["[3, 5, 0, 2, 8, 3, 6, 4, 3, 2, 9, 7, 4, 3, 9, 4, 0, 4, 0, 1, 9, 9, 5, 5, 9, 7, 2, 5, 5, 1]"],"[4, 12, 3, 12, 3, 3, 2]"],[["[7, 2, 7, 3, 7, 7, 5, 9, 6, 7, 9, 3, 8, 6, 3, 1, 0, 5, 0, 2, 4, 0, 1, 8, 1, 7, 4, 4, 6, 5]"],"[8, 11, 17, 5, 10, 8, 6]"],[["[6, 5, 9, 0, 5, 0, 9, 4, 0, 6, 6, 0, 8, 9, 7, 6, 7, 1, 7, 4, 9, 3, 3, 9, 6, 8, 4, 4, 0, 2]"],"[11, 3, 11, 8, 14, 4, 9]"],[["[4, 6, 3, 9, 6, 5, 6, 1, 6, 0, 6, 3, 9, 1, 6, 0, 4, 6, 6, 4, 4, 4, 3, 7, 5, 1, 7, 8, 0, 4]"],"[5, 5, 2, 10, 12, 8, 4]"],[["[0, 5, 9, 4, 2, 2, 3, 1, 7, 8, 8, 1, 4, 5, 6, 3, 5, 0, 1, 8, 4, 8, 0, 1, 8, 1, 2, 3, 9, 4]"],"[3, 3, 13, 7, 17, 2, 10]"],[["[6, 0, 8, 2, 2, 7, 8, 4, 7, 1, 2, 5, 5, 6, 1, 4, 9, 5, 4, 7, 5, 8, 6, 8, 3, 2, 6, 8, 7, 9]"],"[7, 3, 17, 2, 5, 9, 9]"],[["[3, 9, 0, 8, 6, 1, 7, 1, 9, 3, 8, 8, 7, 3, 8, 6, 1, 7, 3, 3, 3, 3, 0, 1, 4, 8, 7, 5, 1, 1]"],"[8, 11, 10, 7, 16, 4, 9]"],[["[5, 4, 4, 6, 8, 5, 0, 7, 6, 6, 4, 4, 4, 3, 0, 7, 7, 6, 1, 6, 8, 8, 0, 8, 4, 0, 1, 8, 5, 2]"],"[12, 6, 6, 5, 19, 9, 2]"]],"type":"(list -> list)","name":"072","solution":"(letII 6 (λk -> (map (λstate -> (+ (letII randnat (λx -> (inc x#1))) (inc (- state#1 randnat)))) (scanl (λacc x -> (letII acc#2 (λx -> (case 6 of O => randnat | S => (λn -> x#3))))) 0 (take 7 #2)))))","num_train":4},{"ios":[[["[4, 4, 7, 4, 7, 0, 1, 7, 2, 9, 9, 1, 8, 6, 7, 7, 4, 6, 0, 6, 5, 7, 8, 0, 9, 3, 6, 5, 6, 3]"],"[0, 0, 0, 1, 2, 1, 9]"],[["[9, 8, 9, 7, 7, 3, 5, 8, 2, 7, 8, 3, 1, 0, 3, 5, 6, 4, 4, 4, 5, 6, 3, 9, 4, 1, 8, 6, 8, 8]"],"[0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0]"],[["[5, 2, 3, 3, 2, 5, 0, 7, 8, 7, 2, 7, 9, 2, 6, 8, 0, 8, 8, 5, 2, 8, 7, 5, 9, 9, 7, 1, 0, 1]"],"[2, 0, 0, 0, 5, 11, 0]"],[["[0, 7, 2, 3, 4, 4, 0, 1, 9, 2, 3, 0, 5, 5, 1, 5, 5, 0, 2, 5, 9, 6, 1, 9, 6, 9, 7, 6, 6, 6]"],"[0, 3, 0, 8, 0, 2, 0, 5, 22, 0]"],[["[3, 6, 6, 7, 5, 9, 5, 0, 9, 1, 4, 9, 4, 4, 9, 0, 3, 9, 6, 8, 5, 6, 4, 2, 6, 9, 3, 7, 9, 0]"],"[0, 0, 0, 0, 0, 0, 6, 8]"],[["[1, 3, 3, 5, 2, 2, 3, 4, 5, 3, 8, 7, 6, 2, 2, 7, 7, 6, 3, 7, 2, 9, 4, 3, 0, 3, 8, 9, 4, 4]"],"[0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 2, 0, 3]"],[["[1, 4, 0, 5, 7, 9, 3, 3, 5, 8, 2, 1, 0, 1, 6, 9, 6, 5, 3, 3, 4, 3, 3, 8, 6, 8, 6, 7, 7, 3]"],"[5, 0, 0, 1, 0, 0, 0]"],[["[3, 1, 3, 6, 8, 6, 3, 8, 4, 0, 3, 1, 3, 7, 9, 9, 3, 7, 8, 1, 3, 9, 1, 2, 9, 1, 3, 1, 1, 1]"],"[0, 1, 0, 0, 0, 0, 1, 0]"]],"type":"(list -> list)","name":"073","solution":"(letII 0 (λk -> (map (λstate -> (- (letII k#2 (λx -> (+ (letII state#2 (λx -> (case (flip 0.1) of True => x#2 | False => x#1))) state#2))) (+ (letII k#2 (λx -> (case randnat of O => randnat | S => (λn -> n#1)))) state#1))) (scanl (λacc x -> (case acc#2 of O => randnat | S => (λn -> randnat))) 0 (take (+ (inc (case k#1 of O => 4 | S => (λn -> randnat))) randnat) #2)))))","num_train":4},{"ios":[[["[6, 8, 6, 9, 0, 8, 6, 4, 2, 4, 6, 0, 6, 5, 6, 8, 6, 7, 2, 3, 5, 4, 3, 1, 6, 2, 5, 7, 0, 1]"],"[6, 6, 10, 0, 4, 6, 6, 8, 6, 21, 6, 3, 6, 5, 8]"],[["[0, 8, 0, 9, 7, 9, 5, 1, 3, 7, 6, 2, 5, 5, 9, 7, 6, 5, 7, 8, 3, 6, 5, 2, 7, 5, 3, 7, 7, 7]"],"[0, 8, 2, 10]"],[["[2, 5, 3, 7, 0, 0, 9, 7, 9, 5, 6, 6, 2, 7, 2, 6, 3, 6, 2, 4, 8, 3, 4, 7, 3, 9, 1, 3, 5, 4]"],"[2, 15, 5, 7, 6, 12, 9, 5]"],[["[5, 1, 8, 1, 0, 5, 7, 6, 8, 9, 1, 0, 2, 4, 9, 6, 1, 6, 0, 4, 7, 1, 2, 2, 0, 7, 9, 7, 2, 2]"],"[8, 0, 2, 1]"],[["[9, 2, 1, 4, 8, 4, 1, 7, 3, 9, 8, 1, 3, 8, 6, 0, 3, 2, 6, 8, 8, 9, 8, 4, 2, 1, 8, 9, 3, 8]"],"[9, 16, 1, 4, 25, 8, 1, 0, 8, 14, 8]"],[["[9, 7, 7, 6, 7, 7, 5, 4, 4, 4, 0, 7, 3, 3, 1, 3, 0, 1, 1, 6, 0, 8, 7, 5, 4, 9, 5, 2, 9, 6]"],"[17, 7, 7, 18, 0, 14, 5, 0, 6]"],[["[9, 2, 6, 7, 4, 7, 9, 2, 4, 4, 1, 3, 6, 7, 9, 6, 0, 4, 0, 8, 2, 3, 9, 6, 8, 4, 1, 3, 8, 2]"],"[9, 3, 6, 0, 6, 23]"],[["[2, 0, 3, 7, 6, 7, 2, 9, 2, 5, 7, 3, 6, 3, 3, 8, 5, 6, 4, 6, 2, 9, 0, 9, 8, 9, 5, 7, 7, 1]"],"[6, 11, 7, 7, 6, 7, 11, 9, 3, 5, 7, 3, 6, 8, 11, 8, 11, 11, 4, 18]"]],"type":"(list -> list)","name":"074","solution":"(letII (letII randnat (λx -> (+ randnat randnat))) (λk -> (map (λstate -> (case (flip 0.9) of True => (case randnat of O => k#2 | S => (λn -> state#2)) | False => (case (flip 0.4) of True => state#1 | False => 0))) (scanl (λacc x -> (+ (letII acc#2 (λx -> (- randnat randnat))) x#1)) 0 (take (+ (case (flip 0.1) of True => randnat | False => k#1) (case (flip 0.3) of True => 3 | False => randnat)) #2)))))","num_train":4},{"ios":[[["[3, 7, 6, 4, 1, 1, 5, 0, 2, 6, 6, 2, 1, 7, 6, 5, 7, 5, 2, 4, 3, 7, 3, 8, 6, 6, 5, 2, 2, 6]"],"[0, 7, 10, 19, 0, 6, 0, 2, 1]"],[["[7, 7, 4, 9, 4, 2, 6, 4, 3, 8, 1, 6, 1, 7, 7, 3, 8, 9, 7, 9, 6, 0, 2, 0, 3, 6, 0, 6, 4, 7]"],"[3, 1, 1, 0, 5, 13, 0, 0, 13]"],[["[9, 2, 6, 5, 6, 4, 0, 7, 1, 0, 0, 1, 9, 8, 2, 1, 3, 4, 7, 2, 3, 9, 2, 9, 9, 4, 7, 7, 5, 3]"],"[2, 1, 2, 14, 5, 3, 3, 1, 0]"],[["[8, 5, 7, 2, 6, 4, 0, 5, 3, 3, 2, 1, 3, 5, 8, 3, 4, 8, 8, 5, 3, 7, 5, 2, 5, 1, 7, 6, 8, 8]"],"[3, 0, 6, 0, 0, 2, 5, 7, 7]"],[["[5, 3, 6, 9, 6, 7, 7, 9, 0, 2, 7, 0, 8, 2, 8, 2, 1, 2, 6, 5, 6, 9, 4, 8, 5, 9, 6, 2, 8, 6]"],"[0, 0, 1, 8, 0, 2, 1, 1, 26]"],[["[9, 6, 9, 4, 9, 4, 0, 9, 0, 0, 3, 2, 6, 5, 9, 4, 2, 4, 0, 3, 7, 6, 4, 6, 2, 2, 1, 2, 8, 0]"],"[13, 5, 0, 0, 2, 0, 6, 5, 2]"],[["[0, 1, 2, 7, 7, 6, 3, 2, 3, 8, 5, 4, 1, 8, 0, 8, 5, 4, 5, 8, 7, 0, 7, 7, 5, 7, 8, 9, 2, 6]"],"[3, 8, 5, 1, 3, 10, 0, 0, 11]"],[["[3, 3, 8, 4, 4, 5, 2, 5, 6, 5, 0, 7, 1, 5, 3, 5, 4, 7, 8, 9, 7, 1, 3, 7, 2, 9, 5, 2, 7, 0]"],"[0, 2, 1, 5, 0, 7, 6, 0, 4]"]],"type":"(list -> list)","name":"075","solution":"(letII 9 (λk -> (map (λstate -> (letII state#1 (λx -> (+ x#1 randnat)))) (scanl (λacc x -> acc#2) 0 (take (case (flip 0.8) of True => k#1 | False => k#1) #2)))))","num_train":4},{"ios":[[["[8, 5, 2, 4, 5, 2, 3, 2, 7, 8, 9, 1, 0, 6, 6, 3, 8, 5, 1, 3, 1, 9, 7, 1, 7, 7, 7, 5, 2, 8]"],"[19, 13, 21, 14, 17, 28, 19, 28, 24, 37]"],[["[2, 6, 7, 4, 9, 6, 4, 5, 7, 6, 8, 9, 4, 7, 5, 6, 9, 4, 9, 1, 9, 7, 1, 2, 8, 9, 3, 7, 5, 7]"],"[12, 11, 24, 22, 20, 28, 28, 23, 28, 43]"],[["[9, 4, 0, 6, 2, 6, 4, 7, 4, 7, 3, 7, 9, 4, 8, 0, 3, 3, 2, 5, 6, 3, 3, 1, 6, 6, 7, 6, 0, 1]"],"[5, 8, 15, 12, 13, 15, 17, 21, 26, 29]"],[["[1, 3, 6, 4, 3, 6, 3, 2, 4, 5, 4, 6, 2, 9, 3, 5, 4, 7, 8, 9, 6, 1, 0, 3, 3, 0, 6, 7, 5, 7]"],"[16, 6, 8, 18, 16, 15, 18, 23, 25, 26]"],[["[0, 0, 9, 0, 2, 9, 1, 3, 4, 5, 5, 6, 4, 0, 6, 1, 1, 8, 9, 5, 5, 7, 2, 8, 4, 7, 8, 5, 6, 8]"],"[23, 20, 21, 27, 25, 35, 32, 31, 39, 35]"],[["[8, 1, 4, 8, 3, 5, 8, 5, 4, 6, 0, 4, 1, 8, 6, 2, 4, 1, 0, 7, 5, 7, 8, 2, 4, 6, 6, 6, 4, 6]"],"[8, 26, 16, 25, 17, 15, 29, 20, 39, 28]"],[["[3, 3, 2, 3, 7, 3, 8, 4, 5, 5, 1, 5, 4, 6, 3, 2, 6, 3, 1, 7, 5, 3, 8, 2, 1, 8, 7, 0, 6, 2]"],"[9, 16, 11, 13, 25, 20, 22, 24, 24, 37]"],[["[0, 3, 2, 3, 2, 9, 8, 8, 7, 8, 5, 2, 2, 3, 6, 7, 2, 0, 5, 9, 0, 3, 1, 8, 9, 2, 2, 6, 0, 4]"],"[6, 9, 9, 15, 18, 17, 17, 22, 21, 25]"]],"type":"(list -> list)","name":"076","solution":"(letII randnat (λk -> (map (λstate -> (+ (+ k#2 (letII randnat (λx -> (+ x#1 k#3)))) state#1)) (scanl (λacc x -> (letII acc#2 (λx -> (+ (case acc#3 of O => 0 | S => (λn -> n#1)) 3)))) 0 (take (letII (case (flip 0.6) of True => randnat | False => randnat) (λx -> (inc 9))) #2)))))","num_train":4},{"ios":[[["[5, 8, 7, 9, 2, 7, 6, 5, 8, 2, 7, 9, 9, 7, 1, 2, 0, 2, 7, 5, 3, 0, 9, 9, 9, 9, 5, 4, 9, 8]"],"[2, 15, 11, 3, 3]"],[["[3, 3, 3, 8, 8, 1, 5, 3, 0, 3, 1, 0, 3, 6, 5, 0, 5, 6, 7, 1, 6, 6, 7, 5, 0, 7, 8, 3, 6, 0]"],"[12, 8, 5, 16, 11]"],[["[4, 5, 8, 1, 9, 5, 7, 9, 2, 3, 1, 4, 6, 7, 5, 1, 3, 2, 1, 8, 6, 3, 5, 1, 2, 3, 8, 3, 8, 3]"],"[2, 7, 9, 17, 11]"],[["[5, 2, 3, 4, 0, 0, 3, 7, 0, 2, 5, 0, 1, 9, 6, 3, 0, 2, 9, 1, 3, 3, 7, 2, 1, 9, 5, 4, 8, 7]"],"[3, 5, 2, 9, 16]"],[["[0, 8, 5, 8, 9, 4, 7, 5, 5, 5, 3, 1, 3, 0, 9, 7, 0, 2, 2, 1, 0, 6, 7, 5, 2, 5, 6, 9, 2, 6]"],"[6, 16, 4, 15, 2]"],[["[9, 0, 2, 4, 0, 8, 1, 6, 3, 3, 2, 5, 3, 1, 4, 9, 9, 0, 5, 3, 4, 5, 8, 5, 9, 8, 8, 4, 7, 2]"],"[2, 10, 7, 2, 6]"],[["[0, 9, 0, 1, 5, 2, 8, 4, 8, 3, 1, 4, 1, 2, 4, 3, 4, 2, 0, 7, 2, 1, 4, 6, 0, 2, 0, 1, 9, 3]"],"[3, 29, 1, 6, 8]"],[["[4, 8, 2, 3, 5, 1, 1, 9, 3, 8, 1, 6, 7, 6, 7, 6, 2, 1, 6, 9, 5, 3, 9, 8, 7, 0, 7, 8, 9, 1]"],"[15, 23, 21, 4, 8]"]],"type":"(list -> list)","name":"077","solution":"(letII 1 (λk -> (map (λstate -> (letII (inc state#1) (λx -> (+ randnat randnat)))) (scanl (λacc x -> (letII (letII (case (flip 0.1) of True => x#1 | False => randnat) (λx -> (+ randnat randnat))) (λx -> (+ acc#3 x#1)))) 0 (take (letII 5 (λx -> (case 0 of O => x#1 | S => (λn -> 5)))) #2)))))","num_train":4},{"ios":[[["[6, 8, 8, 1, 5, 8, 0, 5, 3, 5, 6, 4, 4, 3, 7, 1, 3, 0, 8, 8, 5, 2, 1, 3, 1, 9, 8, 3, 7, 4]"],"[8, 1, 0, 5, 9]"],[["[9, 1, 2, 5, 3, 8, 4, 3, 5, 9, 1, 6, 7, 0, 4, 3, 7, 7, 9, 7, 0, 3, 3, 6, 7, 5, 2, 9, 3, 0]"],"[1, 8, 1, 4, 1]"],[["[8, 5, 3, 9, 9, 1, 1, 7, 9, 4, 9, 3, 9, 1, 1, 2, 2, 2, 2, 7, 3, 1, 1, 4, 0, 4, 8, 5, 7, 0]"],"[0, 2, 19, 6, 9]"],[["[6, 1, 3, 9, 4, 4, 0, 5, 7, 0, 3, 9, 1, 3, 9, 3, 5, 1, 8, 9, 1, 4, 3, 3, 7, 0, 4, 3, 4, 3]"],"[2, 4, 15, 8, 4]"],[["[1, 2, 8, 4, 9, 1, 4, 5, 7, 2, 9, 1, 4, 3, 9, 6, 3, 3, 6, 7, 1, 2, 0, 1, 4, 8, 8, 1, 0, 5]"],"[4, 1, 2, 0, 5]"],[["[7, 7, 9, 6, 4, 8, 9, 8, 5, 1, 5, 4, 8, 0, 4, 6, 6, 6, 3, 8, 4, 2, 2, 1, 2, 6, 3, 8, 1, 1]"],"[2, 1, 12, 11, 5]"],[["[5, 2, 9, 7, 5, 1, 8, 5, 0, 4, 1, 1, 7, 3, 5, 1, 3, 8, 6, 9, 3, 0, 5, 3, 2, 9, 0, 4, 2, 1]"],"[9, 0, 3, 6, 3]"],[["[1, 1, 2, 8, 9, 3, 2, 0, 1, 9, 7, 6, 4, 8, 7, 6, 1, 7, 0, 7, 7, 9, 5, 0, 1, 0, 4, 0, 4, 5]"],"[1, 1, 0, 7, 1]"]],"type":"(list -> list)","name":"078","solution":"(letII (case (inc 0) of O => 6 | S => (λn -> (inc randnat))) (λk -> (map (λstate -> (case (flip 0.6) of True => randnat | False => state#1)) (scanl (λacc x -> (case randnat of O => (case (flip 0.1) of True => x#1 | False => acc#2) | S => (λn -> (+ randnat k#4)))) 0 (take (letII randnat (λx -> (case 6 of O => (inc randnat) | S => (λn -> n#1)))) #2)))))","num_train":4},{"ios":[[["[0, 8, 2, 1, 1, 7, 5, 6, 4, 7, 6, 4, 9, 9, 1, 4, 7, 2, 5, 9, 6, 1, 3, 8, 2, 0, 3, 9, 9, 5]"],"[1, 3, 5, 4, 7, 7, 3, 7, 4, 10, 4, 3, 4, 10, 4, 5, 3, 6, 12, 12, 9, 9, 3, 1, 7, 5, 7, 11, 2, 1]"],[["[4, 1, 5, 0, 7, 0, 5, 8, 3, 2, 1, 9, 9, 5, 7, 1, 6, 8, 8, 2, 2, 3, 8, 6, 0, 0, 3, 6, 9, 9]"],"[8, 24, 5, 4, 15, 9, 6, 1, 16, 1, 3, 8, 4, 9, 11, 5, 2, 1, 3, 2, 3, 6, 1]"],[["[9, 8, 4, 7, 7, 0, 5, 5, 9, 1, 7, 7, 0, 9, 7, 8, 1, 1, 2, 3, 8, 4, 1, 2, 4, 3, 4, 1, 1, 9]"],"[1, 5, 3, 4, 3, 9, 1, 6, 2, 3, 1, 8, 4, 1, 3, 4, 4, 7, 2, 2, 1, 5, 14, 5, 1, 3, 4, 4, 5, 7]"],[["[8, 9, 4, 9, 8, 8, 0, 5, 0, 4, 2, 5, 0, 9, 4, 9, 2, 4, 6, 1, 4, 7, 9, 0, 5, 6, 7, 5, 5, 9]"],"[4, 5, 6, 3, 10, 4, 9, 3, 2, 3, 1, 7, 11, 1, 2, 1, 5, 4, 15, 9, 10, 8, 7, 8, 4, 10, 3]"],[["[3, 6, 6, 6, 5, 7, 2, 7, 1, 3, 3, 9, 4, 9, 7, 1, 6, 1, 5, 5, 5, 2, 3, 0, 3, 7, 9, 1, 9, 9]"],"[1, 4, 2, 4, 1, 2, 7, 4, 5, 21, 1, 4, 9, 2, 3, 6, 11, 12, 10, 3, 4]"],[["[9, 7, 2, 5, 8, 6, 9, 0, 7, 6, 0, 3, 8, 4, 3, 6, 7, 2, 6, 7, 9, 7, 1, 3, 4, 3, 3, 1, 6, 7]"],"[2, 3, 9, 5, 2, 6, 4, 12, 6, 2, 12, 6, 2, 3, 2, 5, 16, 4, 3, 5, 1, 1, 2, 9, 1]"],[["[0, 4, 3, 2, 4, 0, 4, 0, 3, 8, 3, 5, 1, 1, 6, 8, 4, 5, 9, 6, 4, 8, 2, 3, 7, 0, 9, 5, 4, 8]"],"[3, 11, 1, 3, 3, 9, 4, 4, 2, 2, 1, 3, 1, 3, 10, 5, 2]"],[["[1, 6, 0, 0, 7, 3, 1, 3, 5, 6, 0, 0, 2, 7, 1, 7, 8, 4, 2, 6, 9, 4, 7, 8, 2, 0, 2, 8, 4, 1]"],"[1, 7, 7, 12, 6, 5, 2, 1, 19, 1, 7, 10, 9, 2, 2, 1, 4, 7, 2]"]],"type":"(list -> list)","name":"079","solution":"(letII (case (iseven 0) of True => randnat | False => (inc randnat)) (λk -> (map (λstate -> (letII (+ state#1 (- randnat randnat)) (λx -> (inc randnat)))) (scanl (λacc x -> (inc acc#2)) 0 (take (+ k#1 (letII 8 (λx -> (+ 9 x#1)))) #2)))))","num_train":4},{"ios":[[["[6, 4, 3, 2, 3, 7, 6, 1, 9, 4, 0, 9, 9, 3, 2, 5, 6, 9, 6, 5, 7, 6, 9, 5, 0, 7, 1, 5, 1, 0]"],"[1, 3, 1, 5, 2]"],[["[9, 5, 1, 8, 0, 4, 5, 1, 1, 5, 1, 7, 3, 8, 1, 0, 3, 1, 9, 6, 0, 7, 9, 8, 5, 3, 6, 5, 5, 8]"],"[4, 0, 1, 16, 2, 2, 0, 0, 3, 1, 6, 0, 0, 13, 1, 1, 1, 1, 3, 3, 0, 1, 9, 0, 5, 2, 5]"],[["[9, 2, 1, 8, 0, 2, 1, 8, 9, 9, 4, 7, 2, 6, 8, 3, 3, 5, 5, 5, 1, 5, 9, 9, 7, 4, 7, 6, 8, 7]"],"[8, 0, 5]"],[["[8, 9, 6, 6, 7, 2, 9, 8, 4, 0, 5, 4, 9, 4, 6, 2, 7, 2, 3, 9, 6, 6, 9, 7, 0, 2, 3, 9, 7, 2]"],"[3, 15, 3, 5, 1, 12, 2, 2, 9, 2, 5, 0, 5, 2, 0, 8, 11, 1, 1, 0, 9, 2, 0, 9, 3, 4, 3, 7, 1, 0]"],[["[6, 0, 7, 5, 1, 9, 9, 9, 4, 5, 0, 6, 3, 8, 2, 9, 8, 4, 4, 4, 6, 1, 4, 8, 2, 9, 5, 0, 9, 9]"],"[8, 12, 9, 1, 10, 7, 9, 7, 15, 9, 8, 17, 6, 5, 0, 6, 9, 8, 7, 4, 9]"],[["[2, 0, 8, 4, 1, 5, 7, 9, 4, 0, 3, 6, 4, 2, 9, 1, 5, 5, 3, 6, 3, 0, 4, 1, 3, 3, 7, 8, 4, 9]"],"[0, 0, 10, 2, 7, 1, 4, 1]"],[["[1, 5, 8, 5, 1, 0, 0, 3, 8, 3, 3, 5, 5, 9, 1, 7, 9, 8, 2, 9, 4, 2, 8, 4, 8, 8, 4, 3, 3, 2]"],"[15, 13, 7, 14, 8, 9, 5, 4, 11, 6, 7, 24, 21]"],[["[6, 5, 9, 7, 8, 8, 3, 7, 4, 2, 5, 7, 8, 6, 9, 1, 1, 8, 2, 3, 9, 2, 0, 3, 7, 8, 6, 8, 6, 8]"],"[10, 6, 4, 9, 15, 9, 5, 0, 4, 13]"]],"type":"(list -> list)","name":"080","solution":"(letII (case (flip 0.5) of True => 9 | False => 3) (λk -> (map (λstate -> (letII state#1 (λx -> (+ (- k#3 randnat) (case x#1 of O => state#2 | S => (λn -> randnat)))))) (scanl (λacc x -> (- (inc randnat) (inc acc#2))) 0 (take (+ (+ randnat k#1) randnat) #2)))))","num_train":4},{"ios":[[["[8, 9, 3, 0, 3, 2, 2, 1, 1, 5, 0, 0, 5, 0, 6, 5, 0, 6, 3, 3, 1, 8, 7, 1, 7, 6, 2, 0, 3, 1]"],"[2, 11, 9, 13, 8, 15, 7, 9, 11]"],[["[8, 1, 6, 1, 2, 6, 5, 4, 8, 7, 2, 0, 8, 5, 1, 5, 4, 0, 1, 3, 4, 8, 4, 0, 1, 9, 3, 5, 4, 5]"],"[21, 10, 25, 15, 7, 7, 9, 10]"],[["[0, 7, 0, 8, 6, 9, 1, 5, 8, 9, 7, 7, 8, 7, 9, 2, 7, 3, 7, 4, 7, 0, 1, 2, 0, 1, 3, 3, 5, 6]"],"[7, 18, 20, 20, 20, 20, 21, 30, 25, 29]"],[["[5, 7, 5, 2, 1, 6, 1, 7, 6, 8, 2, 3, 3, 5, 3, 2, 8, 7, 2, 9, 1, 8, 0, 1, 1, 2, 5, 6, 3, 4]"],"[3, 62, 10, 15, 23, 14, 16, 16, 17, 10, 14]"],[["[9, 6, 9, 5, 9, 5, 0, 3, 4, 9, 0, 2, 5, 9, 0, 0, 8, 0, 0, 7, 6, 1, 0, 3, 8, 3, 2, 8, 3, 9]"],"[3, 17, 16, 8, 14, 12, 17, 11]"],[["[9, 1, 2, 7, 0, 7, 3, 3, 5, 9, 2, 4, 0, 7, 1, 7, 9, 7, 5, 0, 3, 8, 8, 9, 5, 6, 5, 0, 8, 3]"],"[17, 14, 15, 12, 22, 20, 14, 21, 19, 20]"],[["[3, 2, 4, 7, 7, 1, 8, 3, 9, 3, 0, 1, 2, 3, 4, 8, 2, 8, 0, 0, 5, 1, 2, 8, 4, 7, 4, 0, 3, 2]"],"[10, 2, 8, 7, 7, 9, 9, 12, 14, 22, 16, 27, 16, 6, 11, 13, 13, 9, 3]"],[["[3, 5, 8, 9, 9, 3, 6, 6, 1, 1, 2, 0, 9, 7, 5, 1, 1, 8, 3, 2, 5, 6, 4, 4, 2, 7, 2, 4, 6, 2]"],"[2, 3, 13, 14, 14, 27, 10, 20, 10, 13, 12, 6]"]],"type":"(list -> list)","name":"081","solution":"(letII (letII randnat (λx -> (case x#1 of O => 7 | S => (λn -> x#2)))) (λk -> (map (λstate -> (letII state#1 (λx -> (+ state#2 randnat)))) (scanl (λacc x -> (inc (case randnat of O => (+ randnat x#1) | S => (λn -> acc#3)))) 0 (take (+ randnat 8) #2)))))","num_train":4},{"ios":[[["[2, 1, 0, 7, 8, 4, 9, 8, 8, 4, 0, 5, 0, 7, 2, 0, 0, 0, 8, 6, 2, 0, 4, 3, 7, 0, 2, 2, 1, 2]"],"[0, 0, 0, 13, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"],[["[1, 3, 2, 1, 4, 8, 8, 0, 1, 5, 0, 6, 7, 5, 5, 0, 9, 5, 7, 5, 5, 7, 1, 9, 2, 2, 3, 5, 8, 9]"],"[8, 0, 0, 8, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"],[["[1, 0, 6, 0, 1, 4, 4, 6, 7, 5, 5, 7, 4, 4, 5, 5, 4, 6, 2, 0, 0, 2, 6, 0, 0, 7, 7, 1, 6, 5]"],"[0, 0, 2, 6, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1]"],[["[7, 2, 6, 0, 4, 1, 2, 1, 7, 6, 3, 7, 1, 0, 9, 2, 6, 8, 8, 4, 3, 9, 9, 9, 1, 3, 8, 5, 0, 0]"],"[0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0]"],[["[1, 1, 5, 3, 2, 4, 5, 4, 7, 5, 4, 1, 7, 9, 3, 0, 5, 7, 7, 6, 3, 1, 4, 6, 1, 0, 7, 0, 7, 6]"],"[0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 6, 0]"],[["[8, 2, 1, 4, 7, 5, 1, 4, 7, 8, 8, 1, 8, 3, 3, 1, 1, 6, 3, 5, 9, 9, 8, 9, 1, 4, 2, 1, 5, 5]"],"[0, 0, 0, 0, 2, 0, 0, 0, 2, 8, 0, 0, 1, 0, 0, 3]"],[["[1, 0, 6, 0, 7, 7, 5, 0, 2, 6, 4, 4, 8, 2, 1, 2, 2, 8, 0, 4, 5, 1, 1, 2, 3, 0, 2, 8, 3, 8]"],"[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2]"],[["[2, 8, 8, 4, 1, 1, 8, 0, 1, 8, 2, 0, 5, 4, 9, 7, 8, 7, 5, 8, 9, 6, 1, 6, 2, 0, 2, 4, 3, 0]"],"[10, 0, 0, 36, 1, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]"]],"type":"(list -> list)","name":"082","solution":"(letII (letII randnat (λx -> (case randnat of O => 9 | S => (λn -> n#1)))) (λk -> (map (λstate -> (- (- randnat (+ randnat randnat)) state#1)) (scanl (λacc x -> (case acc#2 of O => (case (flip 0.2) of True => x#1 | False => acc#2) | S => (λn -> (inc randnat)))) 0 (take (+ 8 (case k#1 of O => k#1 | S => (λn -> 8))) #2)))))","num_train":4},{"ios":[[["[6, 4, 5, 3, 8, 4, 4, 1, 5, 5, 2, 3, 6, 3, 2, 5, 7, 3, 9, 0, 2, 1, 4, 1, 5, 0, 4, 6, 5, 2]"],"[2, 7, 4, 5]"],[["[6, 5, 6, 7, 9, 7, 3, 2, 9, 7, 0, 2, 3, 4, 9, 6, 4, 4, 8, 9, 8, 4, 1, 9, 2, 7, 9, 6, 1, 2]"],"[16, 18, 12, 4, 11, 1]"],[["[8, 0, 3, 2, 6, 9, 6, 2, 7, 0, 4, 5, 9, 3, 5, 1, 3, 2, 9, 1, 6, 6, 9, 3, 1, 2, 7, 9, 9, 5]"],"[10, 7]"],[["[1, 0, 4, 6, 3, 0, 3, 8, 3, 6, 1, 6, 9, 5, 0, 7, 8, 0, 6, 9, 0, 8, 6, 1, 1, 4, 6, 6, 6, 4]"],"[8, 15, 10, 3]"],[["[3, 1, 8, 0, 1, 2, 3, 2, 7, 1, 1, 6, 6, 3, 5, 7, 7, 3, 8, 7, 6, 8, 6, 2, 9, 8, 1, 8, 0, 4]"],"[11, 0, 8]"],[["[4, 2, 0, 1, 3, 5, 4, 4, 8, 9, 1, 0, 1, 4, 3, 9, 8, 0, 7, 7, 6, 0, 4, 1, 6, 8, 2, 0, 1, 5]"],"[13, 11, 13]"],[["[2, 6, 5, 0, 8, 6, 9, 9, 7, 9, 9, 3, 0, 1, 1, 7, 1, 4, 4, 8, 5, 0, 9, 8, 1, 2, 8, 6, 2, 6]"],"[2, 10, 4, 6, 10, 3, 7, 7]"],[["[9, 1, 1, 5, 0, 4, 8, 6, 5, 1, 7, 8, 9, 2, 9, 9, 6, 3, 0, 7, 7, 0, 6, 0, 5, 5, 7, 5, 6, 9]"],"[10, 13]"]],"type":"(list -> list)","name":"083","solution":"(letII (letII randnat (λx -> (inc x#1))) (λk -> (map (λstate -> (+ state#1 randnat)) (scanl (λacc x -> (- 7 (inc (case (flip 0.7) of True => randnat | False => acc#2)))) 0 (take (letII 6 (λx -> (inc (letII (- randnat 6) (λx -> (case randnat of O => randnat | S => (λn -> k#4))))))) #2)))))","num_train":4},{"ios":[[["[7, 8, 0, 5, 4, 7, 1, 7, 5, 8, 4, 0, 7, 4, 0, 1, 6, 7, 1, 4, 7, 2, 2, 0, 5, 8, 6, 5, 8, 4]"],"[4, 9, 15, 11, 4, 1, 4, 3, 9, 1, 1, 9, 5, 2, 4, 6, 2, 6]"],[["[8, 0, 9, 4, 3, 7, 6, 0, 3, 7, 4, 7, 0, 8, 2, 9, 9, 7, 2, 4, 8, 5, 9, 3, 8, 5, 0, 8, 4, 5]"],"[7, 1, 4, 3, 4, 3, 4, 5, 1, 8, 1, 1, 1, 4, 1, 34, 5]"],[["[9, 3, 3, 3, 3, 4, 8, 0, 2, 2, 1, 0, 4, 6, 6, 5, 3, 0, 4, 6, 3, 9, 0, 7, 9, 5, 0, 2, 3, 0]"],"[2, 4, 2, 7, 5, 4, 6, 2, 5, 1, 9, 17, 2, 3, 4, 4, 4]"],[["[3, 0, 6, 8, 6, 1, 8, 2, 9, 1, 2, 8, 0, 1, 1, 3, 8, 0, 2, 0, 5, 8, 3, 3, 5, 5, 3, 3, 7, 9]"],"[2, 7, 1, 5, 4, 1, 7, 1, 1, 1, 2, 6, 4, 1, 5, 7]"],[["[3, 6, 9, 6, 4, 4, 2, 9, 0, 1, 7, 7, 0, 7, 5, 4, 5, 4, 1, 8, 0, 0, 9, 2, 6, 2, 7, 1, 0, 8]"],"[3, 1, 4, 3, 8, 5, 5, 5, 1, 1, 8, 1, 4, 5]"],[["[9, 7, 1, 0, 8, 6, 9, 2, 2, 1, 1, 4, 2, 6, 1, 9, 5, 1, 8, 9, 3, 2, 7, 8, 6, 8, 0, 4, 8, 8]"],"[3, 4, 7, 1, 10, 9, 10, 2, 4, 3, 2, 2, 5, 7, 13, 3, 3, 1, 2, 2, 10, 2, 2, 12]"],[["[3, 4, 3, 9, 0, 4, 3, 2, 1, 7, 5, 4, 5, 6, 8, 2, 9, 2, 1, 0, 7, 0, 9, 3, 7, 8, 4, 2, 3, 5]"],"[3, 2, 1, 1, 7, 5, 4, 1, 1, 3, 5, 3, 9, 3, 5, 3, 1]"],[["[7, 6, 8, 8, 1, 2, 7, 2, 6, 3, 6, 1, 3, 6, 7, 0, 5, 9, 1, 5, 0, 1, 3, 5, 7, 1, 8, 4, 1, 6]"],"[14, 11, 5, 3, 1, 4, 5, 2, 5, 15, 1, 5, 1, 5, 2, 4, 6]"]],"type":"(list -> list)","name":"084","solution":"(letII (case (flip 0.2) of True => randnat | False => 8) (λk -> (map (λstate -> (letII k#2 (λx -> (inc (case x#1 of O => state#2 | S => (λn -> randnat)))))) (scanl (λacc x -> (letII acc#2 (λx -> (case (letII x#2 (λx -> (+ (case x#1 of O => randnat | S => (λn -> n#1)) x#2))) of O => x#1 | S => (λn -> randnat))))) 0 (take (+ (+ k#1 k#1) randnat) #2)))))","num_train":4},{"ios":[[["[0, 5, 0, 9, 6, 4, 9, 6, 5, 9, 9, 4, 6, 0, 8, 1, 7, 7, 1, 5, 5, 2, 5, 8, 7, 2, 6, 5, 0, 4]"],"[9, 0, 14, 2, 0]"],[["[3, 5, 2, 5, 3, 6, 6, 1, 4, 2, 7, 0, 5, 9, 9, 1, 6, 1, 7, 5, 4, 0, 7, 1, 1, 8, 0, 4, 6, 6]"],"[14, 7, 0, 4, 0]"],[["[9, 7, 6, 1, 8, 2, 6, 0, 3, 3, 4, 6, 0, 8, 4, 7, 3, 9, 8, 3, 4, 7, 5, 0, 8, 8, 6, 6, 5, 6]"],"[12, 11, 4, 2, 1]"],[["[6, 9, 5, 1, 7, 0, 0, 8, 1, 2, 9, 0, 9, 0, 4, 1, 9, 1, 7, 6, 2, 1, 4, 3, 8, 1, 3, 3, 7, 7]"],"[2, 1, 0, 2, 0]"],[["[4, 9, 8, 4, 7, 3, 8, 7, 0, 3, 0, 9, 4, 5, 3, 8, 1, 0, 0, 0, 1, 9, 5, 5, 1, 8, 6, 3, 5, 1]"],"[3, 0, 6, 3, 0]"],[["[1, 9, 6, 1, 7, 1, 8, 4, 0, 1, 0, 3, 3, 3, 3, 4, 9, 8, 5, 3, 5, 2, 1, 1, 9, 6, 3, 6, 9, 3]"],"[0, 4, 0, 1, 10]"],[["[4, 3, 7, 1, 1, 7, 5, 2, 9, 2, 1, 2, 2, 7, 1, 2, 4, 3, 9, 5, 3, 0, 2, 5, 8, 9, 8, 8, 4, 3]"],"[7, 1, 10, 2, 9]"],[["[5, 6, 3, 5, 9, 5, 3, 1, 7, 7, 6, 5, 7, 1, 2, 9, 3, 3, 8, 0, 4, 1, 4, 4, 9, 3, 9, 5, 7, 9]"],"[1, 8, 0, 2, 1]"]],"type":"(list -> list)","name":"085","solution":"(letII (- 3 (letII 2 (λx -> (case (flip 0.3) of True => 8 | False => randnat)))) (λk -> (map (λstate -> (case (> randnat randnat) of True => (case randnat of O => randnat | S => (λn -> state#2)) | False => randnat)) (scanl (λacc x -> (- (case acc#2 of O => (+ k#3 randnat) | S => (λn -> randnat)) randnat)) 0 (take (letII 6 (λx -> (case x#1 of O => randnat | S => (λn -> n#1)))) #2)))))","num_train":4},{"ios":[[["[1, 7, 7, 1, 8, 2, 6, 0, 3, 5, 0, 2, 4, 8, 3, 7, 7, 9, 9, 4, 2, 5, 7, 5, 4, 3, 4, 3, 3, 3]"],"[3, 2]"],[["[6, 3, 1, 2, 4, 2, 3, 0, 0, 0, 8, 1, 0, 5, 0, 5, 9, 8, 7, 7, 2, 1, 2, 9, 3, 2, 8, 7, 9, 7]"],"[6, 9]"],[["[0, 8, 8, 0, 6, 9, 5, 2, 4, 9, 4, 0, 8, 5, 6, 6, 6, 0, 7, 4, 3, 5, 7, 8, 6, 7, 1, 8, 2, 1]"],"[3, 8, 0, 0, 2, 6, 3, 8, 0, 1, 10, 1, 0, 6, 9, 6, 15, 18, 0, 0, 3, 6, 2, 5, 3, 9]"],[["[3, 4, 3, 4, 0, 1, 0, 4, 2, 1, 8, 4, 1, 1, 2, 7, 6, 8, 8, 4, 0, 6, 5, 5, 7, 3, 9, 5, 8, 4]"],"[3, 2]"],[["[5, 6, 2, 3, 9, 9, 0, 0, 3, 5, 3, 8, 0, 4, 8, 1, 1, 7, 7, 7, 6, 6, 8, 7, 9, 7, 3, 7, 7, 3]"],"[4, 6, 2, 0, 4, 11, 14]"],[["[3, 9, 6, 7, 4, 6, 2, 2, 0, 6, 6, 3, 9, 2, 4, 2, 1, 5, 0, 8, 4, 8, 1, 7, 2, 2, 5, 4, 8, 9]"],"[3, 6, 9, 2, 10, 1]"],[["[1, 0, 1, 3, 8, 2, 1, 0, 6, 2, 8, 3, 6, 5, 8, 4, 2, 4, 7, 5, 8, 4, 1, 9, 0, 5, 5, 1, 3, 1]"],"[10, 6, 5, 1]"],[["[6, 0, 3, 7, 5, 1, 8, 1, 1, 3, 5, 3, 3, 3, 9, 0, 4, 6, 9, 7, 6, 6, 9, 8, 6, 4, 0, 8, 3, 8]"],"[3, 6, 3, 6, 9]"]],"type":"(list -> list)","name":"086","solution":"(letII (case (== 5 randnat) of True => 8 | False => randnat) (λk -> (map (λstate -> (case (flip 0.5) of True => state#1 | False => randnat)) (scanl (λacc x -> (letII x#1 (λx -> (case randnat of O => x#2 | S => (λn -> (+ acc#4 3)))))) 0 (take (letII (case (flip 0.6) of True => randnat | False => randnat) (λx -> (inc (letII randnat (λx -> (inc randnat)))))) #2)))))","num_train":4},{"ios":[[["[2, 3, 7, 9, 1, 1, 2, 2, 1, 8, 5, 9, 4, 8, 6, 8, 5, 5, 1, 0, 3, 3, 7, 4, 6, 7, 6, 5, 7, 0]"],"[2, 5, 2, 9, 10, 9, 13, 16]"],[["[4, 1, 6, 4, 5, 2, 5, 2, 8, 7, 9, 0, 2, 1, 3, 8, 5, 5, 0, 5, 9, 9, 3, 4, 7, 8, 3, 0, 2, 3]"],"[1, 9, 7, 6, 10, 20, 17, 32]"],[["[7, 8, 5, 9, 5, 3, 4, 6, 7, 9, 4, 9, 0, 2, 1, 5, 2, 6, 1, 4, 5, 7, 9, 2, 0, 1, 0, 9, 2, 5]"],"[18, 4, 4, 8, 8, 11, 11, 6]"],[["[6, 7, 5, 6, 9, 5, 4, 0, 7, 8, 9, 0, 8, 9, 3, 2, 3, 9, 7, 4, 9, 7, 5, 9, 0, 8, 5, 6, 2, 9]"],"[3, 5, 5, 9, 7, 13, 9, 12]"],[["[5, 5, 4, 8, 6, 2, 4, 1, 6, 5, 1, 9, 5, 5, 4, 5, 2, 6, 6, 9, 9, 2, 7, 7, 8, 9, 9, 8, 2, 7]"],"[12, 10, 14, 13, 18, 12, 20, 12]"],[["[2, 2, 9, 4, 9, 5, 1, 6, 4, 2, 6, 3, 1, 3, 5, 5, 5, 5, 6, 9, 7, 7, 2, 0, 1, 4, 4, 5, 5, 4]"],"[17, 6, 13, 11, 15, 15, 7, 3]"],[["[9, 4, 4, 1, 6, 0, 4, 7, 4, 3, 9, 2, 8, 9, 1, 9, 6, 3, 9, 6, 8, 4, 2, 2, 7, 9, 7, 6, 6, 6]"],"[8, 13, 8, 7, 3, 7, 6, 13]"],[["[0, 8, 2, 5, 4, 4, 1, 7, 7, 6, 1, 6, 0, 9, 2, 5, 1, 7, 6, 2, 2, 4, 5, 4, 3, 4, 2, 4, 2, 3]"],"[5, 10, 21, 9, 14, 9, 19, 12]"]],"type":"(list -> list)","name":"087","solution":"(letII (inc 5) (λk -> (map (λstate -> (+ (inc randnat) (+ randnat (letII state#1 (λx -> (- x#1 randnat)))))) (scanl (λacc x -> (letII (inc acc#2) (λx -> (case (flip 0.7) of True => x#1 | False => x#1)))) 0 (take (inc (+ 1 k#1)) #2)))))","num_train":4},{"ios":[[["[0, 7, 2, 5, 5, 5, 5, 8, 5, 1, 5, 8, 6, 7, 4, 7, 9, 1, 1, 0, 8, 0, 0, 9, 5, 1, 2, 3, 9, 1]"],"[3, 2, 7]"],[["[3, 4, 2, 8, 8, 5, 9, 5, 3, 9, 2, 1, 2, 6, 8, 4, 7, 9, 6, 0, 3, 0, 5, 8, 4, 0, 3, 7, 3, 1]"],"[17, 10, 4, 6, 15, 13]"],[["[6, 2, 0, 0, 9, 1, 7, 2, 3, 0, 9, 6, 6, 2, 3, 4, 8, 8, 8, 5, 4, 6, 4, 1, 5, 8, 0, 9, 0, 7]"],"[2, 12, 5]"],[["[7, 9, 5, 0, 4, 7, 2, 8, 9, 2, 9, 0, 6, 5, 0, 5, 2, 6, 1, 6, 5, 7, 8, 5, 0, 4, 4, 9, 0, 5]"],"[13, 4, 6, 7, 9, 15, 4]"],[["[3, 5, 5, 1, 4, 0, 7, 5, 8, 8, 8, 1, 5, 4, 5, 9, 5, 7, 3, 0, 9, 3, 7, 0, 4, 6, 5, 1, 9, 8]"],"[12, 4]"],[["[5, 6, 3, 1, 3, 4, 2, 0, 1, 4, 0, 8, 7, 3, 7, 8, 2, 2, 7, 1, 7, 2, 5, 4, 3, 3, 9, 5, 8, 1]"],"[3, 3, 4, 9, 6, 4, 4, 2, 2, 3]"],[["[6, 5, 3, 5, 0, 2, 2, 6, 2, 9, 4, 1, 0, 4, 1, 5, 0, 7, 2, 5, 1, 3, 8, 6, 5, 3, 3, 8, 0, 3]"],"[6, 4, 6, 4, 5]"],[["[5, 1, 6, 0, 4, 3, 5, 6, 2, 6, 2, 6, 3, 2, 5, 0, 2, 0, 6, 3, 4, 8, 8, 7, 3, 9, 7, 0, 0, 6]"],"[2, 2, 13, 6, 9, 3, 21]"]],"type":"(list -> list)","name":"088","solution":"(letII (inc (letII 0 (λx -> (case (flip 0.8) of True => x#1 | False => (case (flip 0.7) of True => 2 | False => x#1))))) (λk -> (map (λstate -> (+ (letII state#1 (λx -> (inc randnat))) k#2)) (scanl (λacc x -> (inc (letII k#3 (λx -> (- acc#3 (inc acc#3)))))) 0 (take (inc randnat) #2)))))","num_train":4},{"ios":[[["[8, 3, 0, 5, 3, 0, 1, 8, 0, 6, 9, 6, 5, 7, 0, 7, 8, 6, 3, 6, 8, 7, 5, 5, 9, 0, 1, 6, 9, 9]"],"[4, 6, 20, 35, 36, 4, 43, 46]"],[["[8, 2, 6, 3, 4, 7, 4, 8, 1, 7, 2, 2, 8, 4, 7, 2, 6, 0, 3, 9, 9, 5, 5, 1, 0, 3, 3, 3, 2, 3]"],"[10, 17, 22, 12, 3, 4, 30]"],[["[7, 6, 4, 8, 0, 2, 9, 6, 5, 3, 9, 8, 3, 2, 9, 7, 1, 0, 4, 2, 0, 6, 4, 4, 2, 0, 3, 2, 7, 5]"],"[3, 0, 28, 0, 32, 37]"],[["[4, 2, 1, 8, 5, 9, 8, 0, 3, 8, 0, 1, 5, 9, 9, 5, 0, 0, 4, 0, 5, 5, 6, 6, 4, 4, 0, 0, 5, 5]"],"[6, 4, 13, 8, 11, 22, 21]"],[["[0, 9, 0, 7, 4, 9, 2, 7, 3, 6, 5, 2, 7, 2, 6, 1, 0, 4, 1, 9, 0, 4, 4, 7, 1, 7, 7, 6, 2, 8]"],"[4, 12, 12, 20, 24, 25, 37, 40, 41]"],[["[6, 7, 7, 7, 1, 1, 0, 6, 3, 9, 8, 2, 2, 1, 3, 4, 6, 3, 7, 9, 8, 0, 5, 6, 4, 0, 2, 0, 8, 5]"],"[3, 5, 7, 8, 4, 4, 24, 28, 39, 29, 45, 47, 4, 53, 59, 73, 84]"],[["[1, 5, 9, 8, 6, 5, 8, 5, 8, 6, 0, 4, 3, 2, 0, 4, 8, 5, 2, 0, 3, 7, 0, 5, 4, 5, 3, 1, 0, 4]"],"[1, 7, 12, 0, 11, 4, 0, 27, 29, 29, 32, 0, 40]"],[["[1, 5, 7, 8, 1, 9, 9, 5, 2, 4, 0, 1, 6, 9, 4, 2, 6, 0, 6, 8, 3, 8, 1, 2, 4, 6, 8, 5, 8, 2]"],"[18, 19, 17, 33, 34, 32, 0]"]],"type":"(list -> list)","name":"089","solution":"(letII (letII 3 (λx -> (inc x#1))) (λk -> (map (λstate -> (- (case (flip 0.2) of True => k#2 | False => state#1) (- randnat k#2))) (scanl (λacc x -> (inc (+ acc#2 randnat))) 0 (take (+ randnat 6) #2)))))","num_train":4},{"ios":[[["[7, 9, 9, 2, 5, 0, 3, 5, 8, 0, 2, 5, 6, 7, 4, 5, 5, 5, 2, 3, 7, 8, 6, 3, 4, 3, 5, 1, 2, 9]"],"[1, 10, 9, 17, 11, 13, 29, 28, 32, 27]"],[["[4, 7, 8, 8, 1, 9, 9, 5, 8, 8, 7, 8, 8, 3, 4, 2, 1, 3, 6, 9, 2, 0, 7, 7, 6, 6, 5, 4, 0, 1]"],"[11, 14, 22, 24, 32, 54, 57, 59, 65, 74, 103, 92]"],[["[3, 7, 3, 4, 4, 6, 7, 7, 5, 2, 0, 0, 4, 7, 4, 0, 8, 5, 1, 9, 1, 5, 6, 7, 2, 1, 9, 7, 9, 1]"],"[6, 1, 0, 0, 0, 0, 14, 26, 28, 12, 21, 30, 30, 28, 26, 24]"],[["[9, 4, 1, 1, 0, 5, 8, 6, 4, 5, 0, 4, 3, 2, 2, 7, 3, 2, 3, 7, 6, 3, 1, 7, 6, 3, 2, 9, 4, 6]"],"[8, 0, 4, 12, 25, 25, 37, 40, 43, 31]"],[["[2, 3, 5, 0, 1, 6, 1, 5, 5, 2, 9, 6, 1, 4, 8, 3, 9, 1, 0, 6, 7, 8, 3, 6, 6, 3, 8, 8, 1, 5]"],"[0, 4, 0, 0, 4, 14, 11, 20, 14, 28, 25, 25, 30, 36, 40, 39]"],[["[9, 0, 3, 8, 6, 1, 8, 7, 5, 1, 2, 4, 0, 9, 3, 5, 2, 7, 0, 0, 6, 1, 9, 7, 8, 9, 3, 0, 0, 4]"],"[0, 9, 4, 15, 13, 27, 26, 16, 19, 26]"],[["[0, 1, 8, 1, 4, 8, 1, 7, 1, 0, 9, 4, 5, 8, 3, 8, 7, 4, 7, 1, 0, 3, 5, 7, 7, 6, 1, 6, 5, 6]"],"[0, 2, 17, 9, 12, 12, 9, 14, 19, 33, 28, 21]"],[["[6, 7, 1, 7, 4, 1, 1, 0, 1, 4, 9, 5, 9, 0, 6, 9, 8, 3, 8, 9, 5, 7, 0, 0, 0, 7, 4, 2, 8, 2]"],"[8, 14, 0, 9, 10, 7, 13, 18, 17, 27, 26, 37, 39, 46, 53, 51, 64, 79, 91, 91]"]],"type":"(list -> list)","name":"090","solution":"(letII (+ randnat (letII 7 (λx -> (inc (letII randnat (λx -> (case (flip 0.8) of True => x#2 | False => randnat))))))) (λk -> (map (λstate -> state#1) (scanl (λacc x -> (letII (case (flip 0.3) of True => randnat | False => acc#2) (λx -> (- (+ (letII k#4 (λx -> (+ randnat randnat))) acc#3) randnat)))) 0 (take (letII k#1 (λx -> (inc x#1))) #2)))))","num_train":4},{"ios":[[["[1, 9, 0, 8, 3, 2, 1, 9, 7, 0, 3, 1, 5, 1, 8, 9, 8, 2, 7, 4, 4, 0, 6, 9, 4, 7, 4, 8, 9, 5]"],"[4, 4, 4, 4, 6, 6, 6, 4, 4, 6]"],[["[3, 3, 3, 4, 1, 5, 9, 3, 1, 9, 6, 6, 9, 1, 0, 1, 8, 3, 3, 6, 3, 0, 3, 5, 4, 8, 5, 0, 7, 8]"],"[4, 5, 5, 6, 4, 6, 4, 4, 4, 4, 4, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 6]"],[["[6, 6, 8, 8, 4, 8, 9, 5, 7, 6, 9, 5, 4, 9, 6, 0, 4, 5, 2, 4, 0, 5, 1, 0, 9, 4, 1, 8, 0, 2]"],"[4, 6, 6, 6, 6, 6, 6, 6, 6, 4, 5, 4]"],[["[9, 7, 9, 5, 5, 6, 1, 4, 3, 7, 5, 4, 8, 1, 0, 5, 7, 2, 0, 6, 8, 0, 9, 3, 3, 2, 2, 1, 9, 1]"],"[4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 6, 4]"],[["[0, 3, 6, 0, 5, 3, 9, 5, 1, 1, 5, 7, 1, 5, 0, 6, 5, 1, 8, 8, 8, 5, 1, 0, 8, 4, 9, 9, 5, 1]"],"[4, 4, 4, 4, 4, 4, 6, 4, 4]"],[["[0, 7, 5, 6, 5, 6, 9, 8, 9, 6, 0, 3, 5, 7, 8, 1, 8, 0, 1, 8, 4, 3, 5, 7, 1, 5, 5, 2, 2, 9]"],"[6, 6, 4, 4, 4, 4, 4, 4, 4, 4]"],[["[4, 3, 2, 7, 4, 8, 6, 7, 2, 8, 9, 5, 0, 6, 7, 3, 1, 9, 0, 9, 1, 4, 0, 1, 5, 5, 5, 7, 6, 6]"],"[4, 4, 4, 4, 6, 4, 4, 4, 6, 5, 4, 4, 6]"],[["[8, 6, 4, 7, 2, 4, 1, 0, 9, 1, 0, 2, 5, 8, 9, 6, 4, 1, 3, 1, 2, 9, 9, 8, 8, 9, 0, 1, 0, 5]"],"[6, 6, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 6, 4, 4, 4, 6, 4, 6, 4, 4, 4, 4, 5, 4, 6, 5, 6, 6, 6]"]],"type":"(list -> list)","name":"091","solution":"(letII (+ (inc randnat) (+ randnat randnat)) (λk -> (map (λstate -> (+ 4 state#1)) (scanl (λacc x -> (- 2 (letII randnat (λx -> (- x#1 acc#3))))) 0 (take k#1 #2)))))","num_train":4},{"ios":[[["[5, 5, 3, 0, 3, 4, 7, 9, 8, 4, 3, 4, 1, 6, 6, 7, 9, 9, 8, 3, 0, 4, 6, 7, 0, 2, 5, 4, 4, 5]"],"[5, 13]"],[["[4, 0, 0, 4, 4, 6, 4, 2, 8, 2, 6, 7, 8, 1, 7, 1, 5, 8, 1, 5, 1, 9, 9, 8, 7, 5, 5, 1, 4, 4]"],"[15, 16]"],[["[1, 5, 1, 7, 2, 6, 6, 7, 4, 9, 3, 7, 1, 9, 4, 1, 4, 7, 7, 3, 7, 0, 9, 7, 6, 3, 6, 6, 1, 4]"],"[10, 9]"],[["[1, 9, 4, 3, 4, 6, 5, 7, 2, 5, 0, 0, 4, 1, 7, 1, 6, 8, 2, 7, 8, 8, 0, 1, 9, 8, 3, 0, 4, 0]"],"[11, 14, 25, 11]"],[["[9, 0, 7, 1, 1, 7, 6, 9, 0, 1, 7, 1, 7, 4, 8, 5, 3, 3, 8, 0, 3, 7, 2, 0, 4, 7, 4, 8, 3, 7]"],"[8, 17, 26, 15, 24, 23, 23, 22, 8, 6, 10, 5, 12, 8, 5, 11, 15, 12, 10, 12, 9, 4, 6, 10, 20, 9]"],[["[6, 3, 9, 8, 6, 1, 2, 5, 2, 0, 7, 0, 5, 3, 2, 6, 4, 2, 1, 7, 8, 4, 1, 7, 7, 4, 2, 7, 4, 5]"],"[11, 9]"],[["[4, 8, 8, 0, 4, 0, 1, 5, 0, 7, 8, 1, 6, 6, 9, 2, 6, 2, 0, 7, 0, 9, 1, 1, 3, 7, 0, 6, 3, 2]"],"[20, 5, 17, 7, 3, 18, 13, 8, 1, 6]"],[["[4, 9, 3, 1, 6, 6, 6, 1, 2, 5, 5, 9, 6, 0, 3, 9, 7, 0, 9, 3, 4, 0, 9, 6, 4, 8, 4, 6, 4, 3]"],"[12, 23]"]],"type":"(list -> list)","name":"092","solution":"(letII (letII randnat (λx -> (+ x#1 x#1))) (λk -> (map (λstate -> (+ randnat (+ randnat state#1))) (scanl (λacc x -> (inc (letII (- x#1 acc#2) (λx -> (case (flip 0.1) of True => randnat | False => 2))))) 0 (take (case k#1 of O => randnat | S => (λn -> k#2)) #2)))))","num_train":4},{"ios":[[["[6, 0, 5, 9, 1, 9, 7, 6, 2, 9, 8, 9, 8, 6, 6, 1, 7, 3, 7, 4, 0, 7, 2, 4, 4, 2, 0, 7, 8, 3]"],"[1, 4, 1, 10, 2, 7, 2, 2, 9, 15, 12, 0, 1]"],[["[1, 5, 2, 0, 6, 1, 3, 1, 5, 8, 0, 6, 2, 3, 5, 9, 5, 3, 8, 0, 0, 9, 5, 2, 0, 0, 8, 2, 9, 0]"],"[15, 0, 5, 0, 4, 4, 4, 2, 4, 9, 1, 4, 2, 4, 1]"],[["[4, 7, 0, 3, 6, 8, 7, 4, 8, 7, 6, 0, 0, 5, 8, 8, 2, 3, 6, 0, 4, 0, 6, 4, 9, 7, 5, 5, 2, 6]"],"[1, 1, 3, 1, 1, 3, 1, 5, 5]"],[["[0, 6, 4, 0, 0, 6, 4, 7, 4, 5, 6, 7, 0, 4, 3, 6, 3, 5, 6, 0, 5, 1, 3, 8, 2, 8, 5, 6, 5, 7]"],"[0, 6]"],[["[6, 6, 0, 4, 6, 9, 0, 6, 9, 1, 6, 5, 5, 1, 8, 3, 5, 6, 9, 3, 4, 7, 6, 3, 3, 6, 4, 1, 7, 2]"],"[29, 4, 0, 1, 2, 1, 0, 0, 2, 6, 0, 0, 1, 8, 1, 1, 6]"],[["[0, 7, 5, 4, 9, 2, 2, 7, 9, 0, 6, 7, 0, 7, 2, 3, 5, 5, 4, 3, 3, 6, 3, 6, 4, 4, 8, 7, 1, 3]"],"[1, 3, 10, 6, 3, 4, 0, 1, 4, 1]"],[["[8, 7, 1, 2, 9, 2, 3, 4, 6, 0, 0, 4, 6, 7, 5, 0, 2, 0, 9, 5, 7, 2, 9, 7, 1, 3, 1, 0, 7, 9]"],"[1, 12, 0, 4, 5, 2, 7, 3]"],[["[5, 2, 0, 4, 2, 0, 9, 7, 4, 2, 7, 9, 7, 8, 1, 4, 9, 5, 7, 3, 1, 1, 4, 0, 6, 3, 2, 4, 0, 0]"],"[9, 0, 4, 9, 0, 3, 2, 0, 1, 1, 2, 7, 0, 5]"]],"type":"(list -> list)","name":"093","solution":"(letII (letII randnat (λx -> (+ randnat x#1))) (λk -> (map (λstate -> state#1) (scanl (λacc x -> (case acc#2 of O => randnat | S => (λn -> randnat))) 0 (take (letII k#1 (λx -> (+ k#2 randnat))) #2)))))","num_train":4},{"ios":[[["[0, 3, 5, 9, 5, 2, 2, 8, 3, 2, 5, 5, 7, 2, 8, 0, 8, 5, 4, 2, 0, 7, 1, 5, 9, 1, 9, 9, 1, 0]"],"[7, 0, 3]"],[["[9, 0, 6, 2, 9, 0, 0, 6, 4, 5, 8, 6, 1, 4, 4, 1, 5, 6, 4, 7, 9, 7, 9, 0, 9, 7, 8, 2, 2, 5]"],"[0, 7, 5, 1, 7, 7]"],[["[8, 9, 3, 6, 0, 4, 6, 9, 6, 0, 2, 7, 8, 2, 5, 5, 0, 4, 9, 5, 7, 5, 5, 9, 1, 2, 8, 7, 7, 1]"],"[2, 5]"],[["[3, 1, 1, 3, 7, 5, 8, 0, 7, 9, 3, 8, 0, 8, 3, 0, 1, 1, 3, 6, 2, 6, 7, 2, 5, 3, 7, 5, 8, 1]"],"[5, 1, 7, 4]"],[["[6, 4, 2, 2, 8, 9, 0, 6, 4, 4, 4, 1, 2, 5, 3, 5, 7, 8, 1, 0, 2, 8, 8, 2, 3, 7, 7, 5, 6, 7]"],"[1, 7, 7]"],[["[8, 1, 2, 7, 3, 4, 1, 7, 6, 2, 1, 2, 6, 0, 2, 1, 6, 6, 4, 0, 1, 7, 7, 5, 4, 7, 5, 3, 9, 4]"],"[7, 6]"],[["[0, 5, 2, 9, 9, 9, 0, 0, 0, 0, 3, 8, 3, 4, 4, 7, 3, 6, 6, 5, 1, 7, 9, 6, 7, 9, 6, 9, 7, 0]"],"[7, 3, 0]"],[["[4, 7, 6, 9, 9, 0, 6, 6, 9, 2, 3, 2, 7, 9, 1, 3, 2, 0, 4, 2, 6, 8, 9, 0, 8, 1, 6, 5, 8, 8]"],"[7, 7, 4, 0, 2, 7, 6, 8, 1, 9, 7, 7, 1, 3, 7, 7, 3, 7, 7, 4]"]],"type":"(list -> list)","name":"094","solution":"(letII randnat (λk -> (map (λstate -> (case state#1 of O => 7 | S => (λn -> randnat))) (scanl (λacc x -> (case (flip 0.3) of True => (letII randnat (λx -> (- acc#3 acc#3))) | False => x#1)) 0 (take (letII randnat (λx -> (case (flip 0.6) of True => randnat | False => k#2))) #2)))))","num_train":4},{"ios":[[["[3, 3, 1, 6, 0, 4, 6, 6, 1, 6, 6, 9, 1, 2, 1, 1, 9, 2, 2, 6, 4, 3, 6, 8, 6, 0, 0, 7, 8, 3]"],"[6, 3, 8]"],[["[9, 5, 3, 9, 3, 0, 5, 3, 9, 3, 4, 5, 3, 7, 4, 6, 5, 1, 9, 1, 3, 1, 2, 2, 2, 8, 6, 4, 8, 7]"],"[24, 8]"],[["[3, 2, 4, 4, 5, 3, 9, 7, 1, 2, 0, 9, 8, 1, 9, 9, 9, 5, 7, 6, 7, 8, 0, 7, 6, 5, 8, 9, 4, 2]"],"[6, 4, 3, 8, 3, 2, 3, 4, 5, 7, 8, 6, 7]"],[["[7, 8, 6, 6, 2, 7, 7, 2, 8, 9, 4, 8, 9, 1, 0, 4, 4, 9, 0, 9, 3, 7, 8, 4, 2, 6, 6, 0, 2, 2]"],"[8, 6, 2, 2, 4, 4, 2, 2, 2, 3, 12, 4, 11, 2]"],[["[2, 3, 6, 7, 2, 9, 3, 8, 0, 2, 6, 3, 8, 6, 1, 7, 7, 6, 4, 5, 5, 8, 4, 0, 6, 1, 7, 5, 3, 0]"],"[3, 3, 9, 4, 2, 4, 10, 8, 9, 3, 2, 2, 18, 5, 5, 11, 6, 10, 4, 4, 9, 2, 2, 3, 6, 11, 13, 2]"],[["[8, 5, 1, 8, 8, 3, 7, 7, 6, 7, 1, 5, 2, 3, 7, 1, 5, 7, 2, 4, 1, 6, 6, 2, 7, 1, 6, 7, 1, 4]"],"[4, 5, 3, 6, 12, 7, 6]"],[["[4, 3, 6, 5, 3, 2, 6, 0, 9, 7, 3, 4, 4, 9, 8, 6, 7, 8, 5, 9, 3, 4, 6, 5, 3, 4, 2, 1, 7, 7]"],"[4, 9, 3, 9, 2, 5, 2, 3, 8]"],[["[6, 7, 4, 9, 0, 1, 5, 3, 3, 9, 9, 9, 7, 9, 5, 7, 4, 9, 6, 8, 9, 3, 2, 4, 2, 7, 5, 6, 1, 3]"],"[3, 7, 3, 3, 4, 8, 13, 6, 6, 9, 29, 30, 4, 22]"]],"type":"(list -> list)","name":"095","solution":"(letII (+ (letII 3 (λx -> (- randnat x#1))) randnat) (λk -> (map (λstate -> (inc state#1)) (scanl (λacc x -> (letII 9 (λx -> (inc (case x#2 of O => acc#3 | S => (λn -> randnat)))))) 0 (take (+ (+ randnat randnat) 1) #2)))))","num_train":4},{"ios":[[["[6, 4, 4, 3, 6, 1, 4, 6, 4, 8, 0, 5, 9, 5, 8, 0, 0, 0, 6, 7, 7, 4, 1, 0, 0, 4, 8, 8, 2, 4]"],"[9, 7, 11, 16, 13, 17, 7, 11, 15]"],[["[2, 2, 4, 7, 4, 8, 4, 5, 5, 8, 5, 9, 0, 1, 4, 9, 2, 2, 5, 7, 2, 1, 8, 6, 2, 5, 0, 1, 0, 2]"],"[10, 15, 11, 13, 18, 7, 7]"],[["[1, 5, 1, 3, 8, 8, 0, 6, 3, 9, 2, 8, 3, 4, 4, 1, 7, 9, 8, 6, 5, 9, 0, 7, 0, 7, 1, 3, 8, 7]"],"[22, 11, 11, 9, 11, 17, 12]"],[["[9, 8, 6, 8, 3, 6, 8, 1, 0, 4, 4, 3, 3, 9, 5, 2, 9, 8, 3, 3, 2, 8, 0, 1, 5, 5, 9, 5, 4, 3]"],"[11, 11, 14, 11, 9, 8, 20, 24, 8]"],[["[3, 4, 6, 5, 8, 8, 9, 7, 7, 5, 8, 9, 2, 4, 5, 9, 1, 0, 9, 3, 4, 8, 4, 2, 9, 2, 0, 2, 1, 8]"],"[11, 13, 19, 8, 7, 9, 12, 8, 8]"],[["[0, 2, 9, 5, 5, 2, 4, 4, 3, 9, 1, 0, 6, 8, 5, 0, 5, 6, 8, 3, 8, 2, 1, 3, 8, 5, 2, 2, 4, 4]"],"[9, 7, 18, 20, 9, 11, 11]"],[["[2, 3, 3, 8, 8, 4, 9, 3, 8, 5, 1, 3, 7, 2, 6, 4, 2, 1, 8, 9, 4, 7, 1, 2, 4, 6, 3, 5, 2, 8]"],"[11, 11, 7, 11, 7, 7, 11]"],[["[2, 2, 7, 1, 5, 6, 2, 7, 6, 1, 0, 0, 1, 3, 9, 7, 7, 6, 7, 4, 0, 8, 4, 7, 2, 5, 1, 9, 3, 3]"],"[11, 12, 19, 30, 11, 7, 11]"]],"type":"(list -> list)","name":"096","solution":"(letII (+ (letII 4 (λx -> (- x#1 7))) 9) (λk -> (map (λstate -> (+ 7 state#1)) (scanl (λacc x -> (case (== acc#2 k#3) of True => x#1 | False => (case randnat of O => 4 | S => (λn -> n#1)))) 0 (take (case (flip 0.4) of True => k#1 | False => 7) #2)))))","num_train":4},{"ios":[[["[0, 4, 4, 8, 1, 3, 9, 8, 9, 9, 8, 2, 9, 5, 9, 3, 2, 9, 2, 9, 0, 4, 7, 2, 6, 6, 1, 3, 2, 3]"],"[3, 11, 9]"],[["[3, 5, 3, 1, 9, 8, 3, 1, 6, 6, 8, 3, 1, 5, 5, 1, 3, 7, 6, 7, 8, 4, 0, 6, 7, 9, 0, 7, 2, 3]"],"[1, 4, 3, 9, 19, 10, 7, 8, 16, 10, 29, 22, 16]"],[["[6, 9, 0, 7, 3, 5, 8, 9, 0, 8, 4, 1, 9, 1, 6, 1, 4, 3, 2, 9, 1, 2, 0, 4, 6, 5, 8, 7, 1, 8]"],"[1, 4, 14]"],[["[3, 1, 9, 9, 6, 5, 6, 6, 9, 6, 3, 5, 6, 6, 6, 1, 8, 1, 4, 8, 4, 4, 8, 5, 1, 7, 3, 2, 5, 5]"],"[7, 8, 15]"],[["[5, 1, 4, 3, 1, 2, 5, 8, 0, 8, 3, 2, 3, 6, 3, 4, 6, 8, 3, 6, 1, 1, 7, 7, 4, 2, 8, 1, 5, 2]"],"[2, 7]"],[["[3, 4, 1, 8, 3, 7, 4, 8, 5, 9, 4, 3, 2, 4, 2, 1, 4, 5, 1, 1, 8, 1, 1, 8, 6, 6, 2, 4, 0, 0]"],"[4, 5]"],[["[5, 2, 5, 4, 7, 9, 5, 0, 5, 1, 6, 9, 7, 9, 5, 0, 6, 4, 9, 8, 8, 0, 8, 7, 3, 1, 4, 4, 0, 1]"],"[2, 2, 4, 15]"],[["[4, 3, 8, 7, 0, 7, 4, 5, 9, 6, 3, 2, 3, 6, 2, 0, 4, 9, 0, 9, 6, 8, 9, 7, 0, 3, 0, 4, 2, 2]"],"[11, 0, 18, 9, 6, 19, 5, 6, 7, 8, 11, 14, 8, 6, 0, 5, 0, 7, 12, 19, 5, 12, 18, 4, 10, 14]"]],"type":"(list -> list)","name":"097","solution":"(letII randnat (λk -> (map (λstate -> (letII (inc randnat) (λx -> (+ state#2 (case (flip 0.7) of True => randnat | False => x#1))))) (scanl (λacc x -> (case (+ k#3 k#3) of O => randnat | S => (λn -> (+ acc#3 1)))) 0 (take (+ randnat randnat) #2)))))","num_train":4},{"ios":[[["[9, 6, 2, 7, 3, 8, 8, 5, 8, 3, 8, 5, 1, 6, 0, 3, 3, 1, 4, 6, 8, 5, 3, 7, 2, 0, 5, 3, 9, 5]"],"[0, 29]"],[["[2, 2, 0, 2, 1, 4, 6, 3, 8, 2, 6, 0, 3, 1, 3, 0, 1, 7, 0, 5, 1, 3, 7, 4, 8, 7, 3, 6, 4, 5]"],"[0, 4, 0, 0, 0, 3, 11, 4, 1, 1]"],[["[5, 5, 1, 8, 7, 6, 9, 6, 8, 3, 3, 1, 8, 9, 1, 9, 2, 5, 1, 8, 8, 9, 5, 0, 2, 4, 3, 3, 8, 6]"],"[0, 0, 1, 0, 6, 7]"],[["[3, 5, 9, 3, 6, 7, 1, 3, 1, 5, 2, 2, 2, 0, 9, 9, 3, 4, 8, 0, 3, 1, 4, 6, 0, 3, 6, 2, 0, 8]"],"[0, 0, 16, 0, 0, 1, 0, 2, 0, 0, 4, 3, 2, 0, 0, 0, 8, 6, 15, 12, 0, 2, 2]"],[["[5, 8, 0, 2, 8, 9, 7, 4, 7, 7, 5, 1, 9, 5, 5, 8, 3, 1, 7, 8, 2, 1, 7, 8, 4, 6, 6, 0, 6, 2]"],"[0, 2, 12, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4]"],[["[4, 5, 8, 8, 1, 3, 6, 6, 7, 6, 5, 7, 6, 2, 1, 0, 3, 0, 7, 0, 7, 4, 5, 7, 9, 5, 1, 2, 8, 1]"],"[0, 1, 0, 0, 2, 2, 1, 0, 5, 0, 5, 5, 0, 0, 2, 1]"],[["[0, 2, 1, 9, 5, 1, 8, 9, 3, 5, 9, 4, 1, 9, 8, 9, 6, 0, 7, 5, 2, 6, 0, 6, 2, 2, 6, 6, 9, 4]"],"[10, 8, 8, 6, 0, 8, 0, 0, 2, 1, 3, 0, 0, 0, 0, 2, 0, 0, 6, 2, 8, 0, 0, 0, 6, 0]"],[["[7, 4, 7, 5, 4, 1, 2, 3, 6, 2, 4, 8, 1, 4, 9, 9, 4, 0, 6, 3, 7, 8, 3, 4, 5, 3, 7, 8, 8, 9]"],"[2, 0, 3, 0, 6, 0, 0, 0, 3, 3]"]],"type":"(list -> list)","name":"098","solution":"(letII (case 0 of O => (case (flip 0.2) of True => randnat | False => randnat) | S => (λn -> randnat)) (λk -> (map (λstate -> (- state#1 randnat)) (scanl (λacc x -> (case (flip 0.8) of True => randnat | False => acc#2)) 0 (take (case randnat of O => randnat | S => (λn -> (letII randnat (λx -> (+ x#1 randnat))))) #2)))))","num_train":4},{"ios":[[["[5, 1, 4, 6, 4, 0, 8, 8, 4, 5, 3, 0, 1, 6, 9, 7, 8, 5, 0, 7, 0, 7, 6, 8, 4, 8, 2, 2, 7, 3]"],"[7, 7, 6, 12]"],[["[6, 6, 4, 6, 8, 0, 3, 9, 1, 5, 8, 4, 0, 0, 9, 9, 1, 6, 7, 1, 5, 3, 8, 2, 9, 7, 4, 6, 2, 7]"],"[6, 0, 6, 11]"],[["[2, 0, 6, 7, 7, 4, 7, 6, 5, 9, 3, 5, 8, 6, 4, 0, 9, 1, 2, 2, 2, 1, 4, 0, 6, 2, 3, 4, 4, 9]"],"[0, 14, 24, 25]"],[["[5, 7, 8, 3, 1, 5, 1, 6, 9, 9, 1, 4, 9, 0, 3, 9, 8, 1, 2, 6, 5, 7, 0, 5, 7, 2, 5, 6, 5, 4]"],"[0, 5, 1, 7]"],[["[3, 1, 1, 3, 9, 7, 5, 4, 4, 6, 9, 4, 6, 8, 6, 3, 2, 5, 1, 3, 5, 2, 9, 1, 7, 4, 4, 5, 9, 8]"],"[0, 9, 3, 0]"],[["[4, 4, 1, 5, 1, 9, 7, 9, 0, 4, 9, 5, 6, 2, 7, 8, 2, 7, 3, 6, 5, 9, 8, 2, 3, 7, 2, 4, 2, 3]"],"[1, 0, 1, 4]"],[["[4, 9, 3, 9, 6, 2, 9, 2, 1, 8, 5, 9, 9, 1, 4, 7, 8, 1, 0, 8, 7, 1, 7, 1, 4, 3, 7, 2, 3, 4]"],"[12, 12, 0, 10]"],[["[3, 9, 3, 1, 5, 1, 7, 7, 9, 3, 4, 6, 6, 4, 0, 0, 5, 0, 3, 2, 9, 9, 0, 3, 1, 6, 1, 7, 6, 3]"],"[3, 9, 9, 3]"]],"type":"(list -> list)","name":"099","solution":"(letII (+ 6 1) (λk -> (map (λstate -> (case (flip 0.8) of True => state#1 | False => randnat)) (scanl (λacc x -> (letII (+ (case (flip 0.3) of True => randnat | False => acc#2) randnat) (λx -> (- x#1 randnat)))) 0 (take (- (+ 3 (letII randnat (λx -> (inc k#2)))) k#1) #2)))))","num_train":4}],"task_info":[{"q_expr":-44.72950260738671,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-19.100811740330037,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":3},{"q_expr":-52.998234439504444,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":7},{"q_expr":-65.40465526418143,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-60.78970589020822,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-58.293706853920256,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-68.44506210157117,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-31.470856803985967,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":5},{"q_expr":-72.81034087894383,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-51.300420583118914,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-41.81793675869012,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-51.74647097134216,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":7},{"q_expr":-42.28927052143446,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":5},{"q_expr":-69.56662001407851,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-23.052055458911468,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":3},{"q_expr":-64.76077913262827,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-60.3339276824468,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-32.83491502365898,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":5},{"q_expr":-62.2113339617027,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-62.756547099045754,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-61.725826145921,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-59.329024292216054,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-32.854306212973626,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":5},{"q_expr":-43.548002658912836,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":7},{"q_expr":-64.1195977015355,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-41.89622793332485,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-64.65289618115354,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-68.57185342243459,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-74.80039885948898,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-60.45423315392008,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-72.8495615920971,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-73.30539116830546,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-64.77215960198036,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-51.15583935430781,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":7},{"q_expr":-51.047397172112575,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":7},{"q_expr":-40.562320721212345,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":7},{"q_expr":-54.81631933390005,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":7},{"q_expr":-61.29504322982854,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-58.899842657490574,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":7},{"q_expr":-69.70275218840308,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-64.41810101261886,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-54.36185432465348,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-72.86008469593777,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-66.27152469537697,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-71.38058119129025,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-35.59772455791364,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-56.595927430997925,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-44.37568073243039,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-42.074425772934944,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":5},{"q_expr":-59.33595852806895,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-50.927091700639316,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-69.11986014346292,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-66.4554768890132,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-72.50155051760177,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-54.73242405691102,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-52.68935827625224,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-62.13514382334465,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-76.39225853603295,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-64.69300869328146,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-64.04083375891359,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-67.26925205736174,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-30.56461640796531,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":5},{"q_expr":-42.33397951873339,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-51.668029545035594,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":7},{"q_expr":-74.55430968433554,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-23.70598192631813,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":3},{"q_expr":-56.07946327141443,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-43.56502166408244,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-50.224281150302865,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":7},{"q_expr":-61.421125068299624,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-34.77955452451283,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":4},{"q_expr":-63.2396827306824,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-45.351142597492995,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-74.03951059505751,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-72.12416236769997,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-23.575303602676016,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":3},{"q_expr":-65.16757437423502,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-62.75402466322887,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":7},{"q_expr":-68.10292627729851,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-60.01547395132828,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-59.91423715285432,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-48.447789153205605,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":7},{"q_expr":-69.24532133082774,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-62.78109400425196,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-68.07881770661628,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-72.63783294359818,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-63.93271409303371,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-61.4634618814535,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-63.54835727381581,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-47.627079749004146,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-64.85285739422335,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-44.30877002714776,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":7},{"q_expr":-50.03887792697151,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-25.06695847945373,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":4},{"q_expr":-41.10056518923931,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":5},{"q_expr":-52.31513759479801,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-67.41407000057802,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-52.32163349612692,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-44.82745611920447,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":7},{"q_expr":-62.80048519356661,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9}],"path":"out/fuzz-datasets/2024-11-14/13-34-18/dataset.json"}