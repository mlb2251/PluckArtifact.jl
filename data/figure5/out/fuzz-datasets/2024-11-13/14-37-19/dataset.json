{"task_dist":{"input_dist":"(fillrand 30)","input_type":"list","grammar":"PCFG:\n  ?lets -> (letII ?int (λk -> (scanl (λacc act -> ?int) 0 (take ?int #2)))) [1.0]\n  ?int -> randnat [0.4] | #int [0.3-0.0] | 0 [0.008-0.04] | 1 [0.008-0.04] | 2 [0.008-0.04] | 3 [0.008-0.04] | 4 [0.008-0.04] | 5 [0.008-0.04] | 6 [0.008-0.04] | 7 [0.008-0.04] | 8 [0.008-0.04] | 9 [0.008-0.04] | (letII ?int (λx -> (inc ?int))) [0.01] | (letII ?int (λx -> (+ ?int ?int))) [0.01] | (letII ?int (λx -> (- ?int ?int))) [0.01] | (letII ?int (λx -> (case ?int of O => ?int | S => (λn -> ?int)))) [0.01] | (letII ?int (λx -> (case ?bool of True => ?int | False => ?int))) [0.01] | (inc ?int) [0.04] | (+ ?int ?int) [0.04] | (- ?int ?int) [0.04] | (case ?int of O => ?int | S => (λn -> ?int)) [0.04] | (case ?bool of True => ?int | False => ?int) [0.04]\n  ?bool -> #bool [0.08-0.0] | (flip 0.1) [0.08-0.09] | (flip 0.2) [0.08-0.09] | (flip 0.3) [0.08-0.09] | (flip 0.4) [0.08-0.09] | (flip 0.5) [0.08-0.09] | (flip 0.6) [0.08-0.09] | (flip 0.7) [0.08-0.09] | (flip 0.8) [0.08-0.09] | (flip 0.9) [0.08-0.09] | (iseven ?int) [0.07] | (== ?int ?int) [0.07] | (> ?int ?int) [0.07]\n","output_type":"list"},"tasks":[{"ios":[[["[1, 0, 2, 9, 8, 3, 2, 9, 6, 0, 2, 2, 2, 4, 0, 0, 3, 8, 3, 8, 6, 2, 5, 1, 5, 3, 0, 1, 4, 6]"],"[1, 1, 3, 18, 26, 29, 31, 40, 46]"],[["[7, 1, 6, 6, 2, 4, 8, 0, 5, 0, 0, 7, 7, 5, 9, 8, 9, 7, 7, 5, 5, 1, 4, 7, 0, 4, 1, 2, 8, 2]"],"[16, 17, 23, 29, 31, 35, 43, 43, 48]"],[["[9, 7, 9, 8, 9, 5, 6, 9, 1, 2, 8, 1, 7, 5, 4, 4, 8, 2, 3, 4, 3, 3, 9, 1, 8, 9, 4, 2, 3, 3]"],"[9, 16, 25, 33, 42, 47, 53, 62, 10]"],[["[7, 7, 0, 0, 0, 1, 6, 3, 9, 9, 8, 8, 0, 6, 8, 6, 1, 2, 5, 0, 6, 7, 9, 9, 5, 2, 0, 6, 4, 9]"],"[16, 16, 16, 9, 9, 10, 16, 19, 28]"],[["[3, 2, 5, 1, 7, 6, 4, 2, 0, 3, 1, 2, 1, 7, 0, 9, 1, 3, 5, 0, 0, 9, 4, 9, 1, 4, 5, 1, 1, 5]"],"[3, 5]"],[["[5, 0, 6, 6, 2, 1, 3, 6, 5, 2, 3, 1, 0, 7, 4, 4, 4, 0, 8, 5, 5, 4, 5, 0, 8, 5, 2, 9, 6, 9]"],"[5, 5, 11, 17, 19, 10, 13, 15, 14]"],[["[8, 8, 0, 9, 9, 3, 0, 7, 1, 9, 5, 4, 3, 5, 1, 3, 0, 1, 5, 0, 9, 3, 3, 6, 6, 9, 8, 0, 8, 9]"],"[8, 16, 9, 18, 27, 30, 30, 37, 10]"],[["[1, 9, 2, 1, 5, 1, 0, 6, 1, 6, 3, 1, 7, 4, 2, 1, 0, 5, 9, 3, 3, 4, 6, 0, 3, 7, 7, 4, 2, 2]"],"[1, 10, 12, 13, 18, 19, 9, 15, 16]"]],"type":"(list -> list)","name":"000","solution":"(letII 9 (λk -> (scanl (λacc act -> (letII randnat (λx -> (+ act#2 (case (flip 0.2) of True => k#4 | False => acc#3))))) 0 (take (case (flip 0.7) of True => k#1 | False => randnat) #2))))","num_train":4},{"ios":[[["[7, 7, 2, 6, 8, 5, 0, 7, 8, 4, 7, 1, 6, 0, 7, 0, 5, 2, 5, 5, 8, 3, 8, 9, 7, 9, 2, 4, 7, 6]"],"[1, 2]"],[["[2, 1, 9, 0, 1, 9, 7, 8, 3, 0, 1, 1, 0, 7, 1, 7, 7, 1, 1, 5, 6, 7, 8, 0, 5, 6, 0, 1, 8, 9]"],"[1, 2]"],[["[3, 7, 3, 4, 6, 1, 0, 6, 1, 0, 6, 9, 4, 7, 6, 5, 5, 7, 9, 0, 4, 1, 6, 5, 7, 1, 3, 3, 4, 0]"],"[1, 2]"],[["[6, 1, 3, 7, 8, 1, 1, 9, 7, 9, 7, 3, 9, 5, 8, 2, 7, 0, 3, 5, 3, 4, 8, 6, 8, 6, 7, 3, 1, 2]"],"[1, 2]"],[["[0, 3, 0, 5, 6, 1, 6, 4, 5, 8, 0, 3, 7, 5, 4, 7, 1, 7, 0, 1, 5, 3, 7, 0, 8, 6, 9, 5, 3, 9]"],"[1, 2]"],[["[5, 6, 5, 8, 4, 5, 8, 7, 5, 7, 8, 2, 4, 6, 1, 6, 7, 7, 6, 9, 8, 3, 2, 1, 0, 4, 5, 5, 6, 6]"],"[1, 2]"],[["[9, 0, 1, 6, 7, 7, 4, 8, 9, 0, 7, 2, 6, 2, 2, 1, 7, 4, 9, 9, 5, 1, 2, 6, 1, 1, 5, 8, 3, 3]"],"[1, 2]"],[["[9, 3, 3, 9, 3, 1, 0, 8, 8, 7, 0, 3, 7, 0, 1, 0, 2, 2, 4, 8, 9, 4, 1, 3, 0, 6, 2, 2, 5, 9]"],"[1, 2]"]],"type":"(list -> list)","name":"001","solution":"(letII 3 (λk -> (scanl (λacc act -> (inc (case 1 of O => act#1 | S => (λn -> acc#3)))) 0 (take (case (case (flip 0.1) of True => randnat | False => k#1) of O => randnat | S => (λn -> n#1)) #2))))","num_train":4},{"ios":[[["[7, 5, 5, 3, 9, 7, 6, 0, 7, 3, 0, 2, 7, 8, 2, 8, 6, 4, 4, 2, 9, 5, 0, 3, 9, 6, 9, 3, 1, 9]"],"[9, 13, 17, 9, 9, 9, 9, 12]"],[["[5, 1, 8, 3, 4, 3, 4, 8, 3, 3, 9, 7, 8, 9, 3, 1, 1, 8, 4, 1, 6, 0, 9, 9, 7, 4, 2, 8, 6, 6]"],"[4, 9, 13, 17, 21, 25, 9, 13]"],[["[6, 3, 1, 6, 4, 1, 7, 7, 0, 7, 8, 5, 1, 6, 1, 5, 8, 6, 7, 5, 0, 3, 4, 8, 2, 2, 0, 3, 4, 0]"],"[4, 8, 12, 16, 20, 24, 28, 32]"],[["[1, 4, 4, 9, 8, 5, 5, 3, 2, 3, 3, 3, 5, 6, 0, 7, 9, 4, 5, 0, 1, 4, 8, 8, 5, 1, 2, 3, 8, 8]"],"[4, 9, 13, 17, 21, 25, 29, 9]"],[["[0, 1, 8, 3, 4, 1, 2, 3, 5, 8, 7, 0, 6, 8, 3, 0, 3, 9, 7, 4, 5, 5, 5, 7, 6, 4, 6, 0, 5, 6]"],"[9, 13, 17, 9, 9, 9, 9, 13]"],[["[8, 9, 8, 2, 2, 6, 6, 8, 6, 4, 6, 9, 3, 3, 6, 8, 1, 8, 1, 7, 6, 8, 2, 5, 0, 4, 3, 9, 6, 5]"],"[4, 9, 13, 9, 13, 9, 9, 9]"],[["[0, 0, 4, 9, 8, 2, 2, 5, 4, 4, 8, 4, 2, 8, 8, 8, 5, 9, 5, 6, 9, 8, 3, 8, 6, 3, 8, 0, 4, 7]"],"[9, 12, 16, 20, 9, 13, 17, 9]"],[["[7, 9, 5, 0, 7, 9, 8, 4, 1, 8, 9, 8, 0, 7, 9, 5, 6, 1, 8, 7, 8, 9, 0, 1, 3, 5, 8, 6, 2, 6]"],"[4, 9, 13, 12, 9, 9, 13, 17]"]],"type":"(list -> list)","name":"002","solution":"(letII (inc (inc 2)) (λk -> (scanl (λacc act -> (case (flip 0.6) of True => (+ k#3 (case act#1 of O => 8 | S => (λn -> acc#3))) | False => 9)) 0 (take (case (flip 0.1) of True => k#1 | False => (case k#1 of O => randnat | S => (λn -> 8))) #2))))","num_train":4},{"ios":[[["[0, 5, 5, 5, 2, 9, 5, 4, 3, 8, 0, 6, 2, 0, 5, 7, 7, 9, 5, 7, 9, 0, 0, 4, 5, 0, 3, 9, 4, 9]"],"[2, 1, 0, 0, 0, 0, 2, 0, 1, 3]"],[["[1, 1, 2, 8, 0, 9, 3, 7, 6, 4, 8, 9, 0, 7, 4, 1, 8, 0, 4, 5, 2, 5, 6, 1, 9, 6, 7, 3, 9, 6]"],"[0, 5, 0, 12]"],[["[1, 6, 7, 9, 7, 3, 8, 9, 5, 1, 4, 2, 7, 0, 8, 7, 8, 0, 7, 5, 6, 1, 9, 8, 5, 1, 9, 7, 1, 2]"],"[2, 0, 7, 1, 5, 2, 7, 1, 7, 2, 9, 11, 0, 3, 2, 2]"],[["[2, 7, 9, 9, 7, 4, 4, 4, 1, 0, 0, 1, 6, 9, 1, 8, 8, 3, 5, 1, 7, 8, 6, 7, 5, 9, 2, 5, 3, 0]"],"[0, 0, 2, 3, 0]"],[["[5, 1, 7, 3, 1, 9, 2, 1, 0, 3, 6, 8, 3, 1, 7, 4, 5, 5, 5, 1, 3, 8, 1, 5, 8, 4, 8, 6, 5, 1]"],"[4, 0, 2, 0]"],[["[4, 1, 5, 9, 8, 1, 3, 3, 8, 1, 2, 9, 3, 1, 1, 0, 9, 2, 2, 1, 0, 8, 7, 0, 7, 3, 5, 4, 5, 4]"],"[2, 6, 7, 0, 13, 5, 5, 3, 11, 8, 13, 0, 4, 2, 2, 0, 4, 1, 10]"],[["[7, 8, 0, 1, 3, 5, 6, 9, 6, 3, 7, 9, 1, 2, 2, 7, 4, 0, 2, 6, 4, 0, 3, 4, 7, 8, 7, 2, 6, 1]"],"[8, 3, 0, 0]"],[["[7, 0, 0, 6, 2, 0, 3, 0, 1, 4, 6, 6, 0, 2, 2, 9, 2, 6, 2, 9, 9, 8, 4, 6, 8, 0, 8, 2, 7, 0]"],"[6, 15, 1, 9, 0, 0, 0, 6]"]],"type":"(list -> list)","name":"003","solution":"(letII 0 (λk -> (scanl (λacc act -> (letII (letII acc#2 (λx -> (- act#2 k#4))) (λx -> (case (flip 0.1) of True => (letII 5 (λx -> (case randnat of O => k#5 | S => (λn -> randnat)))) | False => randnat)))) 0 (take (+ (- 4 k#1) randnat) #2))))","num_train":4},{"ios":[[["[5, 6, 9, 8, 4, 3, 8, 4, 5, 4, 2, 6, 1, 4, 5, 6, 8, 5, 8, 3, 3, 0, 4, 0, 2, 4, 7, 3, 7, 1]"],"[5, 10, 0]"],[["[4, 5, 4, 3, 3, 5, 7, 2, 4, 3, 5, 2, 3, 0, 7, 2, 6, 2, 7, 7, 9, 6, 9, 1, 6, 3, 0, 0, 3, 4]"],"[1, 6, 1, 5, 7, 4]"],[["[2, 9, 0, 2, 5, 4, 6, 0, 7, 5, 5, 8, 9, 7, 2, 3, 9, 0, 3, 5, 6, 5, 5, 1, 2, 2, 8, 8, 7, 5]"],"[10, 2, 0, 1, 0, 13]"],[["[2, 2, 3, 5, 4, 2, 2, 6, 5, 4, 7, 8, 9, 1, 6, 2, 7, 1, 7, 7, 4, 7, 5, 2, 1, 5, 2, 7, 7, 8]"],"[1, 2]"],[["[1, 1, 0, 1, 8, 0, 6, 2, 0, 3, 4, 9, 0, 9, 0, 6, 2, 7, 1, 5, 2, 9, 7, 4, 4, 6, 1, 3, 9, 7]"],"[0, 1, 0, 2, 0, 16, 2, 16, 2, 2, 0, 4, 0, 3, 2, 1, 13, 1, 16, 7, 12, 9, 4, 16, 3, 0, 1, 6, 0]"],[["[0, 5, 5, 9, 0, 4, 7, 6, 2, 9, 0, 7, 5, 5, 7, 7, 9, 5, 0, 1, 3, 1, 2, 3, 9, 9, 5, 7, 4, 1]"],"[8, 4, 4, 4, 0, 2, 12, 0, 19, 0]"],[["[2, 0, 0, 8, 9, 8, 7, 3, 3, 7, 4, 5, 9, 9, 7, 8, 5, 6, 8, 1, 2, 3, 7, 2, 0, 4, 6, 0, 3, 4]"],"[6, 4, 1, 4, 1, 2, 12, 2, 5, 11, 5]"],[["[3, 7, 8, 7, 1, 4, 0, 6, 0, 8, 0, 9, 2, 5, 8, 2, 1, 1, 9, 5, 6, 9, 8, 2, 5, 2, 0, 7, 8, 0]"],"[1, 1, 8, 4, 1, 8, 1, 3, 7, 0, 12, 0, 8, 1, 10, 6, 3, 5, 12, 4, 0]"]],"type":"(list -> list)","name":"004","solution":"(letII (inc (letII (letII randnat (λx -> (- randnat randnat))) (λx -> (case (case x#1 of O => randnat | S => (λn -> randnat)) of O => randnat | S => (λn -> n#1))))) (λk -> (scanl (λacc act -> (case (== act#1 acc#2) of True => k#3 | False => randnat)) 0 (take (- (letII k#1 (λx -> (+ k#2 x#1))) randnat) #2))))","num_train":4},{"ios":[[["[1, 5, 0, 8, 1, 4, 5, 1, 9, 3, 0, 0, 5, 2, 8, 1, 7, 1, 2, 4, 8, 7, 7, 5, 3, 8, 8, 5, 9, 6]"],"[2, 11, 2, 8, 4, 7]"],[["[6, 3, 7, 6, 5, 1, 2, 3, 4, 7, 7, 5, 5, 6, 5, 5, 6, 7, 5, 2, 3, 7, 5, 0, 7, 1, 0, 3, 3, 4]"],"[12, 5]"],[["[1, 8, 5, 6, 8, 8, 7, 6, 8, 6, 1, 1, 6, 9, 6, 0, 7, 0, 0, 9, 5, 1, 4, 5, 1, 9, 9, 6, 7, 4]"],"[4, 9, 7, 16, 9, 12, 11, 16, 9, 18, 16, 6, 7, 17]"],[["[1, 1, 1, 5, 9, 0, 7, 7, 8, 1, 8, 9, 2, 0, 0, 9, 6, 4, 9, 8, 2, 1, 0, 8, 0, 4, 0, 7, 1, 5]"],"[4, 1]"],[["[2, 3, 3, 5, 1, 9, 9, 6, 3, 6, 4, 1, 7, 6, 8, 0, 5, 5, 3, 6, 2, 6, 2, 7, 9, 5, 7, 7, 6, 7]"],"[2, 3, 3, 10, 2, 14, 11, 11]"],[["[5, 0, 2, 1, 6, 5, 3, 2, 4, 5, 0, 2, 9, 3, 6, 9, 1, 4, 1, 2, 7, 0, 5, 4, 8, 4, 7, 1, 4, 5]"],"[9, 10, 2, 8, 6, 5, 5, 8, 12, 10, 1, 2, 17, 4, 18, 12, 1, 7, 1, 14, 7, 5, 6, 5]"],[["[3, 2, 2, 6, 3, 5, 3, 4, 9, 4, 4, 0, 4, 8, 7, 4, 1, 7, 3, 2, 0, 2, 9, 8, 4, 0, 2, 4, 4, 3]"],"[3, 2]"],[["[0, 9, 9, 2, 6, 9, 4, 0, 2, 3, 7, 6, 8, 8, 9, 3, 5, 5, 0, 9, 8, 0, 9, 8, 6, 2, 5, 4, 4, 8]"],"[1, 14]"]],"type":"(list -> list)","name":"005","solution":"(letII (- (case (flip 0.5) of True => randnat | False => randnat) (+ 3 randnat)) (λk -> (scanl (λacc act -> (letII (+ acc#2 act#1) (λx -> (+ act#2 randnat)))) 0 (take (letII randnat (λx -> (+ x#1 x#1))) #2))))","num_train":4},{"ios":[[["[4, 0, 2, 0, 8, 2, 4, 3, 5, 9, 2, 1, 4, 0, 6, 2, 9, 6, 5, 5, 7, 5, 1, 6, 9, 3, 7, 6, 9, 5]"],"[1, 1, 4, 7, 0, 1, 1]"],[["[7, 7, 9, 1, 2, 4, 3, 6, 5, 0, 4, 0, 2, 6, 6, 7, 4, 2, 5, 1, 9, 4, 7, 5, 3, 1, 7, 6, 3, 7]"],"[4, 0, 4, 0, 7, 0, 8]"],[["[0, 4, 2, 6, 7, 4, 4, 2, 4, 4, 9, 2, 1, 2, 0, 5, 6, 3, 2, 4, 4, 4, 3, 5, 5, 7, 7, 1, 5, 3]"],"[0, 2, 5, 0, 2, 0, 5]"],[["[9, 7, 6, 6, 0, 1, 8, 4, 7, 0, 9, 6, 1, 4, 8, 7, 1, 0, 4, 6, 5, 3, 9, 2, 4, 2, 7, 6, 3, 1]"],"[5, 5, 2, 0, 0, 5, 0]"],[["[3, 9, 5, 1, 5, 5, 3, 4, 8, 8, 4, 8, 7, 3, 2, 0, 7, 9, 5, 9, 1, 1, 5, 0, 8, 5, 7, 5, 9, 7]"],"[2, 1, 32, 0, 3, 14, 0]"],[["[9, 9, 0, 5, 3, 2, 8, 1, 3, 9, 3, 3, 2, 7, 0, 5, 6, 0, 5, 6, 0, 0, 4, 8, 9, 8, 6, 6, 9, 8]"],"[1, 2, 0]"],[["[1, 6, 3, 6, 5, 2, 8, 5, 9, 2, 3, 0, 9, 1, 4, 1, 9, 5, 3, 7, 2, 0, 6, 3, 5, 5, 9, 3, 3, 5]"],"[4, 2, 11, 0, 5, 0, 5]"],[["[4, 7, 9, 3, 7, 2, 0, 8, 1, 8, 7, 4, 5, 1, 8, 0, 8, 8, 0, 8, 6, 0, 7, 8, 9, 3, 5, 1, 0, 0]"],"[5, 0, 10, 0, 1, 0, 4]"]],"type":"(list -> list)","name":"006","solution":"(letII (+ 6 9) (λk -> (scanl (λacc act -> (case (> randnat k#3) of True => (letII acc#2 (λx -> (case act#2 of O => randnat | S => (λn -> x#2)))) | False => (letII randnat (λx -> (- randnat acc#3))))) 0 (take (- (case (flip 0.8) of True => 8 | False => randnat) (case 4 of O => 8 | S => (λn -> 1))) #2))))","num_train":4},{"ios":[[["[9, 1, 2, 0, 9, 4, 3, 8, 3, 5, 0, 0, 0, 9, 8, 0, 9, 4, 1, 6, 4, 2, 3, 5, 5, 8, 8, 8, 7, 5]"],"[0, 4, 5, 0, 1, 3, 4, 5, 0, 4, 4, 2, 3, 0, 0]"],[["[9, 3, 0, 7, 6, 6, 8, 0, 0, 0, 1, 4, 3, 3, 6, 9, 3, 9, 9, 8, 7, 2, 5, 8, 1, 7, 8, 0, 5, 5]"],"[0, 0, 0, 0, 5, 3, 0]"],[["[2, 8, 0, 0, 8, 6, 7, 4, 0, 2, 6, 3, 1, 8, 9, 9, 2, 3, 5, 5, 3, 5, 1, 7, 5, 0, 7, 1, 7, 6]"],"[4, 0, 0, 0, 0, 0, 0, 3]"],[["[3, 7, 7, 6, 4, 1, 4, 0, 4, 5, 9, 4, 8, 5, 5, 6, 2, 8, 0, 4, 4, 9, 3, 7, 1, 2, 0, 9, 6, 6]"],"[4, 0, 6, 3, 2, 4, 6, 3, 0]"],[["[6, 0, 9, 6, 1, 0, 0, 0, 9, 5, 5, 5, 9, 1, 3, 1, 9, 9, 7, 4, 5, 1, 0, 7, 8, 0, 6, 6, 9, 8]"],"[0, 3, 2, 0, 4, 0]"],[["[7, 5, 0, 2, 3, 9, 1, 2, 7, 6, 1, 3, 7, 1, 8, 6, 7, 4, 3, 7, 6, 6, 8, 4, 4, 0, 6, 1, 2, 6]"],"[0, 7, 0, 4, 10, 5, 9, 5, 4, 6, 2, 5]"],[["[8, 7, 2, 0, 6, 8, 1, 3, 2, 3, 9, 4, 4, 2, 3, 1, 4, 4, 2, 2, 5, 9, 9, 0, 4, 3, 5, 3, 1, 8]"],"[0, 0, 1, 0, 0, 5, 2]"],[["[5, 8, 2, 3, 7, 1, 9, 0, 0, 1, 3, 6, 2, 4, 1, 4, 5, 0, 6, 6, 0, 6, 0, 0, 0, 1, 2, 8, 9, 8]"],"[2, 0, 2, 3, 0]"]],"type":"(list -> list)","name":"007","solution":"(letII (letII 9 (λx -> (inc (inc randnat)))) (λk -> (scanl (λacc act -> (- (letII act#1 (λx -> (- k#4 randnat))) (- acc#2 4))) 0 (take (case (== randnat k#1) of True => (inc randnat) | False => (letII randnat (λx -> (+ k#2 randnat)))) #2))))","num_train":4},{"ios":[[["[4, 8, 5, 4, 3, 7, 8, 4, 5, 9, 1, 4, 1, 4, 9, 1, 8, 8, 7, 4, 0, 1, 5, 2, 1, 3, 9, 7, 3, 9]"],"[4, 8, 12, 16, 20]"],[["[4, 5, 0, 4, 2, 3, 3, 4, 0, 6, 5, 1, 5, 9, 4, 0, 4, 5, 7, 2, 6, 7, 7, 1, 2, 2, 3, 5, 3, 1]"],"[6, 12, 18, 24, 30]"],[["[2, 6, 5, 1, 2, 9, 9, 5, 8, 4, 4, 2, 2, 6, 8, 6, 1, 5, 8, 7, 2, 9, 6, 0, 9, 1, 2, 0, 7, 7]"],"[1, 2, 3, 4, 5, 6, 7, 8, 9]"],[["[4, 0, 7, 9, 4, 7, 0, 5, 9, 5, 9, 7, 4, 4, 2, 4, 2, 4, 5, 1, 3, 8, 1, 0, 2, 2, 9, 9, 5, 7]"],"[19, 38, 57, 76, 95, 114, 133, 152, 171, 190, 209, 228, 247, 266]"],[["[4, 3, 0, 7, 2, 7, 2, 2, 7, 8, 2, 1, 7, 9, 0, 8, 7, 2, 6, 2, 9, 2, 1, 5, 9, 9, 2, 6, 0, 9]"],"[12, 24, 36, 48, 60, 72, 84, 96, 108, 120]"],[["[3, 1, 0, 8, 3, 9, 3, 6, 6, 3, 4, 3, 5, 4, 9, 8, 2, 7, 8, 0, 1, 2, 9, 8, 3, 2, 1, 6, 2, 3]"],"[1, 2, 3, 4]"],[["[2, 5, 4, 9, 3, 3, 8, 5, 7, 5, 6, 5, 1, 9, 7, 6, 8, 3, 1, 5, 5, 2, 8, 3, 3, 9, 0, 6, 6, 4]"],"[1, 2, 3]"],[["[3, 1, 3, 2, 7, 7, 2, 1, 8, 4, 5, 0, 1, 5, 0, 0, 1, 1, 5, 8, 0, 7, 7, 1, 1, 2, 9, 6, 2, 2]"],"[12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264]"]],"type":"(list -> list)","name":"008","solution":"(letII (case (flip 0.8) of True => randnat | False => (+ randnat (letII 9 (λx -> (case (flip 0.6) of True => randnat | False => x#1))))) (λk -> (scanl (λacc act -> (letII randnat (λx -> (+ k#4 (letII act#2 (λx -> (case 7 of O => randnat | S => (λn -> acc#5)))))))) 0 (take (- (+ k#1 (letII k#1 (λx -> (case x#1 of O => randnat | S => (λn -> randnat))))) (case (flip 0.7) of True => randnat | False => randnat)) #2))))","num_train":4},{"ios":[[["[2, 7, 1, 2, 1, 2, 6, 1, 2, 9, 0, 2, 3, 8, 8, 0, 8, 6, 5, 4, 6, 1, 1, 8, 8, 6, 1, 4, 7, 0]"],"[2, 0, 2, 19, 2, 7]"],[["[5, 3, 3, 4, 8, 7, 3, 6, 7, 7, 9, 5, 7, 7, 5, 1, 1, 5, 5, 4, 4, 4, 6, 3, 4, 1, 2, 7, 5, 0]"],"[5, 9, 3, 5, 19, 2]"],[["[3, 1, 6, 5, 8, 9, 2, 3, 5, 3, 8, 2, 2, 7, 0, 3, 2, 6, 0, 6, 1, 5, 8, 0, 0, 3, 3, 9, 3, 6]"],"[2, 13, 0, 10, 0, 1]"],[["[4, 0, 8, 2, 9, 1, 0, 5, 2, 7, 2, 4, 2, 5, 2, 7, 6, 9, 1, 5, 3, 2, 3, 6, 1, 7, 9, 0, 3, 3]"],"[1, 2, 1, 4, 0, 13]"],[["[5, 8, 4, 4, 2, 1, 2, 0, 1, 7, 4, 0, 1, 4, 4, 6, 0, 8, 1, 4, 1, 6, 7, 0, 6, 0, 8, 6, 0, 5]"],"[11, 0, 9, 1, 8, 0]"],[["[3, 1, 8, 3, 4, 4, 7, 7, 0, 0, 5, 7, 1, 6, 9, 2, 0, 7, 4, 6, 2, 0, 1, 2, 8, 8, 5, 7, 7, 2]"],"[4, 12, 3, 6, 1, 2]"],[["[9, 6, 5, 4, 0, 1, 0, 7, 6, 2, 0, 2, 3, 3, 2, 6, 8, 0, 6, 0, 4, 3, 6, 4, 4, 6, 3, 6, 9, 2]"],"[3, 2, 3, 1, 0, 0]"],[["[1, 7, 7, 3, 4, 5, 7, 9, 7, 8, 5, 2, 7, 5, 6, 3, 3, 4, 4, 3, 2, 0, 9, 8, 9, 6, 4, 4, 6, 9]"],"[2, 1, 7, 2, 1, 0]"]],"type":"(list -> list)","name":"009","solution":"(letII 7 (λk -> (scanl (λacc act -> (case (== acc#2 randnat) of True => (letII randnat (λx -> (+ act#2 randnat))) | False => randnat)) 0 (take (case k#1 of O => randnat | S => (λn -> n#1)) #2))))","num_train":4},{"ios":[[["[9, 9, 0, 2, 6, 2, 8, 0, 8, 7, 6, 5, 1, 0, 6, 9, 4, 8, 4, 4, 7, 4, 7, 8, 7, 0, 0, 4, 3, 9]"],"[16, 0, 8, 0, 7]"],[["[8, 3, 3, 3, 5, 3, 3, 8, 8, 5, 6, 9, 9, 3, 7, 4, 6, 9, 4, 3, 2, 8, 3, 2, 9, 9, 8, 4, 0, 0]"],"[10, 4, 3, 2, 3, 6, 0, 7, 3]"],[["[7, 3, 5, 8, 7, 1, 7, 0, 4, 1, 6, 8, 1, 5, 3, 8, 3, 2, 3, 9, 0, 8, 4, 2, 9, 5, 1, 4, 6, 1]"],"[28, 0, 5, 15, 2, 30, 0, 0, 11, 0, 7, 5, 3, 18, 0]"],[["[2, 6, 7, 7, 3, 6, 2, 9, 9, 0, 2, 5, 2, 5, 1, 1, 9, 9, 6, 0, 0, 7, 0, 1, 2, 0, 7, 4, 5, 1]"],"[8, 3, 7, 1, 2]"],[["[8, 6, 3, 2, 1, 0, 9, 9, 2, 3, 2, 4, 0, 9, 0, 4, 9, 1, 2, 9, 2, 8, 9, 3, 2, 3, 1, 0, 6, 5]"],"[21, 0, 9, 2, 1, 1, 8, 1, 2, 6]"],[["[9, 8, 0, 8, 9, 8, 6, 0, 2, 1, 8, 3, 7, 9, 7, 3, 0, 8, 4, 6, 1, 0, 6, 2, 2, 0, 6, 1, 4, 2]"],"[12, 0, 18, 0, 7, 8]"],[["[3, 2, 1, 3, 9, 0, 9, 3, 0, 0, 8, 9, 8, 5, 1, 3, 8, 6, 7, 4, 5, 3, 4, 0, 0, 1, 6, 8, 7, 6]"],"[5, 0, 2, 3, 6, 2, 8, 4, 0]"],[["[3, 5, 6, 6, 9, 9, 5, 5, 9, 1, 4, 7, 0, 3, 6, 9, 4, 1, 4, 1, 4, 2, 1, 2, 5, 4, 5, 2, 7, 0]"],"[11, 0, 14, 0, 24, 0, 6, 8, 2, 10, 3, 11]"]],"type":"(list -> list)","name":"010","solution":"(letII (inc (+ 4 randnat)) (λk -> (scanl (λacc act -> (- (+ randnat (case (flip 0.6) of True => act#1 | False => k#3)) (case 6 of O => randnat | S => (λn -> acc#3)))) 0 (take (case (flip 0.5) of True => (inc (- k#1 2)) | False => 9) #2))))","num_train":4},{"ios":[[["[9, 0, 4, 1, 7, 6, 1, 3, 8, 9, 6, 1, 2, 3, 0, 5, 6, 3, 8, 8, 0, 0, 5, 1, 8, 2, 9, 6, 0, 7]"],"[9, 0, 4, 0, 7, 0, 1, 2, 6, 3, 3, 0]"],[["[3, 8, 7, 2, 7, 3, 3, 8, 1, 5, 1, 4, 0, 0, 4, 7, 7, 6, 4, 0, 5, 0, 7, 4, 0, 4, 3, 5, 9, 3]"],"[3, 5, 2, 0, 7, 0, 3, 5]"],[["[2, 5, 3, 9, 3, 2, 6, 3, 3, 4, 1, 5, 9, 0, 8, 7, 0, 7, 2, 4, 0, 7, 7, 0, 2, 3, 1, 2, 0, 1]"],"[2, 3, 0, 9, 0, 2, 4, 0, 3]"],[["[3, 8, 6, 2, 4, 5, 7, 9, 0, 0, 1, 7, 1, 6, 7, 3, 5, 0, 6, 5, 6, 5, 0, 2, 1, 3, 8, 8, 1, 9]"],"[3, 5, 1, 1, 3, 2, 5, 4, 0, 0, 1, 6]"],[["[2, 6, 9, 2, 3, 7, 4, 1, 8, 3, 7, 3, 0, 8, 2, 4, 0, 0, 2, 5, 4, 0, 9, 5, 1, 9, 0, 1, 1, 4]"],"[2, 4, 5, 0, 3, 4, 0, 1, 7, 0, 7, 0, 0, 8, 0, 4]"],[["[3, 7, 6, 6, 3, 6, 5, 2, 0, 1, 9, 4, 5, 0, 0, 9, 8, 7, 7, 5, 9, 3, 7, 3, 3, 4, 3, 7, 0, 3]"],"[3, 4, 2, 4, 0, 6, 0]"],[["[5, 8, 4, 0, 8, 2, 7, 5, 9, 9, 4, 6, 2, 7, 8, 5, 8, 6, 1, 0, 6, 7, 7, 8, 7, 0, 5, 8, 3, 2]"],"[5, 3, 1, 0, 8, 0]"],[["[3, 0, 7, 8, 6, 4, 3, 4, 8, 8, 3, 4, 8, 7, 3, 8, 2, 8, 7, 9, 2, 4, 3, 9, 2, 0, 1, 2, 9, 3]"],"[3, 0, 7, 1, 5, 0, 3, 1, 7, 1, 2, 2]"]],"type":"(list -> list)","name":"011","solution":"(letII (case (letII 4 (λx -> (case x#1 of O => randnat | S => (λn -> randnat)))) of O => (+ 2 4) | S => (λn -> randnat)) (λk -> (scanl (λacc act -> (- act#1 acc#2)) 0 (take (inc (+ (letII randnat (λx -> (case randnat of O => randnat | S => (λn -> randnat)))) (inc k#1))) #2))))","num_train":4},{"ios":[[["[6, 4, 4, 6, 8, 4, 8, 4, 3, 0, 3, 3, 5, 1, 5, 6, 0, 9, 9, 3, 3, 2, 1, 6, 1, 2, 1, 0, 0, 8]"],"[11, 27, 5]"],[["[1, 0, 6, 2, 1, 0, 6, 2, 8, 6, 3, 0, 3, 7, 2, 6, 5, 3, 5, 5, 4, 4, 4, 7, 1, 6, 1, 0, 9, 2]"],"[19, 8, 23, 2, 2, 9, 7]"],[["[2, 6, 1, 6, 7, 3, 4, 5, 7, 9, 4, 1, 3, 6, 2, 0, 7, 9, 8, 5, 1, 9, 6, 4, 2, 3, 3, 5, 6, 0]"],"[6, 7, 6]"],[["[4, 1, 5, 8, 5, 9, 9, 6, 2, 2, 1, 3, 1, 3, 5, 2, 4, 8, 8, 3, 5, 3, 0, 4, 4, 4, 7, 9, 3, 5]"],"[25, 3, 7, 26, 9, 10, 23, 6]"],[["[6, 0, 9, 7, 1, 0, 7, 1, 8, 1, 1, 5, 8, 2, 8, 4, 3, 7, 2, 8, 8, 2, 1, 3, 4, 4, 7, 6, 2, 3]"],"[13, 0]"],[["[0, 6, 6, 5, 3, 9, 2, 3, 8, 5, 7, 6, 0, 2, 3, 6, 8, 8, 2, 0, 9, 2, 5, 4, 3, 7, 1, 6, 8, 2]"],"[16, 10, 8, 12, 5, 12, 11, 4]"],[["[4, 6, 3, 2, 4, 8, 4, 9, 4, 1, 6, 4, 6, 3, 0, 9, 8, 4, 4, 2, 3, 8, 9, 5, 7, 3, 9, 3, 6, 4]"],"[14, 8, 4, 5, 4, 10, 5, 12, 7, 17, 9, 4, 10, 6, 3]"],[["[4, 2, 6, 6, 8, 8, 5, 3, 2, 9, 5, 4, 9, 8, 6, 2, 1, 4, 4, 7, 7, 9, 2, 2, 9, 4, 1, 4, 8, 9]"],"[23, 3, 10, 6, 11, 10]"]],"type":"(list -> list)","name":"012","solution":"(letII (case (case 7 of O => 7 | S => (λn -> randnat)) of O => randnat | S => (λn -> randnat)) (λk -> (scanl (λacc act -> (+ (+ randnat act#1) (- randnat (inc acc#2)))) 0 (take (+ (inc k#1) randnat) #2))))","num_train":4},{"ios":[[["[0, 1, 0, 3, 0, 6, 6, 8, 3, 8, 8, 1, 2, 3, 3, 8, 7, 9, 3, 9, 0, 1, 0, 9, 1, 1, 7, 1, 3, 0]"],"[1, 9]"],[["[6, 5, 6, 9, 3, 1, 9, 7, 6, 5, 6, 9, 3, 3, 2, 0, 9, 3, 9, 9, 0, 4, 1, 9, 8, 3, 0, 6, 4, 8]"],"[7, 12, 8, 1, 3, 19, 2, 2, 2, 10]"],[["[3, 0, 7, 6, 3, 7, 0, 3, 7, 1, 5, 7, 1, 2, 4, 0, 4, 3, 7, 0, 5, 0, 9, 4, 8, 1, 6, 3, 4, 6]"],"[4, 3]"],[["[2, 5, 4, 2, 4, 8, 2, 4, 2, 8, 3, 8, 7, 5, 0, 0, 7, 9, 8, 4, 9, 7, 0, 9, 9, 9, 5, 0, 6, 4]"],"[3, 1, 3]"],[["[3, 9, 2, 6, 5, 9, 8, 0, 7, 2, 2, 9, 3, 2, 0, 3, 8, 8, 8, 7, 5, 3, 5, 1, 3, 9, 4, 3, 3, 1]"],"[4, 2]"],[["[7, 1, 3, 0, 3, 0, 7, 9, 1, 0, 0, 7, 1, 8, 4, 9, 1, 2, 0, 8, 4, 3, 7, 1, 9, 2, 2, 3, 7, 7]"],"[8, 18, 2, 13, 1, 6, 2, 1, 3]"],[["[9, 0, 4, 6, 9, 4, 3, 6, 1, 3, 4, 7, 8, 8, 5, 2, 9, 9, 4, 7, 0, 5, 7, 8, 0, 3, 2, 3, 4, 4]"],"[10, 8, 2, 1, 5, 9, 3, 13]"],[["[4, 0, 0, 1, 6, 0, 3, 7, 4, 1, 1, 3, 1, 0, 6, 6, 9, 7, 9, 8, 6, 0, 4, 8, 8, 1, 1, 2, 8, 4]"],"[5, 7]"]],"type":"(list -> list)","name":"013","solution":"(letII (- (case (flip 0.7) of True => randnat | False => (+ 8 randnat)) randnat) (λk -> (scanl (λacc act -> (inc (letII randnat (λx -> (case acc#3 of O => act#2 | S => (λn -> randnat)))))) 0 (take (inc (case (flip 0.7) of True => (inc randnat) | False => randnat)) #2))))","num_train":4},{"ios":[[["[2, 7, 8, 8, 0, 2, 2, 6, 9, 7, 5, 7, 2, 9, 9, 9, 1, 9, 3, 0, 5, 2, 5, 6, 7, 0, 1, 3, 9, 3]"],"[4, 1, 1, 1, 1, 3, 1, 1, 1]"],[["[5, 8, 2, 9, 5, 8, 2, 6, 1, 9, 1, 7, 8, 0, 7, 6, 3, 7, 0, 8, 7, 7, 0, 9, 6, 9, 0, 0, 0, 6]"],"[1, 1, 3, 1, 1, 1, 3, 1, 4]"],[["[4, 6, 3, 8, 1, 2, 9, 6, 8, 2, 0, 0, 4, 0, 5, 3, 2, 1, 6, 9, 1, 3, 1, 2, 9, 1, 1, 3, 7, 8]"],"[1, 1, 2, 1, 4, 1, 1, 1, 1]"],[["[9, 3, 8, 1, 4, 2, 8, 4, 6, 9, 1, 5, 8, 2, 5, 3, 5, 7, 3, 5, 4, 9, 3, 0, 3, 6, 6, 2, 1, 4]"],"[1, 2, 1, 4, 1, 3, 1, 1, 1]"],[["[6, 1, 7, 0, 6, 7, 7, 9, 3, 1, 3, 5, 0, 1, 6, 8, 8, 2, 0, 6, 5, 1, 0, 9, 6, 6, 4, 3, 3, 1]"],"[1, 4, 1, 1, 1, 1, 1, 1, 2]"],[["[4, 5, 8, 7, 7, 1, 8, 5, 0, 8, 8, 6, 4, 1, 4, 3, 3, 7, 6, 6, 7, 7, 0, 9, 5, 2, 6, 9, 7, 4]"],"[2, 1, 1, 1, 1, 4, 1, 1, 1]"],[["[5, 4, 7, 1, 7, 6, 4, 0, 5, 8, 7, 9, 0, 1, 9, 7, 7, 1, 4, 8, 3, 2, 0, 3, 9, 4, 1, 3, 8, 7]"],"[1, 1, 1, 4, 1, 1, 1, 1, 1]"],[["[5, 9, 0, 4, 7, 9, 6, 2, 6, 8, 4, 7, 2, 4, 8, 7, 5, 8, 3, 6, 3, 3, 6, 5, 6, 8, 8, 3, 9, 1]"],"[1, 1, 1, 1, 1, 1, 1, 3, 1]"]],"type":"(list -> list)","name":"014","solution":"(letII (case 6 of O => (inc randnat) | S => (λn -> n#1)) (λk -> (scanl (λacc act -> (inc (- (letII (- k#3 act#1) (λx -> (case act#2 of O => act#2 | S => (λn -> x#2)))) (case (flip 0.7) of True => acc#2 | False => randnat)))) 0 (take (letII 5 (λx -> (case k#2 of O => randnat | S => (λn -> (letII randnat (λx -> (inc 8))))))) #2))))","num_train":4},{"ios":[[["[0, 2, 1, 7, 0, 7, 8, 6, 4, 4, 3, 0, 5, 0, 7, 3, 0, 8, 6, 4, 9, 6, 9, 3, 4, 7, 3, 6, 7, 1]"],"[1, 11, 1, 8, 12, 6, 8, 9, 4]"],[["[4, 2, 8, 4, 8, 3, 7, 1, 0, 7, 3, 0, 8, 3, 4, 1, 3, 9, 1, 3, 9, 5, 6, 9, 3, 7, 7, 5, 5, 6]"],"[1, 2, 8, 2, 5, 3]"],[["[6, 1, 4, 2, 5, 7, 3, 1, 9, 0, 4, 5, 7, 6, 8, 8, 0, 3, 5, 1, 8, 7, 7, 9, 7, 0, 2, 6, 7, 4]"],"[6, 8, 1, 1]"],[["[2, 9, 5, 1, 6, 9, 7, 4, 5, 0, 4, 9, 5, 2, 0, 6, 8, 3, 5, 6, 9, 1, 0, 8, 7, 3, 3, 4, 9, 3]"],"[2, 9, 15, 9, 9, 5, 7, 1, 3, 1, 26, 9, 11, 9, 1]"],[["[6, 2, 6, 1, 3, 5, 5, 7, 7, 5, 6, 9, 8, 3, 9, 0, 6, 5, 2, 8, 2, 9, 8, 0, 1, 1, 7, 5, 3, 1]"],"[1, 2, 4, 1, 6, 2, 2, 7, 7, 3, 6, 2]"],[["[6, 6, 1, 5, 5, 4, 9, 6, 3, 7, 2, 9, 0, 5, 8, 8, 2, 8, 3, 5, 8, 5, 1, 9, 1, 6, 1, 9, 0, 8]"],"[4, 2, 1, 5, 5, 4, 5, 3, 3, 5, 9, 9, 0, 4, 3, 8, 2, 3, 11, 10, 8, 1]"],[["[1, 0, 6, 5, 4, 7, 8, 7, 3, 3, 5, 0, 6, 5, 1, 7, 0, 4, 8, 4, 1, 5, 0, 9, 8, 6, 5, 9, 3, 7]"],"[1, 4]"],[["[4, 0, 1, 6, 6, 6, 3, 6, 7, 4, 5, 9, 2, 0, 2, 3, 1, 8, 3, 1, 8, 5, 4, 2, 6, 3, 0, 2, 3, 5]"],"[1, 1, 4, 1, 10]"]],"type":"(list -> list)","name":"015","solution":"(letII (case randnat of O => 5 | S => (λn -> randnat)) (λk -> (scanl (λacc act -> (case (flip 0.7) of True => (inc randnat) | False => (case 3 of O => acc#2 | S => (λn -> act#2)))) 0 (take (inc (+ (letII k#1 (λx -> (inc x#1))) (case (flip 0.4) of True => k#1 | False => randnat))) #2))))","num_train":4},{"ios":[[["[5, 1, 9, 4, 1, 8, 9, 1, 5, 0, 2, 1, 0, 1, 5, 6, 2, 9, 0, 8, 7, 5, 0, 9, 5, 1, 7, 8, 5, 7]"],"[8, 14, 22, 30, 37, 45, 53, 61, 64, 70, 72]"],[["[5, 8, 9, 0, 6, 9, 4, 7, 2, 2, 5, 7, 0, 0, 4, 1, 0, 5, 1, 4, 2, 9, 6, 3, 3, 2, 6, 8, 5, 6]"],"[8, 16, 24, 28, 35, 43, 41, 49, 57, 57, 65]"],[["[3, 7, 3, 9, 5, 7, 9, 4, 1, 1, 4, 9, 8, 8, 5, 3, 9, 6, 4, 1, 9, 4, 0, 4, 4, 7, 0, 7, 3, 6]"],"[8, 16, 24, 32, 40, 48, 56, 64, 61, 57, 65]"],[["[6, 8, 3, 7, 9, 6, 6, 7, 0, 3, 4, 3, 7, 3, 2, 6, 1, 3, 5, 5, 2, 6, 4, 7, 6, 5, 8, 3, 6, 2]"],"[8, 16, 24, 32, 40, 47, 55, 63, 70, 77, 85]"],[["[5, 4, 4, 8, 1, 7, 4, 9, 8, 0, 7, 8, 1, 6, 2, 1, 7, 5, 6, 1, 7, 3, 1, 1, 0, 0, 3, 3, 3, 7]"],"[8, 16, 24, 32, 28, 36, 38, 41, 48, 50, 58]"],[["[4, 7, 9, 9, 0, 6, 5, 1, 9, 7, 0, 5, 1, 9, 6, 5, 5, 5, 3, 6, 7, 3, 3, 7, 7, 6, 9, 5, 8, 7]"],"[8, 16, 24, 32, 40, 48, 56, 59, 67, 75, 83]"],[["[3, 3, 2, 5, 6, 1, 6, 4, 4, 9, 9, 9, 3, 3, 1, 8, 3, 9, 1, 0, 8, 9, 0, 0, 9, 0, 1, 1, 7, 3]"],"[8, 16, 24, 32, 36, 44, 52, 60, 64, 72, 80]"],[["[5, 2, 4, 9, 7, 5, 2, 4, 4, 3, 8, 3, 9, 7, 9, 3, 1, 1, 1, 3, 4, 0, 8, 1, 3, 2, 7, 0, 7, 5]"],"[8, 14, 15, 23, 31, 39, 47, 55, 63, 71, 79]"]],"type":"(list -> list)","name":"016","solution":"(letII (letII 4 (λx -> (+ 2 8))) (λk -> (scanl (λacc act -> (+ (- acc#2 (- randnat act#1)) 8)) 0 (take (inc k#1) #2))))","num_train":4},{"ios":[[["[6, 6, 7, 7, 6, 0, 2, 3, 4, 4, 6, 2, 4, 4, 5, 9, 1, 5, 4, 9, 0, 7, 0, 7, 6, 1, 0, 2, 7, 4]"],"[6, 12, 19, 26, 32, 32, 34, 37, 41]"],[["[5, 9, 2, 6, 8, 2, 4, 9, 5, 6, 5, 9, 5, 3, 6, 7, 3, 2, 9, 5, 5, 7, 0, 1, 9, 3, 1, 1, 4, 1]"],"[5, 14, 16, 22, 30, 32, 36, 45, 50, 56, 61, 70, 75, 78]"],[["[0, 0, 0, 3, 2, 8, 5, 6, 4, 2, 1, 6, 3, 8, 6, 5, 7, 9, 6, 4, 5, 6, 1, 9, 0, 0, 6, 5, 7, 2]"],"[0, 0, 0, 3, 5, 13, 18]"],[["[2, 3, 8, 9, 4, 8, 6, 5, 1, 8, 0, 8, 5, 2, 9, 3, 4, 8, 4, 4, 3, 3, 8, 7, 2, 8, 2, 5, 9, 1]"],"[2, 5, 13, 22, 26, 34, 40, 45, 46, 54, 54, 62, 67, 69, 78, 81, 85, 93, 97]"],[["[4, 0, 0, 4, 1, 8, 6, 9, 1, 9, 4, 3, 0, 0, 0, 3, 7, 9, 9, 8, 2, 6, 0, 7, 1, 5, 6, 5, 2, 2]"],"[4, 4, 4, 8, 9]"],[["[5, 3, 8, 2, 8, 5, 0, 9, 5, 6, 7, 1, 9, 2, 6, 3, 4, 2, 7, 0, 3, 2, 7, 9, 8, 4, 6, 1, 8, 8]"],"[5, 8, 16, 18, 26, 31, 31, 40, 45]"],[["[1, 3, 6, 0, 3, 5, 7, 5, 1, 7, 8, 9, 2, 6, 4, 6, 7, 5, 6, 6, 3, 5, 4, 8, 6, 4, 6, 6, 4, 9]"],"[1, 4, 10, 10, 13, 18, 25, 30, 31, 38, 46, 55, 57, 63, 67, 73, 80, 85, 91, 97, 100, 105, 109, 117, 123, 127, 133, 139, 143, 152]"],[["[1, 0, 1, 4, 9, 4, 3, 2, 6, 5, 1, 8, 5, 1, 7, 3, 2, 1, 1, 7, 2, 1, 4, 0, 9, 5, 0, 7, 0, 5]"],"[1, 1, 2, 6, 15, 19, 22, 24, 30, 35, 36, 44, 49, 50, 57, 60, 62, 63]"]],"type":"(list -> list)","name":"017","solution":"(letII (case (case (flip 0.7) of True => 0 | False => (+ 8 randnat)) of O => randnat | S => (λn -> n#1)) (λk -> (scanl (λacc act -> (letII randnat (λx -> (+ acc#3 act#2)))) 0 (take (letII (case k#1 of O => randnat | S => (λn -> randnat)) (λx -> (+ (- randnat randnat) (inc (+ x#1 randnat))))) #2))))","num_train":4},{"ios":[[["[9, 3, 1, 8, 4, 5, 7, 1, 9, 5, 9, 1, 1, 6, 2, 4, 1, 8, 3, 4, 2, 3, 5, 4, 4, 8, 7, 9, 4, 8]"],"[9, 12, 13, 21, 25, 30, 37, 38, 47, 52, 61, 62, 63, 69, 71, 75, 76, 84, 87, 91, 93]"],[["[0, 0, 3, 5, 2, 5, 8, 0, 1, 0, 4, 4, 9, 2, 3, 7, 6, 0, 9, 7, 5, 7, 4, 8, 9, 5, 8, 3, 1, 0]"],"[0, 0, 3, 8, 10, 15, 23, 23, 24, 24, 28, 32, 41, 43, 46, 53, 59]"],[["[2, 4, 1, 0, 5, 7, 5, 2, 6, 5, 6, 3, 3, 3, 9, 7, 3, 4, 5, 5, 9, 0, 6, 8, 1, 0, 7, 9, 7, 2]"],"[2, 6, 7, 7, 12, 19, 24, 26, 32, 37, 43, 46, 49, 52, 61, 68, 71, 75, 80, 85, 94, 94]"],[["[9, 0, 5, 2, 0, 6, 2, 6, 8, 2, 4, 9, 0, 0, 2, 9, 8, 6, 0, 2, 7, 7, 0, 2, 2, 0, 7, 4, 3, 0]"],"[9, 9, 14, 16, 16, 22, 24, 30, 38, 40, 44, 53, 53, 53, 55, 64, 72, 78]"],[["[3, 3, 9, 7, 2, 3, 8, 0, 5, 1, 3, 0, 6, 0, 9, 5, 2, 4, 4, 7, 5, 5, 2, 3, 0, 4, 6, 1, 4, 4]"],"[3, 6, 15, 22, 24, 27, 35, 35, 40, 41, 44, 44, 50, 50, 59, 64, 66]"],[["[2, 2, 4, 9, 9, 3, 0, 2, 9, 5, 5, 5, 4, 8, 9, 0, 5, 4, 8, 9, 6, 7, 9, 5, 6, 7, 3, 5, 7, 7]"],"[2, 4, 8, 17, 26, 29, 29, 31, 40, 45, 50, 55, 59, 67, 76, 76, 81]"],[["[2, 7, 5, 7, 2, 5, 6, 1, 4, 5, 9, 2, 5, 6, 7, 5, 4, 0, 3, 1, 3, 0, 6, 3, 8, 9, 2, 9, 6, 1]"],"[2, 9, 14, 21, 23, 28, 34, 35, 39, 44, 53, 55, 60, 66, 73, 78, 82, 82, 85]"],[["[8, 5, 0, 3, 6, 2, 2, 8, 6, 6, 7, 5, 3, 0, 8, 3, 1, 1, 4, 5, 6, 2, 7, 9, 9, 3, 6, 4, 2, 7]"],"[8, 13, 13, 16, 22, 24, 26, 34, 40, 46, 53, 58, 61, 61, 69, 72, 73, 74]"]],"type":"(list -> list)","name":"018","solution":"(letII (+ 8 9) (λk -> (scanl (λacc act -> (+ act#1 acc#2)) 0 (take (letII (case (flip 0.9) of True => randnat | False => 2) (λx -> (+ (letII randnat (λx -> (case randnat of O => randnat | S => (λn -> randnat)))) k#2))) #2))))","num_train":4},{"ios":[[["[3, 2, 9, 2, 0, 1, 0, 8, 0, 7, 0, 6, 5, 8, 9, 9, 3, 3, 2, 0, 4, 4, 9, 7, 5, 4, 3, 3, 2, 0]"],"[4, 3, 10, 3, 1, 2, 1, 9, 1, 1, 1, 7, 6, 9, 10, 10, 4, 4]"],[["[0, 8, 8, 3, 0, 0, 8, 1, 2, 8, 1, 9, 7, 2, 1, 8, 5, 6, 6, 7, 5, 7, 6, 3, 5, 3, 4, 3, 2, 8]"],"[1, 9, 9, 4, 1, 1, 9, 2, 3, 3, 2, 10, 8]"],[["[2, 1, 4, 9, 7, 4, 5, 3, 4, 9, 7, 4, 9, 5, 7, 1, 4, 0, 7, 5, 3, 5, 8, 5, 4, 6, 2, 6, 4, 1]"],"[3, 2, 5, 10, 8, 8, 6, 4, 5, 10, 8, 5, 10]"],[["[5, 6, 7, 1, 2, 2, 7, 2, 8, 0, 5, 3, 8, 0, 8, 1, 7, 8, 2, 7, 7, 5, 3, 0, 1, 5, 7, 6, 2, 2]"],"[6, 7, 8, 2, 3, 3, 8, 8, 9, 1, 6, 4, 9, 1, 9, 9, 8, 9, 3, 3, 8, 6, 4, 1]"],[["[1, 3, 8, 6, 9, 8, 9, 8, 1, 2, 7, 9, 7, 5, 0, 2, 9, 7, 5, 5, 9, 1, 6, 9, 3, 2, 5, 2, 1, 4]"],"[2, 4, 9, 7, 10, 9, 10, 9]"],[["[2, 3, 0, 4, 6, 4, 6, 2, 2, 8, 1, 6, 5, 7, 7, 6, 0, 8, 4, 3, 5, 9, 9, 9, 1, 1, 8, 1, 0, 6]"],"[0, 4, 4, 5, 7, 5, 7, 3, 3, 9, 9, 7, 6, 8, 8, 7, 1]"],[["[4, 9, 4, 7, 8, 2, 7, 2, 5, 8, 7, 5, 9, 7, 7, 1, 3, 7, 1, 9, 0, 7, 7, 9, 7, 2, 9, 9, 7, 2]"],"[5, 5, 5, 8, 9, 3, 8, 3, 6, 9, 8, 6, 10, 8, 8, 2, 4, 4, 2, 10, 1, 8, 8, 10, 8, 3]"],[["[4, 9, 9, 8, 0, 0, 2, 7, 1, 3, 2, 8, 3, 9, 2, 4, 6, 2, 0, 7, 5, 1, 3, 9, 0, 8, 6, 9, 7, 0]"],"[5, 10, 10, 9, 1, 1, 3, 8, 2, 4, 3, 9, 4, 4, 3, 5, 7, 3, 1, 8, 6, 2, 4, 10, 1, 9, 7, 10, 8, 1]"]],"type":"(list -> list)","name":"019","solution":"(letII (case 7 of O => 9 | S => (λn -> (+ n#1 n#1))) (λk -> (scanl (λacc act -> (letII 9 (λx -> (case (== randnat randnat) of True => acc#3 | False => (inc act#2))))) 0 (take (+ (case (flip 0.7) of True => randnat | False => (+ k#1 randnat)) (case randnat of O => randnat | S => (λn -> k#2))) #2))))","num_train":4},{"ios":[[["[1, 8, 3, 4, 1, 3, 8, 7, 7, 5, 4, 4, 9, 8, 5, 6, 4, 5, 0, 2, 4, 9, 9, 6, 4, 5, 6, 0, 5, 7]"],"[1, 8, 9, 10, 13, 15, 17, 18]"],[["[7, 7, 1, 7, 5, 4, 0, 3, 4, 4, 5, 7, 0, 9, 1, 3, 2, 1, 3, 9, 4, 9, 9, 6, 7, 0, 2, 0, 8, 8]"],"[1, 9, 12, 16, 17, 19, 32, 33]"],[["[0, 0, 3, 7, 2, 3, 9, 4, 4, 1, 8, 2, 9, 4, 7, 8, 4, 0, 5, 6, 9, 0, 0, 9, 6, 6, 5, 6, 2, 9]"],"[1, 3, 4, 5, 7, 9, 24, 28]"],[["[2, 6, 5, 7, 2, 3, 1, 9, 5, 9, 4, 7, 3, 1, 5, 5, 1, 2, 2, 9, 5, 5, 9, 0, 3, 6, 6, 6, 5, 7]"],"[2, 4, 15, 18, 26, 29, 41, 44]"],[["[3, 8, 6, 9, 8, 5, 0, 2, 8, 1, 3, 1, 8, 4, 8, 0, 0, 9, 0, 9, 3, 5, 6, 2, 4, 2, 1, 8, 7, 5]"],"[1, 12, 15]"],[["[0, 5, 0, 9, 9, 8, 0, 7, 9, 4, 6, 3, 7, 9, 6, 3, 9, 8, 0, 8, 2, 2, 5, 1, 4, 0, 5, 5, 3, 9]"],"[2, 20, 29, 34, 35, 36, 48, 53]"],[["[9, 3, 7, 4, 9, 3, 5, 0, 1, 5, 6, 8, 3, 3, 2, 9, 4, 1, 8, 3, 2, 1, 3, 9, 9, 3, 3, 9, 3, 3]"],"[1, 7, 8, 13, 18, 23, 24, 26]"],[["[8, 5, 3, 8, 1, 9, 4, 6, 6, 2, 8, 4, 1, 6, 6, 7, 4, 7, 2, 6, 2, 4, 7, 9, 9, 7, 6, 3, 7, 4]"],"[1, 14, 15]"]],"type":"(list -> list)","name":"020","solution":"(letII (inc (case (> 2 randnat) of True => 2 | False => 7)) (λk -> (scanl (λacc act -> (inc (letII act#1 (λx -> (+ acc#3 randnat))))) 0 (take k#1 #2))))","num_train":4},{"ios":[[["[1, 9, 9, 0, 0, 8, 6, 0, 3, 2, 1, 9, 8, 1, 9, 8, 9, 7, 3, 5, 9, 2, 9, 5, 7, 5, 5, 1, 5, 3]"],"[6, 12]"],[["[2, 7, 2, 9, 4, 2, 6, 3, 8, 3, 7, 8, 0, 7, 8, 0, 3, 2, 5, 6, 2, 9, 3, 1, 7, 4, 6, 6, 8, 1]"],"[6, 12]"],[["[0, 6, 2, 3, 2, 0, 7, 0, 5, 5, 4, 3, 8, 0, 0, 4, 7, 5, 8, 9, 2, 8, 0, 3, 0, 6, 9, 9, 9, 5]"],"[6, 12]"],[["[5, 5, 1, 6, 5, 9, 6, 8, 0, 1, 8, 7, 0, 1, 5, 7, 4, 8, 6, 5, 5, 4, 3, 5, 1, 9, 3, 0, 1, 7]"],"[6, 12]"],[["[5, 9, 6, 3, 4, 6, 7, 9, 6, 4, 5, 8, 3, 9, 5, 2, 5, 4, 9, 8, 9, 5, 3, 0, 6, 0, 8, 3, 8, 2]"],"[6, 12]"],[["[8, 9, 2, 8, 4, 7, 7, 3, 7, 3, 2, 7, 2, 5, 4, 0, 8, 3, 4, 5, 7, 2, 2, 2, 5, 4, 0, 7, 6, 6]"],"[14, 20]"],[["[1, 6, 6, 0, 4, 3, 3, 2, 1, 2, 6, 2, 9, 3, 5, 5, 0, 9, 1, 8, 5, 1, 1, 3, 9, 0, 7, 0, 4, 4]"],"[6, 12]"],[["[1, 7, 0, 7, 3, 7, 3, 9, 0, 9, 7, 0, 5, 3, 2, 2, 2, 8, 0, 5, 6, 5, 7, 0, 7, 8, 9, 1, 0, 5]"],"[6, 12]"]],"type":"(list -> list)","name":"021","solution":"(letII (case (flip 0.4) of True => 6 | False => randnat) (λk -> (scanl (λacc act -> (+ (letII (+ randnat randnat) (λx -> (inc 5))) (letII k#3 (λx -> (case randnat of O => act#2 | S => (λn -> acc#4)))))) 0 (take (+ (- (+ 2 k#1) k#1) (- k#1 k#1)) #2))))","num_train":4},{"ios":[[["[2, 4, 1, 1, 3, 3, 6, 1, 5, 6, 8, 9, 6, 5, 3, 9, 6, 6, 1, 5, 1, 8, 5, 7, 2, 9, 7, 3, 3, 2]"],"[9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]"],[["[6, 1, 0, 7, 2, 8, 1, 5, 8, 9, 9, 9, 7, 0, 7, 0, 2, 2, 0, 6, 2, 2, 2, 6, 5, 5, 0, 5, 2, 8]"],"[4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 9, 9, 9, 9]"],[["[6, 4, 0, 7, 4, 1, 9, 3, 2, 5, 4, 7, 0, 0, 8, 6, 5, 1, 6, 5, 2, 3, 9, 3, 4, 3, 0, 4, 5, 2]"],"[9, 5, 9, 9, 9, 2, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 6, 9, 9, 9, 9]"],[["[5, 7, 9, 5, 7, 9, 4, 5, 1, 9, 3, 4, 3, 2, 8, 9, 4, 3, 1, 3, 2, 8, 9, 7, 6, 8, 3, 6, 0, 7]"],"[9, 9, 9, 9, 8, 10, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 5, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 9, 9]"],[["[6, 7, 4, 1, 0, 4, 8, 6, 6, 1, 6, 4, 6, 8, 6, 9, 4, 7, 8, 7, 8, 3, 5, 3, 3, 4, 3, 9, 8, 9]"],"[9, 9, 9, 9, 9, 9, 9, 9, 7, 2, 9, 9, 9, 9, 9, 9, 5, 9, 9, 9, 9, 9]"],[["[5, 9, 6, 4, 2, 6, 6, 3, 4, 5, 8, 2, 0, 9, 7, 7, 3, 9, 9, 0, 4, 4, 2, 5, 1, 6, 5, 2, 1, 7]"],"[9, 9, 9, 9, 9, 9, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 10, 9, 9, 9]"],[["[7, 8, 2, 4, 6, 6, 8, 4, 2, 6, 2, 6, 9, 1, 1, 2, 9, 6, 6, 9, 0, 9, 6, 6, 8, 3, 7, 0, 4, 3]"],"[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 7, 9]"],[["[2, 3, 0, 7, 7, 0, 5, 9, 7, 7, 7, 5, 1, 5, 5, 4, 1, 9, 7, 4, 5, 8, 9, 6, 7, 1, 3, 8, 8, 8]"],"[9, 9, 9, 8, 9, 1, 9, 10, 9, 9, 9, 9, 9, 9, 6, 5, 2, 9, 9, 9, 9]"]],"type":"(list -> list)","name":"022","solution":"(letII (- 9 (letII 5 (λx -> (- randnat x#1)))) (λk -> (scanl (λacc act -> (case randnat of O => (inc (case acc#2 of O => randnat | S => (λn -> act#2))) | S => (λn -> k#4))) 0 (take (+ (+ (case (flip 0.5) of True => randnat | False => k#1) k#1) (letII randnat (λx -> (case (flip 0.5) of True => randnat | False => randnat)))) #2))))","num_train":4},{"ios":[[["[6, 8, 0, 2, 4, 0, 4, 2, 8, 1, 7, 3, 7, 8, 4, 1, 4, 1, 1, 9, 8, 4, 1, 3, 5, 7, 4, 1, 7, 2]"],"[6, 0, 7, 0, 3, 0, 1, 3, 7, 2, 1, 9]"],[["[5, 7, 6, 8, 2, 3, 9, 9, 3, 2, 9, 2, 8, 5, 9, 5, 7, 0, 7, 4, 9, 1, 5, 9, 7, 7, 7, 9, 2, 3]"],"[7, 7, 5, 10, 1, 5, 0, 0, 1, 9]"],[["[1, 8, 5, 9, 1, 1, 2, 7, 0, 4, 0, 7, 3, 4, 0, 3, 1, 1, 2, 0, 2, 9, 7, 8, 0, 4, 1, 1, 8, 5]"],"[2, 1, 9, 4]"],[["[6, 7, 0, 6, 5, 3, 1, 9, 5, 9, 8, 8, 5, 6, 4, 2, 6, 9, 5, 3, 3, 0, 6, 9, 8, 0, 2, 3, 0, 7]"],"[1, 18]"],[["[5, 1, 0, 8, 1, 0, 2, 6, 4, 3, 0, 3, 4, 2, 0, 3, 3, 9, 3, 0, 3, 6, 6, 2, 9, 8, 8, 7, 2, 8]"],"[0, 1]"],[["[5, 3, 0, 2, 9, 3, 9, 2, 7, 5, 3, 2, 6, 2, 5, 2, 6, 6, 0, 1, 4, 0, 8, 6, 7, 8, 9, 9, 8, 3]"],"[0, 17, 4, 3, 5, 2, 1, 10, 1, 2, 1, 8, 1, 1, 7, 2, 0, 3, 4, 2, 0, 0, 1, 11, 6, 2, 4, 3, 1, 1]"],[["[0, 8, 5, 7, 3, 7, 4, 7, 9, 7, 8, 3, 6, 3, 9, 5, 3, 8, 0, 7, 4, 0, 1, 6, 6, 2, 6, 3, 5, 1]"],"[23, 2]"],[["[1, 5, 0, 5, 2, 9, 1, 4, 5, 6, 1, 2, 3, 1, 8, 2, 0, 6, 1, 6, 6, 3, 5, 7, 5, 3, 6, 4, 9, 2]"],"[7, 4, 0, 4]"]],"type":"(list -> list)","name":"023","solution":"(letII (inc randnat) (λk -> (scanl (λacc act -> (letII (letII 9 (λx -> (- k#4 acc#3))) (λx -> (case (inc x#1) of O => act#2 | S => (λn -> randnat))))) 0 (take (+ k#1 k#1) #2))))","num_train":4},{"ios":[[["[4, 1, 1, 1, 8, 1, 9, 4, 8, 2, 0, 4, 9, 8, 9, 8, 2, 6, 8, 4, 4, 1, 8, 8, 9, 1, 5, 8, 9, 6]"],"[14, 15, 14, 10, 15, 1, 10, 5, 15]"],[["[8, 6, 2, 5, 6, 6, 2, 6, 3, 8, 5, 4, 1, 2, 6, 0, 5, 3, 8, 6, 1, 2, 1, 0, 7, 9, 6, 6, 3, 0]"],"[17, 23, 2, 7, 9, 7, 15, 8, 5, 10, 10]"],[["[8, 8, 2, 1, 8, 8, 4, 9, 4, 2, 8, 2, 6, 8, 4, 9, 1, 8, 1, 8, 8, 9, 1, 5, 4, 8, 6, 0, 8, 0]"],"[25, 8, 19, 5, 19, 9, 4, 14, 6, 3, 12, 4, 10, 12]"],[["[7, 7, 8, 9, 8, 4, 4, 1, 0, 8, 6, 3, 8, 7, 4, 2, 0, 4, 8, 1, 7, 2, 1, 8, 4, 9, 3, 8, 4, 7]"],"[13, 8, 24, 17, 11, 11, 21, 1, 19, 27, 6, 4, 18, 7, 9, 3]"],[["[6, 0, 3, 9, 9, 0, 3, 3, 5, 3, 0, 0, 7, 7, 6, 1, 1, 3, 5, 7, 0, 7, 0, 1, 3, 8, 7, 0, 3, 5]"],"[13, 3, 3, 10, 19, 1, 7, 7, 12, 13]"],[["[9, 3, 0, 5, 6, 4, 1, 7, 3, 0, 3, 8, 6, 5, 7, 5, 6, 5, 2, 4, 4, 9, 5, 6, 2, 2, 5, 1, 4, 1]"],"[9, 3, 0, 5]"],[["[9, 9, 3, 6, 3, 2, 8, 2, 7, 5, 5, 2, 4, 4, 4, 6, 7, 7, 5, 3, 9, 3, 5, 6, 2, 6, 2, 4, 4, 8]"],"[11, 16, 11, 8]"],[["[8, 5, 8, 8, 1, 1, 0, 3, 5, 6, 7, 9, 5, 3, 9, 4, 0, 7, 4, 4, 9, 5, 2, 7, 0, 9, 1, 0, 3, 2]"],"[8, 10, 9, 17, 5, 2, 0, 3, 7, 8, 15, 24, 5, 11, 21, 14, 14, 10, 7, 7, 9]"]],"type":"(list -> list)","name":"024","solution":"(letII (letII randnat (λx -> (+ (case (case x#1 of O => x#1 | S => (λn -> randnat)) of O => (letII x#1 (λx -> (inc randnat))) | S => (λn -> randnat)) (inc randnat)))) (λk -> (scanl (λacc act -> (letII acc#2 (λx -> (+ (case k#4 of O => randnat | S => (λn -> (letII k#5 (λx -> (case (flip 0.1) of True => acc#5 | False => randnat))))) act#2)))) 0 (take (+ k#1 randnat) #2))))","num_train":4},{"ios":[[["[8, 2, 7, 3, 9, 8, 6, 3, 9, 9, 8, 1, 3, 3, 2, 5, 4, 4, 4, 2, 8, 0, 9, 9, 6, 7, 1, 0, 8, 3]"],"[11, 2]"],[["[9, 1, 0, 9, 2, 2, 7, 3, 6, 8, 6, 1, 2, 5, 3, 9, 3, 9, 3, 9, 0, 2, 5, 3, 5, 0, 3, 6, 9, 9]"],"[2, 1, 0, 0, 0]"],[["[0, 8, 9, 8, 8, 8, 4, 9, 6, 2, 7, 4, 2, 2, 3, 2, 2, 0, 5, 7, 3, 0, 3, 8, 9, 9, 9, 7, 1, 2]"],"[0, 3, 9]"],[["[1, 6, 3, 5, 4, 6, 9, 1, 9, 4, 6, 7, 4, 3, 7, 0, 9, 3, 3, 8, 1, 5, 2, 3, 7, 5, 3, 0, 2, 6]"],"[11, 6, 3, 5, 4, 6, 9, 1]"],[["[3, 9, 8, 1, 2, 2, 9, 0, 1, 9, 2, 1, 8, 5, 9, 0, 0, 7, 8, 4, 2, 6, 9, 4, 8, 4, 6, 0, 7, 9]"],"[8, 9]"],[["[7, 4, 6, 6, 7, 3, 3, 7, 0, 3, 5, 0, 3, 5, 6, 0, 3, 0, 9, 8, 0, 4, 5, 8, 0, 8, 1, 0, 1, 0]"],"[2, 4]"],[["[0, 1, 3, 1, 8, 2, 9, 0, 9, 1, 8, 0, 3, 2, 3, 1, 9, 3, 1, 0, 1, 4, 5, 3, 4, 5, 1, 2, 1, 3]"],"[0, 0, 5, 1, 8, 2, 9]"],[["[3, 0, 5, 6, 9, 3, 1, 6, 9, 5, 5, 0, 0, 6, 6, 0, 1, 4, 6, 6, 4, 3, 2, 1, 9, 9, 8, 8, 5, 7]"],"[1, 0, 8, 6, 9, 3, 1]"]],"type":"(list -> list)","name":"025","solution":"(letII (inc 2) (λk -> (scanl (λacc act -> (letII randnat (λx -> (case acc#3 of O => (letII randnat (λx -> (- randnat k#5))) | S => (λn -> act#3))))) 0 (take (inc (case randnat of O => randnat | S => (λn -> randnat))) #2))))","num_train":4},{"ios":[[["[0, 3, 2, 2, 0, 8, 0, 2, 8, 3, 1, 4, 3, 5, 8, 3, 1, 1, 2, 8, 8, 9, 6, 9, 5, 4, 4, 2, 9, 3]"],"[0, 3, 2, 2, 0]"],[["[0, 8, 5, 1, 7, 0, 0, 9, 3, 5, 0, 1, 2, 5, 7, 5, 6, 8, 4, 6, 3, 8, 9, 7, 8, 6, 7, 4, 2, 1]"],"[0, 7, 7, 1, 1, 1]"],[["[4, 1, 9, 3, 4, 9, 6, 0, 3, 5, 6, 3, 0, 7, 8, 7, 0, 0, 8, 7, 8, 1, 3, 1, 4, 4, 0, 2, 0, 3]"],"[2, 1, 9, 3, 3, 9, 6, 0, 0]"],[["[7, 4, 3, 2, 2, 3, 4, 6, 3, 8, 9, 1, 3, 0, 8, 4, 3, 1, 9, 9, 7, 2, 0, 9, 0, 2, 1, 5, 8, 4]"],"[7, 2, 2, 2, 2, 2, 4, 4, 4]"],[["[9, 4, 8, 1, 1, 4, 6, 0, 3, 7, 2, 2, 8, 8, 9, 2, 5, 0, 8, 9, 2, 8, 7, 3, 7, 1, 2, 4, 9, 2]"],"[9, 5, 8, 1, 1, 4, 6, 0]"],[["[6, 1, 1, 4, 1, 4, 6, 0, 5, 1, 8, 8, 5, 1, 5, 4, 2, 5, 8, 4, 5, 5, 1, 9, 2, 9, 1, 4, 1, 1]"],"[2, 1, 1, 1, 1, 4, 4, 0]"],[["[0, 8, 8, 2, 8, 7, 2, 6, 7, 0, 1, 9, 8, 2, 0, 8, 6, 1, 8, 6, 7, 2, 5, 7, 0, 0, 4, 7, 7, 3]"],"[0, 8, 8, 2, 2, 7]"],[["[4, 4, 9, 1, 2, 1, 1, 0, 6, 9, 2, 0, 0, 5, 1, 6, 2, 6, 4, 7, 1, 2, 2, 2, 4, 0, 2, 8, 3, 7]"],"[0, 0, 0, 0, 3, 0, 0]"]],"type":"(list -> list)","name":"026","solution":"(letII (+ 5 (- 4 randnat)) (λk -> (scanl (λacc act -> (case (case randnat of O => randnat | S => (λn -> acc#3)) of O => (- (letII randnat (λx -> (inc act#2))) randnat) | S => (λn -> (case (flip 0.2) of True => acc#3 | False => act#2)))) 0 (take (letII k#1 (λx -> (case x#1 of O => (+ k#2 randnat) | S => (λn -> k#3)))) #2))))","num_train":4},{"ios":[[["[8, 7, 9, 3, 9, 0, 2, 5, 3, 6, 5, 1, 2, 5, 7, 2, 1, 1, 1, 5, 5, 5, 6, 7, 1, 9, 0, 5, 7, 3]"],"[3, 3, 2, 0, 0]"],[["[7, 8, 6, 1, 3, 1, 9, 6, 5, 9, 9, 9, 0, 9, 5, 0, 7, 9, 7, 0, 3, 1, 0, 0, 5, 4, 3, 2, 1, 7]"],"[2, 0, 0, 8, 0]"],[["[9, 6, 0, 5, 3, 8, 8, 5, 2, 0, 7, 0, 0, 5, 6, 6, 7, 5, 0, 9, 0, 5, 0, 5, 0, 7, 4, 3, 5, 5]"],"[1, 1, 1, 1, 0, 4, 1]"],[["[9, 2, 3, 1, 2, 9, 0, 1, 7, 4, 4, 7, 1, 7, 2, 1, 3, 2, 6, 7, 0, 0, 6, 8, 4, 8, 0, 8, 3, 4]"],"[8, 1, 2, 0, 2]"],[["[6, 9, 2, 0, 6, 8, 2, 9, 8, 9, 1, 5, 4, 0, 6, 5, 7, 4, 4, 4, 4, 5, 3, 2, 3, 2, 0, 1, 9, 9]"],"[0, 1, 3, 0, 1, 1, 20]"],[["[3, 7, 4, 9, 6, 4, 9, 6, 9, 0, 5, 5, 0, 0, 7, 3, 0, 7, 1, 8, 8, 8, 1, 1, 9, 3, 6, 5, 9, 8]"],"[9, 4, 9, 1, 6, 2, 2, 0, 9, 9, 7, 0, 0, 7, 8, 0, 0, 4, 9, 5, 13, 2, 9]"],[["[6, 1, 7, 3, 0, 5, 9, 8, 3, 9, 9, 5, 0, 7, 4, 8, 8, 0, 6, 2, 1, 5, 4, 8, 8, 0, 4, 3, 1, 1]"],"[1, 1, 1, 4, 0, 1, 6]"],[["[8, 4, 7, 0, 1, 1, 4, 0, 8, 4, 5, 8, 4, 3, 6, 7, 3, 1, 1, 3, 5, 2, 4, 4, 4, 0, 7, 8, 3, 0]"],"[4, 4, 4, 0, 4, 4, 3, 0, 4, 4, 4, 1, 3]"]],"type":"(list -> list)","name":"027","solution":"(letII (letII randnat (λx -> (case (flip 0.6) of True => randnat | False => randnat))) (λk -> (scanl (λacc act -> (case (letII acc#2 (λx -> (+ randnat act#2))) of O => (case randnat of O => k#3 | S => (λn -> act#2)) | S => (λn -> (case (flip 0.6) of True => randnat | False => k#4)))) 0 (take (letII k#1 (λx -> (+ (inc k#2) (letII (inc x#1) (λx -> (+ 4 x#2)))))) #2))))","num_train":4},{"ios":[[["[5, 6, 4, 4, 4, 2, 3, 1, 7, 9, 2, 0, 5, 1, 3, 8, 9, 4, 5, 0, 6, 1, 8, 0, 1, 3, 0, 1, 7, 1]"],"[23, 1, 0, 1, 3, 3, 0, 4, 6]"],[["[1, 5, 4, 8, 4, 7, 0, 8, 0, 8, 3, 1, 0, 2, 8, 4, 3, 3, 1, 2, 3, 8, 3, 7, 0, 6, 7, 3, 5, 9]"],"[0, 0, 5, 5, 7, 7, 0, 16, 0]"],[["[1, 0, 7, 6, 0, 4, 1, 7, 9, 5, 4, 8, 7, 7, 5, 1, 1, 0, 1, 9, 6, 6, 6, 3, 8, 6, 7, 2, 5, 8]"],"[0, 0, 5, 0, 0, 2, 2, 3, 3]"],[["[8, 4, 6, 1, 1, 8, 7, 1, 7, 1, 3, 3, 7, 8, 8, 6, 9, 9, 4, 4, 5, 7, 5, 4, 5, 1, 4, 7, 5, 2]"],"[0, 10, 10, 12, 12, 4, 4, 0, 7]"],[["[5, 2, 7, 9, 3, 4, 7, 9, 2, 7, 1, 3, 8, 6, 3, 1, 5, 5, 9, 9, 2, 8, 4, 9, 0, 1, 3, 5, 4, 6]"],"[0, 0, 1, 0, 0, 8, 0, 7, 7]"],[["[2, 5, 7, 5, 4, 2, 0, 4, 5, 8, 0, 8, 9, 8, 6, 7, 2, 4, 0, 5, 7, 2, 5, 9, 3, 0, 5, 4, 3, 9]"],"[4, 8, 2, 4, 2, 2, 0, 3, 4]"],[["[5, 0, 0, 1, 0, 3, 6, 7, 5, 1, 3, 7, 4, 9, 7, 8, 3, 6, 3, 4, 3, 7, 5, 7, 8, 7, 4, 6, 8, 8]"],"[0, 0, 0, 0, 0, 0, 3, 12, 6]"],[["[1, 8, 2, 0, 6, 8, 8, 8, 5, 6, 9, 2, 2, 8, 8, 7, 5, 3, 9, 0, 8, 6, 7, 2, 8, 5, 4, 2, 5, 5]"],"[0, 0, 0, 0, 12, 5, 6, 0, 4]"]],"type":"(list -> list)","name":"028","solution":"(letII 9 (λk -> (scanl (λacc act -> (letII k#3 (λx -> (case act#2 of O => act#2 | S => (λn -> (case (flip 0.3) of True => acc#4 | False => randnat)))))) 0 (take k#1 #2))))","num_train":4},{"ios":[[["[2, 5, 4, 4, 9, 4, 0, 7, 7, 2, 6, 4, 3, 6, 7, 1, 4, 9, 5, 9, 5, 9, 6, 9, 8, 1, 1, 1, 6, 3]"],"[2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]"],[["[6, 0, 1, 8, 9, 6, 5, 9, 6, 9, 6, 8, 4, 4, 4, 1, 6, 1, 7, 4, 0, 5, 5, 8, 2, 3, 4, 9, 8, 2]"],"[6, 0, 1]"],[["[9, 3, 9, 8, 6, 8, 6, 8, 8, 2, 5, 3, 5, 0, 4, 7, 9, 1, 4, 3, 4, 2, 9, 7, 4, 9, 9, 7, 1, 3]"],"[9, 0, 9, 0]"],[["[5, 9, 7, 0, 4, 3, 8, 0, 1, 2, 4, 5, 3, 6, 5, 4, 4, 3, 1, 6, 7, 4, 0, 6, 1, 0, 1, 8, 5, 9]"],"[5, 7, 7, 7, 7]"],[["[4, 2, 0, 4, 8, 8, 5, 8, 4, 7, 0, 2, 5, 3, 8, 6, 7, 5, 8, 9, 8, 8, 1, 8, 8, 3, 5, 7, 4, 5]"],"[4, 12, 12, 12, 12, 12, 12, 12]"],[["[1, 6, 3, 2, 2, 9, 6, 5, 3, 4, 1, 4, 4, 7, 7, 6, 9, 7, 4, 0, 5, 7, 4, 6, 8, 9, 8, 6, 5, 0]"],"[1, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27]"],[["[6, 9, 3, 4, 9, 6, 9, 0, 7, 9, 3, 1, 0, 0, 5, 6, 5, 6, 2, 4, 9, 6, 4, 3, 8, 1, 0, 6, 7, 5]"],"[6, 5, 5, 5]"],[["[1, 9, 9, 7, 1, 1, 8, 1, 7, 8, 8, 2, 0, 2, 9, 9, 3, 1, 3, 4, 8, 7, 4, 7, 0, 7, 9, 6, 3, 3]"],"[1, 12, 12, 12, 12, 12, 12, 12, 12]"]],"type":"(list -> list)","name":"029","solution":"(letII randnat (λk -> (scanl (λacc act -> (case acc#2 of O => act#1 | S => (λn -> k#4))) 0 (take (letII k#1 (λx -> (inc (inc randnat)))) #2))))","num_train":4},{"ios":[[["[3, 0, 7, 3, 3, 2, 7, 9, 6, 4, 8, 2, 7, 0, 7, 5, 3, 2, 9, 0, 0, 7, 1, 0, 3, 3, 4, 5, 1, 8]"],"[1, 1, 1, 2, 1, 1]"],[["[4, 9, 0, 2, 6, 7, 2, 1, 3, 8, 4, 3, 9, 7, 2, 4, 0, 8, 0, 1, 3, 5, 9, 8, 3, 9, 1, 2, 5, 9]"],"[1, 1, 1, 3, 1, 2]"],[["[5, 9, 2, 0, 9, 0, 5, 9, 0, 8, 4, 7, 8, 4, 6, 1, 7, 5, 5, 1, 7, 6, 3, 1, 0, 7, 0, 3, 2, 7]"],"[1, 1, 1, 1, 0, 0]"],[["[8, 5, 9, 4, 0, 7, 0, 3, 7, 7, 1, 6, 6, 1, 0, 9, 2, 7, 4, 8, 9, 4, 6, 0, 4, 6, 2, 5, 6, 8]"],"[1, 1, 1, 1, 1, 0]"],[["[8, 4, 2, 7, 0, 3, 7, 1, 0, 5, 8, 0, 7, 0, 1, 2, 0, 4, 5, 4, 3, 1, 1, 1, 7, 5, 8, 5, 6, 8]"],"[1, 5, 0, 1, 1, 1]"],[["[5, 4, 8, 6, 3, 9, 0, 0, 1, 9, 7, 7, 2, 1, 2, 9, 3, 3, 6, 9, 5, 4, 3, 9, 3, 1, 4, 0, 8, 1]"],"[1, 1, 1, 5, 1, 1]"],[["[9, 9, 3, 3, 7, 6, 6, 5, 6, 1, 1, 8, 1, 8, 8, 1, 4, 0, 6, 6, 0, 8, 2, 5, 5, 7, 9, 8, 2, 4]"],"[1, 8, 1, 1, 1, 1]"],[["[5, 3, 9, 4, 3, 8, 0, 6, 4, 4, 5, 4, 7, 5, 4, 5, 2, 8, 3, 9, 5, 3, 4, 7, 2, 9, 7, 6, 6, 5]"],"[1, 1, 1, 1, 2, 1]"]],"type":"(list -> list)","name":"030","solution":"(letII (case 0 of O => randnat | S => (λn -> (- randnat n#1))) (λk -> (scanl (λacc act -> (case randnat of O => (letII randnat (λx -> (case (flip 0.5) of True => (- act#2 acc#3) | False => randnat))) | S => (λn -> 1))) 0 (take (case (case 1 of O => randnat | S => (λn -> 2)) of O => (letII randnat (λx -> (- randnat randnat))) | S => (λn -> 6)) #2))))","num_train":4},{"ios":[[["[1, 1, 1, 1, 0, 0, 6, 7, 7, 8, 5, 7, 4, 1, 8, 6, 4, 5, 3, 1, 6, 3, 6, 6, 4, 1, 6, 3, 7, 0]"],"[2, 10, 8, 2, 0, 6, 0]"],[["[2, 8, 2, 3, 6, 1, 5, 5, 8, 1, 1, 5, 5, 0, 1, 2, 7, 8, 6, 0, 0, 6, 3, 0, 7, 0, 0, 9, 4, 8]"],"[0, 0, 5, 4, 0, 0, 0]"],[["[7, 8, 7, 8, 0, 6, 0, 2, 0, 5, 6, 0, 8, 0, 2, 6, 8, 5, 1, 1, 1, 9, 6, 5, 8, 4, 8, 0, 0, 6]"],"[0, 0, 0, 0, 0, 0, 4]"],[["[8, 6, 0, 6, 9, 5, 4, 8, 2, 1, 7, 5, 3, 0, 4, 4, 5, 8, 4, 1, 5, 8, 1, 5, 1, 8, 6, 8, 4, 3]"],"[0, 0, 0, 1, 0, 0, 0, 0]"],[["[2, 0, 4, 2, 6, 2, 6, 9, 5, 2, 0, 4, 7, 4, 8, 2, 0, 1, 4, 1, 7, 3, 3, 1, 8, 9, 1, 6, 5, 2]"],"[0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]"],[["[4, 3, 7, 3, 2, 9, 3, 2, 2, 0, 5, 0, 4, 0, 7, 8, 4, 0, 1, 3, 5, 1, 9, 0, 7, 2, 6, 4, 7, 4]"],"[7, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0]"],[["[5, 2, 8, 7, 1, 4, 5, 2, 2, 6, 8, 2, 4, 9, 7, 2, 7, 7, 9, 9, 7, 0, 6, 1, 6, 6, 1, 6, 8, 6]"],"[0, 0, 0, 4, 0, 0, 0, 4, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0]"],[["[5, 7, 0, 1, 8, 5, 3, 7, 4, 5, 3, 9, 4, 6, 7, 4, 9, 1, 1, 9, 3, 7, 2, 9, 8, 1, 0, 1, 5, 3]"],"[0, 0, 0, 0, 0, 0, 10, 0, 0]"]],"type":"(list -> list)","name":"031","solution":"(letII randnat (λk -> (scanl (λacc act -> (- (- randnat (letII k#3 (λx -> (case acc#3 of O => act#2 | S => (λn -> randnat))))) randnat)) 0 (take (+ (inc randnat) k#1) #2))))","num_train":4},{"ios":[[["[6, 2, 8, 3, 0, 1, 3, 6, 3, 2, 3, 6, 4, 6, 2, 6, 0, 0, 3, 0, 5, 9, 9, 4, 6, 1, 8, 8, 2, 6]"],"[12, 16, 32, 38, 38, 40, 46]"],[["[4, 5, 2, 6, 3, 6, 8, 8, 2, 7, 4, 3, 0, 9, 6, 6, 4, 2, 5, 1, 3, 7, 3, 4, 7, 5, 6, 3, 3, 1]"],"[8, 18, 22, 34, 40, 52, 68, 84, 88]"],[["[3, 9, 8, 3, 6, 1, 1, 4, 8, 1, 5, 4, 1, 0, 2, 5, 1, 5, 4, 2, 5, 6, 5, 4, 0, 5, 7, 7, 6, 3]"],"[6, 24]"],[["[3, 6, 0, 7, 3, 5, 8, 4, 5, 4, 3, 9, 5, 2, 9, 7, 0, 5, 3, 9, 7, 5, 9, 4, 3, 5, 4, 3, 9, 2]"],"[6, 18, 18, 32, 38, 48, 64, 72, 82, 90, 96, 114, 124, 128, 146, 160, 160]"],[["[6, 3, 8, 4, 5, 9, 7, 6, 2, 6, 2, 4, 1, 4, 2, 6, 9, 1, 1, 4, 6, 7, 9, 2, 9, 8, 7, 9, 7, 2]"],"[12, 18, 34, 42, 52, 70, 84, 96, 100, 112, 116]"],[["[0, 7, 3, 7, 6, 4, 2, 3, 5, 9, 2, 7, 8, 0, 0, 7, 0, 5, 0, 1, 5, 7, 5, 3, 1, 4, 8, 3, 6, 9]"],"[0, 14, 20, 34]"],[["[2, 7, 6, 9, 4, 0, 9, 4, 1, 8, 5, 4, 4, 8, 1, 8, 1, 7, 5, 2, 4, 9, 9, 8, 4, 0, 9, 9, 9, 8]"],"[4, 18, 30, 48, 56, 56, 74, 82, 84, 100, 110, 118, 126, 142, 144, 160]"],[["[7, 5, 2, 4, 4, 9, 7, 0, 0, 0, 7, 4, 6, 6, 4, 3, 0, 8, 1, 7, 2, 4, 5, 6, 1, 4, 8, 4, 5, 9]"],"[14, 24, 28, 36, 44]"]],"type":"(list -> list)","name":"032","solution":"(letII (letII randnat (λx -> (- randnat 6))) (λk -> (scanl (λacc act -> (+ (+ act#1 acc#2) act#1)) 0 (take (+ k#1 (letII randnat (λx -> (+ randnat randnat)))) #2))))","num_train":4},{"ios":[[["[6, 6, 5, 8, 5, 2, 4, 9, 5, 3, 4, 7, 1, 4, 5, 8, 6, 9, 7, 2, 2, 4, 5, 2, 3, 4, 8, 1, 8, 1]"],"[6, 6, 5, 8, 5, 2, 6, 9]"],[["[8, 7, 1, 5, 0, 2, 6, 9, 6, 0, 2, 0, 4, 1, 5, 9, 3, 2, 6, 8, 5, 3, 9, 2, 3, 5, 8, 9, 0, 8]"],"[14, 7, 1, 5, 0, 4, 6, 9, 6, 0, 2, 2]"],[["[7, 6, 7, 2, 6, 8, 1, 8, 7, 7, 6, 9, 2, 5, 5, 5, 4, 4, 2, 1, 2, 0, 7, 4, 4, 8, 6, 8, 8, 7]"],"[7, 0, 7, 5, 4, 8, 1, 8, 6, 13, 6, 9]"],[["[3, 0, 6, 2, 0, 1, 7, 8, 6, 5, 3, 2, 7, 9, 8, 9, 4, 1, 1, 0, 0, 1, 9, 8, 7, 3, 2, 6, 9, 5]"],"[3, 0, 5, 2, 0, 11, 7, 8]"],[["[7, 2, 9, 3, 7, 7, 1, 6, 1, 0, 4, 4, 5, 1, 1, 4, 1, 9, 9, 0, 9, 3, 6, 9, 4, 9, 5, 0, 9, 1]"],"[9, 2, 11, 3, 10, 7, 1, 7, 8, 0, 4, 4, 5, 1, 1, 5]"],[["[8, 9, 1, 2, 9, 0, 1, 9, 5, 1, 0, 8, 5, 4, 3, 4, 1, 0, 7, 5, 7, 9, 4, 5, 4, 1, 4, 3, 1, 6]"],"[8, 9, 1, 3, 9, 12, 1, 9, 14, 1, 0, 8, 13, 1, 2, 4, 1, 1]"],[["[6, 6, 3, 6, 5, 4, 3, 0, 9, 1, 2, 3, 0, 0, 9, 7, 3, 2, 5, 9, 8, 4, 5, 0, 8, 7, 9, 6, 9, 3]"],"[18, 6, 9, 15, 5, 9, 3, 0, 9, 1, 2, 3, 0, 0, 9, 7, 3, 0, 5, 9, 8, 0, 5, 5, 8, 7, 0, 6, 9, 3]"],[["[0, 2, 8, 6, 4, 6, 7, 6, 3, 7, 4, 7, 0, 6, 2, 0, 1, 1, 1, 0, 5, 3, 9, 8, 9, 5, 0, 2, 4, 9]"],"[12, 2, 8, 6, 4, 6, 13, 6, 3, 7, 4, 7, 0, 6]"]],"type":"(list -> list)","name":"033","solution":"(letII (+ 8 (case randnat of O => randnat | S => (λn -> (+ n#1 n#1)))) (λk -> (scanl (λacc act -> (letII (letII acc#2 (λx -> (case x#1 of O => randnat | S => (λn -> x#2)))) (λx -> (case (flip 0.2) of True => (+ act#2 x#1) | False => (case randnat of O => randnat | S => (λn -> act#3)))))) 0 (take (letII k#1 (λx -> (case x#1 of O => randnat | S => (λn -> (letII 1 (λx -> (case (flip 0.2) of True => x#3 | False => x#3))))))) #2))))","num_train":4},{"ios":[[["[4, 3, 3, 3, 7, 0, 2, 8, 4, 8, 8, 7, 6, 3, 1, 4, 1, 7, 0, 8, 0, 4, 8, 0, 9, 1, 6, 8, 4, 5]"],"[2, 2, 2, 7, 2, 9, 2, 2, 3, 2, 11, 2]"],[["[6, 3, 7, 8, 8, 2, 7, 1, 9, 9, 5, 5, 1, 8, 4, 8, 2, 5, 8, 5, 6, 5, 1, 0, 5, 2, 1, 0, 7, 5]"],"[3, 2, 2, 4, 2, 3, 2, 8, 21]"],[["[6, 5, 7, 0, 2, 1, 5, 7, 4, 0, 5, 3, 2, 3, 6, 7, 2, 6, 0, 1, 8, 0, 4, 6, 9, 7, 2, 5, 5, 9]"],"[8, 2, 2, 2, 5]"],[["[7, 9, 5, 9, 4, 8, 0, 6, 9, 3, 4, 6, 9, 3, 2, 8, 6, 0, 7, 1, 8, 6, 0, 7, 9, 4, 8, 2, 0, 6]"],"[8, 2, 2, 3, 2, 3]"],[["[3, 7, 6, 0, 2, 1, 5, 4, 5, 9, 0, 3, 8, 7, 2, 8, 4, 6, 8, 5, 8, 9, 5, 9, 4, 2, 3, 4, 6, 8]"],"[2, 6, 2, 2, 3, 4, 2, 3, 2, 2, 15, 2, 6, 2, 2, 4, 2, 15, 2, 2, 2, 2, 2, 4]"],[["[9, 1, 3, 7, 3, 9, 6, 0, 1, 0, 2, 1, 9, 4, 0, 3, 8, 6, 1, 1, 3, 8, 7, 2, 3, 1, 3, 2, 6, 6]"],"[2, 4, 11, 2, 2, 4, 2, 2]"],[["[1, 4, 6, 3, 9, 0, 8, 6, 5, 8, 6, 7, 1, 7, 0, 3, 0, 0, 7, 1, 6, 3, 7, 7, 3, 6, 2, 7, 7, 0]"],"[6, 2, 2, 4, 2, 9, 2, 16, 2, 2, 2, 3, 2, 4, 2, 2, 2, 10, 4, 2]"],[["[1, 0, 2, 7, 1, 1, 9, 2, 8, 4, 3, 7, 9, 7, 0, 3, 4, 2, 2, 4, 4, 4, 7, 4, 6, 5, 3, 6, 8, 5]"],"[2, 2, 4, 3, 2, 2, 3, 2]"]],"type":"(list -> list)","name":"034","solution":"(letII (inc (letII 9 (λx -> (inc randnat)))) (λk -> (scanl (λacc act -> (letII (letII acc#2 (λx -> (inc acc#3))) (λx -> (inc (letII act#2 (λx -> (inc (letII acc#4 (λx -> (- randnat x#1)))))))))) 0 (take (+ (letII k#1 (λx -> (inc randnat))) k#1) #2))))","num_train":4},{"ios":[[["[1, 9, 2, 1, 8, 5, 5, 1, 2, 7, 3, 2, 0, 0, 0, 7, 3, 7, 9, 5, 6, 0, 6, 1, 5, 0, 7, 8, 3, 0]"],"[4, 12, 6]"],[["[4, 4, 2, 2, 9, 8, 6, 4, 4, 1, 2, 0, 2, 4, 2, 7, 8, 4, 4, 3, 6, 2, 0, 1, 4, 8, 2, 4, 6, 9]"],"[6, 11, 4, 3]"],[["[9, 4, 6, 9, 3, 1, 0, 6, 1, 6, 5, 0, 5, 4, 1, 2, 0, 3, 3, 9, 4, 1, 4, 8, 2, 3, 5, 3, 1, 8]"],"[19, 11, 13]"],[["[9, 3, 9, 7, 6, 6, 5, 6, 6, 2, 6, 6, 5, 0, 8, 3, 1, 5, 1, 7, 4, 5, 6, 2, 0, 1, 1, 6, 6, 6]"],"[13, 15, 22, 30, 33]"],[["[0, 6, 3, 3, 7, 4, 5, 1, 3, 9, 6, 7, 0, 2, 0, 2, 5, 3, 8, 1, 6, 5, 6, 9, 4, 4, 7, 5, 5, 6]"],"[1, 7, 9, 15]"],[["[9, 4, 5, 7, 3, 7, 0, 2, 2, 1, 2, 8, 3, 3, 4, 3, 4, 0, 6, 3, 6, 9, 8, 8, 6, 4, 0, 9, 6, 8]"],"[9, 20, 5, 13, 23, 9, 5, 11, 6, 2]"],[["[8, 8, 0, 1, 5, 9, 8, 5, 2, 8, 6, 6, 5, 6, 7, 8, 3, 1, 5, 7, 2, 2, 3, 7, 1, 0, 6, 9, 6, 5]"],"[12, 20, 2, 8, 11, 16, 8, 22, 7]"],[["[5, 6, 1, 0, 3, 3, 8, 1, 8, 0, 3, 9, 6, 6, 7, 1, 6, 9, 5, 3, 6, 5, 4, 5, 6, 0, 9, 0, 7, 8]"],"[5, 9, 6, 1, 13, 3, 29, 10, 17, 29]"]],"type":"(list -> list)","name":"035","solution":"(letII (case (flip 0.6) of True => randnat | False => randnat) (λk -> (scanl (λacc act -> (+ randnat (+ act#1 (- (case k#3 of O => acc#2 | S => (λn -> randnat)) randnat)))) 0 (take (case (flip 0.8) of True => randnat | False => k#1) #2))))","num_train":4},{"ios":[[["[7, 0, 3, 9, 1, 9, 3, 6, 4, 9, 7, 9, 4, 8, 5, 4, 3, 9, 4, 7, 5, 6, 1, 5, 0, 8, 7, 2, 2, 6]"],"[0, 6, 13, 1, 1, 1]"],[["[8, 9, 0, 9, 0, 9, 4, 6, 3, 0, 5, 9, 0, 5, 3, 2, 5, 6, 6, 7, 5, 4, 5, 4, 2, 3, 3, 2, 3, 7]"],"[0, 0, 1, 8, 3, 4]"],[["[6, 6, 0, 7, 3, 4, 9, 5, 3, 1, 1, 4, 5, 9, 5, 5, 7, 0, 1, 5, 2, 3, 4, 7, 6, 6, 4, 1, 7, 3]"],"[4, 2, 4, 0, 7, 2]"],[["[5, 3, 5, 0, 4, 8, 3, 2, 8, 5, 8, 9, 6, 8, 2, 7, 2, 6, 9, 1, 3, 9, 5, 5, 1, 4, 5, 4, 6, 2]"],"[3, 11, 8, 8, 0, 16]"],[["[2, 2, 2, 2, 9, 8, 5, 8, 9, 9, 3, 5, 0, 7, 4, 5, 6, 7, 6, 6, 0, 3, 9, 9, 6, 1, 5, 7, 0, 2]"],"[20, 4, 9, 3, 0, 6]"],[["[7, 0, 9, 0, 2, 4, 6, 4, 1, 4, 5, 1, 1, 0, 3, 5, 7, 3, 9, 9, 5, 7, 2, 1, 1, 0, 1, 6, 8, 9]"],"[0, 2, 0, 0, 1, 1]"],[["[9, 9, 8, 2, 6, 8, 5, 6, 4, 6, 6, 4, 5, 0, 5, 7, 4, 4, 0, 6, 2, 6, 1, 7, 8, 2, 5, 6, 2, 5]"],"[1, 1, 18, 6, 4, 3]"],[["[0, 9, 2, 3, 7, 6, 9, 4, 3, 1, 0, 0, 7, 6, 5, 4, 2, 8, 8, 2, 3, 3, 2, 1, 0, 8, 1, 5, 2, 6]"],"[8, 2, 5, 3, 0, 6]"]],"type":"(list -> list)","name":"036","solution":"(letII (case 0 of O => (+ 7 randnat) | S => (λn -> (letII (letII 9 (λx -> (- n#2 0))) (λx -> (- x#1 9))))) (λk -> (scanl (λacc act -> (letII act#1 (λx -> (case k#4 of O => (letII 8 (λx -> (case (flip 0.2) of True => randnat | False => randnat))) | S => (λn -> (letII randnat (λx -> (case acc#5 of O => randnat | S => (λn -> randnat))))))))) 0 (take (letII 3 (λx -> (case x#1 of O => (case randnat of O => randnat | S => (λn -> randnat)) | S => (λn -> 6)))) #2))))","num_train":4},{"ios":[[["[4, 9, 0, 2, 1, 6, 2, 2, 7, 6, 5, 0, 8, 5, 7, 8, 6, 3, 5, 3, 3, 2, 7, 2, 3, 6, 7, 1, 4, 4]"],"[4, 9, 0, 2, 1, 5, 5, 2, 7, 6, 8, 0]"],[["[9, 7, 7, 4, 2, 9, 0, 2, 9, 2, 6, 8, 3, 0, 5, 9, 5, 2, 3, 3, 4, 4, 8, 2, 8, 3, 1, 8, 5, 5]"],"[9, 6, 1, 5, 2, 5, 4, 2, 2, 10, 0, 5]"],[["[3, 6, 6, 0, 3, 6, 9, 9, 5, 0, 9, 3, 5, 9, 3, 6, 8, 0, 0, 2, 0, 7, 0, 2, 3, 4, 3, 1, 5, 9]"],"[1, 1, 3, 3, 3, 2, 15, 9, 0, 8, 9, 9]"],[["[1, 9, 9, 3, 8, 6, 8, 0, 3, 1, 0, 3, 9, 4, 5, 1, 8, 9, 4, 2, 2, 7, 0, 0, 5, 4, 1, 3, 5, 3]"],"[10, 1, 0, 3, 8, 6, 4, 0, 6, 11, 7, 3]"],[["[9, 3, 4, 3, 7, 4, 0, 4, 4, 9, 4, 5, 6, 9, 8, 9, 4, 6, 0, 9, 1, 9, 5, 0, 0, 2, 0, 4, 8, 3]"],"[0, 0, 0, 3, 9, 0, 6, 5, 4, 0, 0, 6]"],[["[4, 3, 1, 5, 3, 2, 3, 8, 0, 6, 7, 8, 7, 2, 7, 8, 7, 1, 5, 8, 1, 6, 3, 8, 7, 6, 7, 1, 2, 3]"],"[0, 1, 1, 0, 2, 2, 0, 10, 9, 6, 2, 0]"],[["[5, 8, 2, 7, 0, 4, 4, 3, 4, 1, 7, 8, 4, 3, 1, 0, 0, 2, 5, 2, 4, 9, 4, 6, 0, 2, 1, 0, 9, 7]"],"[9, 8, 1, 7, 2, 4, 3, 3, 1, 1, 0, 2]"],[["[5, 8, 3, 8, 7, 0, 6, 2, 6, 8, 2, 3, 8, 6, 0, 0, 3, 4, 8, 0, 0, 9, 1, 0, 7, 9, 0, 4, 6, 0]"],"[5, 7, 3, 14, 7, 3, 1, 2, 4, 3, 2, 10]"]],"type":"(list -> list)","name":"037","solution":"(letII (letII (inc 3) (λx -> (case (== randnat x#1) of True => x#1 | False => x#1))) (λk -> (scanl (λacc act -> (case (letII (- randnat randnat) (λx -> (inc acc#3))) of O => (inc randnat) | S => (λn -> (case (flip 0.3) of True => act#2 | False => randnat)))) 0 (take (letII randnat (λx -> (+ k#2 8))) #2))))","num_train":4},{"ios":[[["[0, 4, 7, 3, 9, 4, 1, 6, 6, 4, 7, 6, 4, 4, 2, 6, 9, 4, 0, 0, 2, 9, 8, 4, 5, 9, 0, 4, 3, 6]"],"[0, 4, 1, 3, 0, 0, 0]"],[["[8, 1, 3, 2, 3, 1, 5, 7, 7, 8, 9, 0, 9, 7, 9, 8, 9, 0, 8, 9, 6, 4, 7, 2, 2, 3, 7, 3, 3, 4]"],"[7, 1, 0, 0, 2, 2, 1, 0, 6]"],[["[5, 0, 0, 5, 6, 5, 8, 7, 2, 2, 1, 5, 4, 6, 6, 4, 9, 3, 1, 0, 1, 1, 4, 0, 1, 6, 7, 5, 3, 6]"],"[0, 0, 0, 4, 4, 3, 8, 8, 2, 2, 2, 0, 0, 0, 0, 4]"],[["[5, 4, 8, 0, 0, 9, 8, 2, 4, 5, 7, 4, 5, 7, 8, 1, 7, 0, 5, 9, 7, 9, 1, 9, 7, 6, 4, 5, 9, 5]"],"[0, 0, 6, 6, 0, 8, 2]"],[["[8, 1, 9, 1, 3, 8, 3, 9, 5, 5, 2, 8, 4, 0, 1, 0, 3, 4, 6, 5, 7, 1, 2, 1, 1, 3, 5, 8, 1, 2]"],"[7, 0, 0, 0, 0, 5, 2]"],[["[4, 8, 7, 3, 1, 4, 1, 2, 5, 0, 7, 8, 9, 5, 5, 1, 4, 8, 7, 7, 1, 6, 7, 0, 3, 9, 2, 4, 8, 6]"],"[0, 3, 2, 0, 0, 3, 1, 0, 0, 0, 0, 8, 4, 4, 4, 1, 1, 8, 8, 1, 0, 6, 6, 0]"],[["[8, 9, 8, 0, 4, 9, 8, 7, 0, 8, 7, 2, 2, 1, 6, 5, 2, 4, 1, 3, 3, 4, 3, 6, 5, 3, 6, 9, 0, 1]"],"[7, 9, 8, 0, 0, 0, 0, 7, 2, 7, 0, 0, 1, 1, 1, 0, 0, 4, 1, 1, 1]"],[["[7, 4, 0, 4, 6, 4, 8, 1, 4, 8, 4, 3, 9, 5, 4, 9, 8, 7, 9, 8, 7, 4, 9, 1, 6, 4, 8, 7, 1, 7]"],"[6, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 6, 4, 0, 0, 0, 0, 8, 4]"]],"type":"(list -> list)","name":"038","solution":"(letII randnat (λk -> (scanl (λacc act -> (- (case (> randnat randnat) of True => acc#2 | False => act#1) (- randnat k#3))) 0 (take (letII randnat (λx -> (+ (+ 5 (letII x#1 (λx -> (- x#2 k#3)))) (- x#1 randnat)))) #2))))","num_train":4},{"ios":[[["[9, 5, 0, 5, 2, 2, 8, 9, 8, 9, 4, 4, 1, 8, 9, 7, 5, 9, 1, 2, 9, 9, 3, 9, 3, 2, 7, 1, 2, 3]"],"[9, 5, 4]"],[["[2, 6, 1, 6, 5, 3, 0, 6, 9, 4, 9, 6, 3, 5, 0, 8, 9, 0, 5, 0, 5, 3, 2, 1, 6, 4, 6, 0, 5, 2]"],"[2, 6, 1]"],[["[8, 0, 0, 4, 3, 6, 1, 1, 4, 4, 5, 9, 3, 9, 8, 7, 4, 0, 2, 4, 8, 9, 8, 8, 6, 3, 7, 2, 0, 5]"],"[8, 0, 0]"],[["[3, 2, 2, 3, 4, 9, 1, 4, 3, 5, 1, 5, 4, 0, 9, 5, 6, 0, 4, 0, 2, 3, 1, 4, 1, 1, 5, 9, 7, 4]"],"[3, 2, 2]"],[["[3, 3, 9, 0, 9, 7, 3, 3, 9, 6, 2, 0, 1, 6, 7, 4, 8, 8, 6, 1, 2, 0, 3, 7, 5, 2, 6, 2, 4, 3]"],"[3, 2, 9]"],[["[9, 3, 5, 1, 0, 0, 2, 1, 0, 1, 5, 9, 7, 0, 8, 0, 1, 5, 8, 7, 9, 5, 4, 6, 5, 0, 3, 0, 4, 4]"],"[9, 3, 2]"],[["[0, 1, 8, 6, 9, 7, 7, 2, 3, 1, 4, 6, 7, 5, 9, 5, 8, 4, 3, 0, 4, 4, 3, 9, 4, 0, 5, 7, 4, 5]"],"[0, 1, 8]"],[["[3, 9, 4, 4, 3, 6, 9, 0, 5, 2, 4, 9, 2, 9, 9, 7, 6, 0, 8, 3, 0, 7, 7, 5, 9, 2, 7, 1, 5, 6]"],"[3, 9, 4]"]],"type":"(list -> list)","name":"039","solution":"(letII (case (== randnat 3) of True => (letII randnat (λx -> (case (flip 0.3) of True => 0 | False => randnat))) | False => 3) (λk -> (scanl (λacc act -> (letII (case (flip 0.3) of True => acc#2 | False => act#1) (λx -> (case acc#3 of O => (case (flip 0.9) of True => act#2 | False => randnat) | S => (λn -> (case randnat of O => n#1 | S => (λn -> act#4))))))) 0 (take k#1 #2))))","num_train":4},{"ios":[[["[8, 5, 7, 4, 7, 5, 6, 7, 5, 2, 5, 5, 1, 8, 5, 9, 3, 5, 8, 0, 4, 0, 6, 9, 0, 1, 0, 3, 2, 1]"],"[1, 7, 2, 8, 4, 7]"],[["[2, 4, 2, 5, 5, 9, 7, 6, 2, 5, 2, 1, 4, 0, 9, 9, 7, 1, 9, 4, 1, 8, 0, 4, 5, 3, 5, 5, 6, 7]"],"[4, 0, 7, 7, 4, 19]"],[["[2, 1, 6, 7, 2, 1, 7, 9, 6, 1, 8, 7, 5, 8, 0, 6, 3, 4, 9, 9, 3, 4, 1, 4, 6, 4, 5, 3, 1, 7]"],"[0, 15, 0, 0, 1, 5]"],[["[2, 9, 7, 4, 2, 0, 6, 1, 0, 2, 3, 3, 4, 2, 5, 8, 1, 3, 3, 1, 2, 5, 6, 5, 8, 1, 0, 0, 0, 1]"],"[3, 0, 6, 19, 0, 4]"],[["[4, 1, 1, 9, 0, 9, 8, 3, 5, 2, 6, 4, 9, 1, 8, 8, 6, 1, 9, 4, 4, 2, 7, 7, 3, 7, 3, 1, 3, 1]"],"[2, 1, 1, 5, 2, 4]"],[["[4, 0, 1, 4, 8, 4, 1, 6, 6, 6, 3, 2, 8, 5, 3, 3, 8, 6, 9, 4, 8, 6, 7, 5, 2, 3, 9, 4, 9, 6]"],"[14, 5, 6, 0, 7, 1]"],[["[4, 5, 4, 8, 7, 8, 3, 5, 2, 6, 5, 9, 5, 8, 3, 2, 4, 0, 8, 2, 6, 5, 5, 5, 6, 2, 6, 5, 4, 7]"],"[10, 2, 7, 2, 10, 2]"],[["[3, 0, 8, 3, 1, 2, 0, 6, 9, 3, 7, 1, 2, 8, 6, 0, 7, 3, 4, 0, 0, 2, 6, 0, 9, 1, 7, 4, 1, 0]"],"[0, 0, 20, 15, 5, 8]"]],"type":"(list -> list)","name":"040","solution":"(letII (inc 5) (λk -> (scanl (λacc act -> (case randnat of O => (letII act#1 (λx -> (+ acc#3 randnat))) | S => (λn -> (case (flip 0.3) of True => randnat | False => randnat)))) 0 (take (case (== randnat randnat) of True => k#1 | False => k#1) #2))))","num_train":4},{"ios":[[["[7, 7, 6, 3, 4, 3, 8, 8, 2, 8, 3, 3, 1, 4, 9, 5, 0, 8, 4, 2, 4, 5, 4, 1, 2, 4, 0, 2, 5, 3]"],"[6, 6, 6, 1, 3, 3, 3, 3, 3, 3, 3, 0, 6, 6]"],[["[8, 9, 6, 2, 8, 2, 2, 7, 7, 4, 9, 1, 9, 0, 5, 1, 4, 2, 9, 2, 6, 0, 4, 8, 3, 8, 6, 1, 7, 5]"],"[0, 4]"],[["[9, 2, 3, 9, 5, 8, 2, 8, 3, 7, 8, 3, 2, 3, 2, 6, 9, 9, 9, 7, 2, 2, 7, 7, 7, 4, 7, 4, 7, 0]"],"[1, 3, 3]"],[["[5, 2, 0, 9, 7, 2, 6, 2, 1, 2, 2, 3, 4, 5, 4, 0, 7, 8, 1, 7, 7, 6, 0, 5, 8, 9, 7, 3, 5, 2]"],"[0, 2, 3]"],[["[8, 9, 7, 5, 8, 8, 9, 4, 6, 2, 1, 4, 8, 7, 0, 1, 3, 0, 6, 8, 8, 9, 9, 8, 3, 5, 0, 6, 0, 3]"],"[0, 0, 0, 7]"],[["[9, 3, 6, 5, 3, 0, 1, 0, 5, 1, 1, 5, 7, 4, 4, 3, 9, 3, 3, 4, 6, 8, 7, 0, 5, 3, 3, 4, 0, 0]"],"[0, 0, 6, 6, 6, 0]"],[["[8, 7, 3, 0, 7, 2, 3, 6, 7, 5, 8, 4, 8, 1, 3, 1, 4, 6, 6, 8, 7, 7, 1, 1, 5, 9, 5, 0, 2, 7]"],"[0, 12, 3, 3]"],[["[6, 2, 5, 2, 5, 8, 1, 6, 1, 8, 2, 4, 8, 6, 8, 2, 2, 5, 1, 2, 3, 6, 2, 6, 7, 3, 6, 7, 7, 7]"],"[3, 2, 2, 2]"]],"type":"(list -> list)","name":"041","solution":"(letII (letII 7 (λx -> (- (letII x#1 (λx -> (- x#2 9))) x#1))) (λk -> (scanl (λacc act -> (letII act#1 (λx -> (case (flip 0.5) of True => (case (flip 0.3) of True => acc#3 | False => acc#3) | False => randnat)))) 0 (take randnat #2))))","num_train":4},{"ios":[[["[7, 8, 1, 7, 7, 5, 1, 2, 8, 6, 4, 8, 2, 7, 2, 1, 6, 4, 3, 6, 2, 8, 9, 1, 5, 2, 3, 9, 0, 0]"],"[15, 8, 7, 4, 4, 12, 4, 5, 4, 18, 4, 7, 4, 4, 9, 5, 4, 4, 4, 4]"],[["[8, 0, 5, 7, 2, 6, 6, 6, 1, 4, 7, 5, 5, 5, 8, 0, 2, 2, 8, 0, 9, 7, 8, 4, 9, 0, 0, 2, 5, 6]"],"[13, 17, 4, 19, 4, 4, 5, 4, 4, 4, 4]"],[["[3, 2, 4, 5, 5, 3, 9, 7, 1, 6, 9, 1, 9, 8, 8, 3, 6, 4, 7, 1, 1, 7, 2, 9, 8, 7, 0, 2, 1, 8]"],"[5, 8, 5, 7, 10, 4, 4, 4, 4, 4, 4, 7, 4]"],[["[8, 0, 1, 9, 7, 5, 2, 5, 8, 0, 5, 2, 1, 4, 7, 7, 5, 4, 5, 1, 7, 5, 7, 4, 3, 3, 3, 9, 6, 9]"],"[4, 5, 10, 9, 6, 4, 4, 17, 4, 18, 8]"],[["[1, 9, 2, 9, 6, 2, 2, 1, 1, 0, 3, 1, 6, 2, 9, 6, 0, 8, 5, 1, 9, 8, 2, 0, 8, 1, 4, 7, 3, 5]"],"[4, 4, 4, 6, 4, 4, 4, 4, 4, 12, 4, 6, 4, 16, 4, 4, 9, 4]"],[["[2, 6, 8, 1, 0, 2, 2, 1, 0, 0, 1, 6, 4, 3, 4, 9, 9, 2, 6, 3, 0, 8, 9, 5, 6, 3, 5, 7, 6, 9]"],"[4, 4, 4, 4, 9]"],[["[1, 0, 2, 9, 3, 8, 2, 8, 9, 0, 7, 0, 9, 4, 3, 0, 1, 2, 2, 6, 7, 9, 8, 4, 3, 6, 5, 1, 1, 5]"],"[9, 1, 4, 4, 4, 12, 4, 7, 4, 12, 9, 0, 6, 8, 13, 6]"],[["[3, 4, 3, 9, 5, 7, 1, 2, 9, 2, 4, 1, 1, 1, 7, 5, 9, 7, 7, 2, 1, 1, 3, 5, 7, 3, 8, 6, 2, 2]"],"[6, 7, 4, 4, 6, 19, 10]"]],"type":"(list -> list)","name":"042","solution":"(letII (inc (inc (letII randnat (λx -> (case (flip 0.9) of True => (letII x#1 (λx -> (case x#1 of O => 0 | S => (λn -> x#2)))) | False => randnat))))) (λk -> (scanl (λacc act -> (letII acc#2 (λx -> (+ (case act#2 of O => randnat | S => (λn -> 4)) (- randnat randnat))))) 0 (take (letII 9 (λx -> (+ k#2 (case (flip 0.2) of True => randnat | False => x#1)))) #2))))","num_train":4},{"ios":[[["[3, 5, 0, 3, 2, 6, 7, 0, 5, 2, 4, 7, 6, 3, 5, 9, 5, 1, 0, 3, 8, 9, 3, 3, 7, 0, 6, 0, 9, 0]"],"[7, 5, 0, 9, 2, 6, 7, 0]"],[["[6, 5, 2, 1, 3, 3, 5, 8, 0, 9, 0, 1, 4, 1, 9, 5, 3, 1, 5, 5, 6, 9, 8, 0, 0, 9, 4, 3, 2, 6]"],"[0, 2, 2, 1, 3, 3, 5, 8]"],[["[6, 4, 0, 3, 3, 0, 6, 1, 6, 5, 8, 5, 7, 2, 7, 9, 8, 3, 6, 1, 0, 1, 9, 9, 9, 4, 4, 9, 9, 7]"],"[4, 4, 0, 9, 3, 0, 0, 1]"],[["[0, 9, 1, 6, 7, 3, 4, 1, 6, 7, 0, 9, 7, 0, 0, 7, 0, 5, 4, 7, 8, 3, 6, 6, 3, 8, 8, 1, 7, 6]"],"[6, 9, 1, 6]"],[["[1, 4, 4, 8, 4, 5, 4, 8, 4, 6, 0, 0, 1, 1, 4, 6, 7, 0, 1, 6, 9, 7, 4, 3, 5, 7, 7, 2, 4, 6]"],"[1, 4, 4, 8, 4, 5, 4, 8]"],[["[1, 4, 8, 0, 3, 2, 0, 0, 6, 9, 3, 6, 6, 3, 9, 4, 0, 2, 8, 7, 3, 0, 3, 7, 4, 0, 9, 8, 6, 6]"],"[13, 4, 8, 0, 1]"],[["[1, 8, 1, 5, 0, 2, 3, 6, 9, 0, 2, 4, 7, 2, 4, 4, 3, 2, 8, 6, 2, 9, 5, 0, 7, 3, 0, 8, 7, 9]"],"[5, 8, 1, 5, 0, 9, 3, 6, 9]"],[["[6, 7, 5, 0, 2, 6, 6, 5, 0, 6, 1, 4, 6, 4, 5, 2, 6, 9, 0, 0, 0, 3, 8, 2, 4, 7, 2, 5, 8, 6]"],"[4, 7, 5, 0]"]],"type":"(list -> list)","name":"043","solution":"(letII (case (flip 0.7) of True => randnat | False => 4) (λk -> (scanl (λacc act -> (case acc#2 of O => randnat | S => (λn -> act#2))) 0 (take (letII k#1 (λx -> (case (> x#1 randnat) of True => randnat | False => 8))) #2))))","num_train":4},{"ios":[[["[6, 4, 4, 2, 9, 1, 7, 2, 2, 3, 5, 7, 6, 8, 1, 2, 7, 5, 6, 2, 4, 7, 5, 6, 6, 2, 9, 7, 2, 7]"],"[1, 2, 3]"],[["[3, 4, 8, 8, 2, 4, 8, 7, 8, 8, 5, 0, 9, 7, 0, 3, 1, 5, 7, 4, 3, 0, 3, 6, 2, 9, 4, 5, 0, 3]"],"[1, 2, 3]"],[["[5, 2, 6, 5, 7, 4, 8, 3, 8, 8, 7, 1, 3, 6, 3, 7, 5, 4, 6, 9, 5, 4, 4, 3, 6, 9, 8, 1, 9, 3]"],"[1, 2, 3]"],[["[7, 5, 7, 8, 8, 6, 4, 0, 3, 1, 0, 2, 2, 5, 0, 8, 7, 0, 7, 2, 0, 2, 4, 4, 6, 7, 3, 8, 9, 6]"],"[1, 1, 2]"],[["[6, 9, 7, 1, 1, 5, 4, 9, 2, 8, 3, 1, 2, 1, 8, 1, 3, 0, 2, 7, 1, 2, 4, 9, 2, 0, 8, 7, 7, 1]"],"[7, 20, 21]"],[["[0, 8, 1, 0, 8, 2, 8, 3, 8, 3, 7, 5, 6, 5, 1, 5, 5, 6, 3, 2, 8, 0, 9, 3, 3, 8, 0, 6, 7, 6]"],"[3, 8, 9]"],[["[7, 4, 3, 5, 2, 1, 1, 6, 3, 5, 2, 0, 4, 7, 7, 9, 5, 7, 8, 6, 9, 5, 2, 1, 5, 7, 0, 1, 7, 6]"],"[2, 3, 4]"],[["[3, 7, 4, 7, 6, 2, 5, 0, 7, 9, 7, 3, 6, 7, 4, 9, 9, 8, 8, 4, 1, 1, 2, 2, 0, 8, 8, 2, 7, 6]"],"[8, 9, 10]"]],"type":"(list -> list)","name":"044","solution":"(letII (+ 5 2) (λk -> (scanl (λacc act -> (letII act#1 (λx -> (case (flip 0.7) of True => (inc acc#3) | False => (case (flip 0.1) of True => k#4 | False => randnat))))) 0 (take (case (flip 0.1) of True => 6 | False => 3) #2))))","num_train":4},{"ios":[[["[2, 1, 3, 4, 5, 0, 9, 9, 0, 3, 8, 7, 5, 7, 2, 6, 9, 6, 4, 2, 9, 1, 0, 2, 9, 8, 8, 2, 0, 6]"],"[3, 3, 5, 4, 4, 5, 9, 18, 12]"],[["[1, 9, 2, 8, 8, 0, 8, 6, 5, 2, 7, 7, 7, 3, 7, 2, 1, 2, 4, 9, 4, 1, 1, 9, 3, 8, 3, 5, 1, 4]"],"[1, 12, 3, 3, 14]"],[["[3, 2, 4, 0, 9, 8, 6, 6, 9, 9, 6, 6, 8, 4, 0, 8, 7, 2, 2, 3, 5, 7, 2, 3, 5, 3, 9, 2, 6, 6]"],"[17, 5, 10, 15, 10, 8, 6, 6, 15, 22]"],[["[7, 1, 8, 9, 4, 5, 7, 1, 9, 0, 6, 4, 3, 5, 0, 9, 2, 7, 8, 0, 7, 7, 2, 4, 0, 6, 2, 6, 1, 2]"],"[15, 13, 18, 18, 18, 16, 7, 4, 19, 17, 17, 17, 3, 5, 8, 9]"],[["[8, 1, 2, 4, 9, 7, 0, 6, 0, 5, 9, 6, 7, 1, 0, 2, 2, 7, 1, 4, 1, 8, 3, 0, 0, 9, 9, 9, 9, 1]"],"[13, 4, 3, 7, 19, 16, 5, 18]"],[["[2, 6, 9, 6, 9, 3, 3, 9, 6, 4, 1, 2, 5, 9, 6, 6, 3, 2, 4, 2, 2, 2, 1, 2, 9, 8, 3, 4, 9, 6]"],"[0, 8, 8, 8, 12, 12, 12, 12, 19, 19, 5, 10, 6]"],[["[8, 6, 9, 7, 6, 5, 7, 8, 2, 9, 0, 8, 2, 7, 8, 7, 4, 2, 5, 2, 7, 6, 1, 2, 3, 5, 5, 9, 2, 3]"],"[11, 11, 10, 7, 7, 7, 7, 10]"],[["[4, 9, 2, 3, 2, 7, 8, 6, 5, 2, 6, 5, 3, 9, 2, 3, 4, 2, 6, 7, 8, 1, 5, 7, 5, 8, 7, 8, 3, 0]"],"[6, 10, 8]"]],"type":"(list -> list)","name":"045","solution":"(letII (case (> 3 randnat) of True => 5 | False => (case 7 of O => randnat | S => (λn -> randnat))) (λk -> (scanl (λacc act -> (case randnat of O => acc#2 | S => (λn -> (+ act#2 n#1)))) 0 (take (+ randnat (case k#1 of O => randnat | S => (λn -> k#2))) #2))))","num_train":4},{"ios":[[["[8, 5, 8, 9, 9, 7, 9, 6, 6, 3, 3, 9, 5, 7, 1, 1, 2, 6, 5, 9, 6, 0, 1, 7, 4, 1, 9, 8, 3, 1]"],"[0, 4, 4, 10]"],[["[8, 8, 0, 9, 4, 6, 1, 8, 2, 2, 4, 3, 1, 0, 7, 8, 1, 8, 2, 2, 4, 3, 0, 0, 4, 0, 2, 7, 3, 1]"],"[5, 4, 2, 4]"],[["[5, 2, 6, 1, 3, 4, 3, 1, 4, 3, 7, 0, 0, 0, 5, 0, 0, 8, 5, 2, 9, 2, 7, 6, 7, 1, 0, 6, 1, 8]"],"[4, 8, 0, 4]"],[["[0, 3, 1, 6, 7, 1, 9, 7, 5, 5, 3, 1, 3, 0, 4, 8, 3, 7, 7, 6, 7, 4, 7, 4, 9, 7, 2, 3, 6, 4]"],"[4, 5, 4, 4]"],[["[7, 4, 2, 0, 3, 7, 4, 6, 2, 3, 9, 2, 9, 7, 7, 6, 1, 9, 0, 3, 5, 9, 8, 2, 4, 8, 4, 9, 8, 7]"],"[4, 5, 4, 5]"],[["[3, 5, 0, 7, 9, 3, 8, 3, 0, 7, 3, 5, 7, 1, 1, 5, 4, 2, 3, 7, 2, 4, 1, 5, 4, 2, 8, 5, 2, 9]"],"[5, 4, 4, 4]"],[["[1, 4, 0, 4, 4, 9, 8, 1, 9, 3, 4, 9, 1, 9, 1, 0, 8, 4, 4, 1, 0, 7, 6, 5, 7, 4, 7, 6, 5, 4]"],"[4, 4, 4, 4, 4, 15, 4, 0, 4, 0, 4, 0, 4, 4, 0, 4, 11, 4, 10, 3, 4, 5]"],[["[6, 2, 6, 1, 2, 7, 4, 4, 8, 5, 0, 6, 5, 1, 9, 1, 0, 3, 8, 1, 6, 3, 8, 9, 8, 8, 5, 2, 4, 2]"],"[8, 12, 8, 4]"]],"type":"(list -> list)","name":"046","solution":"(letII 4 (λk -> (scanl (λacc act -> (case (letII acc#2 (λx -> (case (flip 0.1) of True => randnat | False => randnat))) of O => (- randnat act#1) | S => (λn -> (+ (- randnat n#1) k#4)))) 0 (take (case (+ randnat randnat) of O => (inc k#1) | S => (λn -> (case (flip 0.9) of True => k#2 | False => n#1))) #2))))","num_train":4},{"ios":[[["[3, 1, 4, 3, 3, 4, 8, 4, 8, 1, 8, 9, 9, 4, 9, 9, 7, 0, 6, 1, 3, 5, 6, 2, 0, 5, 0, 1, 4, 1]"],"[16, 18, 18, 16, 16, 17, 13, 15, 12, 12]"],[["[0, 3, 1, 2, 7, 9, 0, 1, 6, 5, 2, 3, 4, 3, 9, 2, 3, 2, 1, 5, 5, 5, 6, 0, 0, 0, 6, 4, 3, 0]"],"[0, 0, 0, 21, 20, 16, 16]"],[["[4, 3, 4, 9, 8, 5, 0, 2, 3, 7, 6, 3, 3, 8, 3, 7, 1, 0, 4, 4, 8, 5, 4, 6, 6, 6, 7, 5, 9, 7]"],"[9, 9, 7, 8, 3, 10, 10, 10, 10, 4]"],[["[0, 9, 5, 9, 9, 4, 2, 0, 7, 3, 6, 6, 2, 0, 2, 8, 9, 4, 0, 5, 9, 3, 8, 5, 4, 1, 7, 1, 3, 7]"],"[0, 17, 16, 13, 13, 13, 13, 13, 18, 17, 19, 19, 19, 19, 18, 15, 11, 11, 11]"],[["[2, 6, 2, 6, 9, 5, 9, 9, 3, 8, 8, 2, 8, 8, 5, 6, 8, 5, 8, 0, 6, 8, 1, 2, 8, 6, 1, 3, 2, 0]"],"[0, 9, 13, 13, 7, 7, 5, 8, 8, 8, 10, 10]"],[["[6, 8, 1, 2, 5, 7, 7, 8, 4, 0, 1, 8, 5, 7, 8, 2, 2, 4, 5, 3, 5, 0, 4, 8, 5, 1, 7, 9, 8, 5]"],"[14, 9, 9, 15, 15, 12, 9, 9, 14, 14]"],[["[8, 6, 3, 3, 5, 9, 5, 7, 4, 5, 1, 7, 8, 8, 8, 7, 9, 6, 8, 7, 4, 5, 1, 0, 4, 5, 6, 5, 5, 3]"],"[1, 3]"],[["[7, 9, 1, 8, 8, 3, 1, 5, 6, 7, 0, 3, 8, 6, 4, 9, 9, 3, 3, 8, 3, 4, 1, 7, 3, 1, 9, 5, 6, 6]"],"[6, 6, 6, 6, 8, 11, 11, 11, 10, 10, 10, 10, 10, 8, 10, 5, 12, 12, 12]"]],"type":"(list -> list)","name":"047","solution":"(letII (inc (inc (+ (+ randnat randnat) 4))) (λk -> (scanl (λacc act -> (case (- act#1 randnat) of O => acc#2 | S => (λn -> (letII n#1 (λx -> (- k#5 n#2)))))) 0 (take (letII randnat (λx -> (+ randnat randnat))) #2))))","num_train":4},{"ios":[[["[9, 9, 1, 1, 9, 5, 4, 2, 0, 3, 1, 3, 1, 7, 2, 9, 1, 9, 3, 5, 0, 1, 1, 2, 5, 9, 0, 8, 7, 9]"],"[1, 2, 2, 3, 4, 8, 13, 22, 26]"],[["[4, 2, 3, 9, 1, 0, 1, 4, 4, 5, 0, 6, 7, 1, 1, 7, 3, 2, 8, 9, 9, 9, 3, 0, 0, 4, 4, 5, 2, 7]"],"[3, 8, 8, 9, 14, 15, 15]"],[["[8, 1, 4, 2, 7, 9, 1, 0, 4, 6, 4, 3, 2, 6, 0, 7, 3, 3, 6, 0, 5, 3, 8, 3, 3, 9, 8, 0, 9, 3]"],"[0, 9]"],[["[4, 0, 1, 5, 1, 3, 8, 8, 4, 3, 7, 7, 4, 2, 9, 0, 4, 9, 8, 8, 2, 7, 6, 1, 2, 3, 1, 9, 6, 8]"],"[2, 13]"],[["[6, 2, 4, 9, 9, 6, 4, 8, 6, 9, 4, 6, 0, 8, 2, 6, 4, 1, 9, 8, 2, 9, 5, 1, 7, 8, 3, 9, 1, 7]"],"[1, 2, 12, 13, 23, 25, 33, 34, 34, 37]"],[["[8, 8, 3, 1, 1, 1, 3, 1, 8, 0, 1, 6, 3, 6, 1, 4, 8, 5, 4, 0, 8, 9, 4, 9, 6, 7, 2, 2, 7, 8]"],"[4, 4, 6, 7]"],[["[5, 3, 5, 1, 3, 3, 9, 2, 8, 9, 1, 3, 2, 0, 2, 2, 7, 1, 8, 2, 1, 6, 5, 0, 2, 4, 6, 9, 7, 6]"],"[3, 13, 19, 19, 22, 25, 26]"],[["[5, 3, 5, 4, 1, 8, 3, 2, 1, 7, 1, 2, 9, 9, 3, 1, 8, 1, 3, 0, 9, 1, 9, 4, 1, 0, 9, 2, 0, 8]"],"[6, 10]"]],"type":"(list -> list)","name":"048","solution":"(letII (letII 1 (λx -> (inc randnat))) (λk -> (scanl (λacc act -> (letII act#1 (λx -> (+ randnat acc#3)))) 0 (take (inc k#1) #2))))","num_train":4},{"ios":[[["[4, 3, 2, 2, 0, 5, 1, 5, 9, 3, 5, 8, 9, 9, 2, 3, 3, 1, 4, 3, 3, 5, 7, 3, 9, 0, 4, 9, 0, 1]"],"[7, 0, 1, 2, 0, 0, 0, 6]"],[["[3, 2, 1, 0, 0, 0, 7, 9, 4, 2, 5, 8, 5, 1, 8, 3, 1, 2, 9, 4, 3, 1, 5, 7, 8, 1, 5, 6, 3, 9]"],"[0, 1, 0, 0, 0, 10, 0, 0]"],[["[2, 0, 3, 3, 8, 2, 0, 5, 9, 0, 7, 7, 1, 8, 4, 5, 9, 2, 7, 3, 4, 6, 2, 0, 8, 1, 1, 1, 4, 5]"],"[2, 3, 5, 0, 0, 3, 0, 0]"],[["[9, 4, 2, 4, 1, 4, 9, 6, 9, 1, 6, 7, 4, 2, 7, 9, 1, 1, 3, 4, 2, 2, 8, 9, 3, 7, 6, 9, 1, 5]"],"[5, 0, 0, 1, 5, 0, 0, 0]"],[["[5, 8, 2, 7, 2, 6, 3, 2, 0, 4, 2, 5, 6, 3, 7, 1, 9, 4, 3, 9, 3, 6, 2, 9, 1, 7, 2, 0, 5, 7]"],"[0, 0, 5, 0, 8, 0, 3, 3, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0]"],[["[7, 0, 7, 5, 6, 5, 7, 1, 6, 9, 5, 9, 4, 8, 9, 9, 4, 4, 8, 4, 5, 2, 8, 0, 3, 6, 4, 4, 7, 9]"],"[0, 8, 0, 0, 2, 0, 0, 4]"],[["[9, 5, 9, 3, 4, 0, 4, 6, 2, 6, 3, 1, 5, 4, 7, 3, 8, 9, 5, 2, 6, 5, 0, 8, 1, 1, 2, 7, 2, 9]"],"[0, 0, 3, 0, 0, 6, 0, 0, 0]"],[["[0, 7, 3, 2, 4, 9, 7, 2, 3, 7, 5, 0, 4, 4, 1, 4, 8, 6, 1, 8, 2, 7, 6, 0, 3, 7, 3, 9, 1, 9]"],"[4, 2, 0, 3, 5, 0, 7, 0]"]],"type":"(list -> list)","name":"049","solution":"(letII (+ (inc randnat) (case (flip 0.6) of True => randnat | False => randnat)) (λk -> (scanl (λacc act -> (- randnat (case (flip 0.7) of True => act#1 | False => acc#2))) 0 (take (+ (- (case randnat of O => 3 | S => (λn -> n#1)) k#1) 8) #2))))","num_train":4},{"ios":[[["[0, 4, 2, 2, 7, 9, 3, 9, 1, 8, 2, 2, 0, 1, 2, 3, 0, 0, 6, 2, 0, 8, 5, 5, 8, 1, 7, 0, 3, 8]"],"[18, 30, 40, 50, 65, 82, 93, 110, 119]"],[["[4, 7, 7, 3, 3, 6, 6, 9, 9, 2, 7, 9, 6, 7, 1, 9, 4, 4, 3, 3, 3, 8, 9, 0, 2, 5, 2, 2, 6, 0]"],"[12, 27, 42, 53, 64, 78, 92, 109, 126]"],[["[5, 6, 4, 4, 0, 6, 5, 7, 0, 3, 6, 0, 3, 0, 9, 9, 6, 7, 3, 2, 0, 3, 5, 5, 1, 3, 1, 9, 6, 2]"],"[13, 27, 39, 51, 75, 89, 102, 117, 135]"],[["[7, 3, 3, 3, 1, 4, 4, 6, 4, 9, 5, 0, 6, 2, 8, 2, 6, 8, 6, 3, 7, 5, 1, 4, 5, 4, 8, 8, 4, 5]"],"[15, 26, 37, 48, 57, 69, 81, 95, 107]"],[["[9, 7, 5, 3, 6, 4, 0, 8, 6, 9, 7, 7, 0, 9, 5, 7, 0, 0, 2, 4, 2, 3, 9, 2, 4, 3, 9, 3, 4, 3]"],"[17, 32, 45, 56, 70, 82, 102, 118, 132]"],[["[3, 4, 5, 3, 3, 7, 9, 2, 2, 9, 8, 4, 0, 8, 5, 9, 8, 1, 2, 0, 0, 4, 6, 4, 4, 0, 0, 8, 5, 5]"],"[11, 23, 36, 47, 58, 73, 90, 100, 110]"],[["[2, 7, 8, 2, 7, 8, 1, 8, 2, 2, 7, 8, 0, 7, 3, 2, 4, 2, 5, 9, 0, 8, 1, 1, 1, 6, 3, 5, 1, 1]"],"[10, 25, 41, 51, 66, 82, 91, 107, 117]"],[["[7, 8, 2, 6, 5, 9, 1, 0, 1, 8, 0, 8, 9, 4, 5, 6, 0, 9, 0, 0, 4, 2, 2, 6, 9, 7, 7, 4, 4, 4]"],"[15, 31, 41, 55, 68, 85, 94, 125, 134]"]],"type":"(list -> list)","name":"050","solution":"(letII (case (flip 0.1) of True => randnat | False => 9) (λk -> (scanl (λacc act -> (+ (+ acc#2 k#3) (case act#1 of O => (+ randnat k#3) | S => (λn -> n#1)))) 0 (take k#1 #2))))","num_train":4},{"ios":[[["[9, 0, 2, 8, 7, 4, 9, 7, 0, 8, 6, 7, 9, 2, 9, 9, 7, 4, 0, 6, 6, 6, 2, 0, 8, 0, 3, 5, 0, 6]"],"[13, 2, 6, 10, 12, 12, 13, 11, 4, 8, 8, 9]"],[["[7, 7, 6, 0, 4, 4, 6, 0, 7, 4, 5, 6, 9, 8, 8, 5, 2, 4, 8, 9, 3, 7, 5, 3, 0, 7, 7, 1, 5, 5]"],"[9, 7, 12, 1, 9, 11, 13, 0, 22, 9, 5]"],[["[6, 4, 4, 8, 2, 2, 0, 3, 2, 9, 1, 9, 9, 1, 4, 2, 1, 7, 8, 9, 2, 2, 8, 2, 4, 9, 5, 4, 1, 7]"],"[8, 8, 4, 8, 4, 5, 2, 6, 3]"],[["[8, 4, 3, 6, 6, 8, 4, 2, 4, 1, 9, 0, 5, 5, 4, 9, 4, 8, 9, 9, 7, 1, 9, 0, 4, 2, 8, 3, 0, 1]"],"[14, 4, 8, 9, 7, 9, 7, 4, 5]"],[["[6, 3, 4, 7, 0, 5, 4, 4, 0, 0, 8, 0, 1, 1, 3, 1, 7, 5, 2, 2, 6, 9, 6, 1, 8, 4, 3, 6, 6, 1]"],"[7, 8, 4, 11, 1, 13, 17, 8]"],[["[7, 3, 1, 3, 0, 4, 9, 2, 3, 3, 4, 1, 3, 2, 2, 9, 5, 9, 4, 8, 7, 5, 1, 6, 7, 0, 0, 6, 2, 3]"],"[7, 3, 19, 12, 2, 23, 9, 4, 9, 6, 6]"],[["[6, 6, 4, 4, 3, 2, 3, 1, 7, 4, 9, 1, 8, 5, 7, 9, 4, 6, 2, 0, 1, 0, 0, 4, 1, 7, 1, 5, 0, 5]"],"[14, 8, 5, 7, 7, 9, 3, 2, 18, 4, 18]"],[["[5, 9, 1, 6, 1, 6, 0, 3, 4, 4, 9, 3, 1, 4, 6, 3, 7, 6, 6, 0, 1, 9, 8, 8, 1, 2, 8, 4, 1, 1]"],"[5, 10, 3, 8, 2, 8, 2]"]],"type":"(list -> list)","name":"051","solution":"(letII (letII (- randnat randnat) (λx -> (case x#1 of O => randnat | S => (λn -> randnat)))) (λk -> (scanl (λacc act -> (letII acc#2 (λx -> (+ act#2 randnat)))) 0 (take (+ 7 k#1) #2))))","num_train":4},{"ios":[[["[1, 7, 0, 0, 3, 6, 0, 0, 7, 6, 2, 2, 7, 9, 4, 0, 4, 9, 3, 3, 3, 1, 7, 9, 2, 8, 4, 7, 0, 3]"],"[18, 4, 10, 0, 3, 4, 4, 5, 2, 10, 2, 3, 3, 2, 3, 0, 6, 7, 3, 1, 1, 5, 1, 3, 1]"],[["[8, 7, 4, 7, 6, 8, 6, 6, 5, 6, 6, 7, 5, 0, 3, 4, 7, 4, 3, 9, 7, 4, 9, 8, 2, 6, 7, 3, 1, 4]"],"[6, 2, 5, 2, 1, 1, 6, 2, 5, 2]"],[["[8, 9, 2, 3, 2, 6, 6, 0, 7, 0, 1, 1, 3, 6, 0, 9, 5, 1, 5, 1, 4, 6, 7, 8, 3, 5, 2, 3, 7, 9]"],"[15, 3, 2, 10, 2, 3, 4, 3, 2]"],[["[6, 6, 8, 1, 5, 7, 6, 8, 0, 5, 3, 8, 9, 6, 9, 7, 0, 7, 6, 3, 9, 0, 7, 7, 8, 5, 8, 1, 1, 1]"],"[6, 1, 4, 2, 2]"],[["[5, 8, 0, 6, 8, 7, 6, 8, 1, 5, 7, 3, 6, 7, 8, 6, 8, 5, 6, 5, 2, 8, 7, 3, 6, 1, 7, 8, 1, 4]"],"[5, 1, 2, 1, 8, 5, 16, 3, 3, 12, 4, 6, 6]"],[["[8, 9, 8, 5, 0, 0, 4, 1, 1, 4, 1, 7, 8, 4, 5, 2, 0, 2, 0, 5, 7, 5, 1, 4, 9, 4, 9, 3, 9, 5]"],"[10, 3, 4, 1, 7]"],[["[6, 7, 3, 2, 8, 7, 5, 3, 2, 2, 3, 6, 2, 3, 5, 5, 7, 6, 4, 1, 5, 5, 2, 3, 6, 3, 1, 6, 8, 8]"],"[6, 1, 3, 2, 8, 11, 7, 3, 5]"],[["[2, 7, 9, 1, 7, 4, 8, 7, 5, 8, 5, 3, 6, 7, 3, 3, 4, 9, 6, 3, 9, 8, 8, 1, 4, 0, 0, 1, 2, 5]"],"[1, 7, 9, 1, 14, 4, 7, 7, 3, 1, 1]"]],"type":"(list -> list)","name":"052","solution":"(letII (+ 5 randnat) (λk -> (scanl (λacc act -> (case (letII act#1 (λx -> (case acc#3 of O => randnat | S => (λn -> randnat)))) of O => (case randnat of O => randnat | S => (λn -> act#2)) | S => (λn -> (inc (case k#4 of O => act#2 | S => (λn -> randnat)))))) 0 (take (+ k#1 randnat) #2))))","num_train":4},{"ios":[[["[7, 4, 6, 2, 2, 3, 5, 5, 5, 8, 5, 3, 3, 7, 9, 2, 0, 8, 9, 7, 6, 1, 2, 3, 5, 1, 8, 7, 3, 8]"],"[1, 0, 0, 0, 0, 0, 0]"],[["[2, 1, 8, 4, 2, 3, 8, 2, 0, 1, 9, 2, 9, 2, 4, 7, 4, 6, 6, 4, 8, 5, 4, 5, 4, 3, 0, 6, 0, 6]"],"[0, 0, 2, 0, 0, 0, 2]"],[["[3, 5, 4, 9, 1, 2, 7, 6, 8, 8, 1, 6, 1, 3, 3, 6, 2, 5, 4, 0, 8, 0, 8, 9, 7, 0, 9, 6, 7, 2]"],"[0, 0, 0, 3, 0, 0, 1]"],[["[4, 1, 2, 0, 4, 9, 7, 4, 1, 3, 2, 0, 5, 8, 3, 8, 3, 9, 4, 0, 7, 2, 3, 6, 0, 9, 5, 9, 1, 8]"],"[0, 0, 0, 0, 0, 3, 4]"],[["[7, 4, 8, 4, 6, 6, 8, 0, 4, 7, 5, 8, 7, 5, 7, 0, 4, 8, 2, 7, 8, 2, 4, 7, 1, 0, 3, 8, 7, 7]"],"[1, 0, 2, 0, 0, 0, 2]"],[["[8, 8, 8, 2, 3, 7, 2, 4, 9, 7, 5, 2, 1, 3, 6, 1, 5, 0, 1, 8, 0, 0, 0, 6, 9, 5, 5, 8, 7, 4]"],"[2, 4, 6, 2, 0, 1, 0]"],[["[7, 4, 9, 9, 8, 2, 9, 2, 3, 0, 4, 6, 5, 9, 4, 0, 9, 2, 5, 6, 5, 6, 9, 1, 0, 0, 2, 4, 1, 5]"],"[1, 0, 3, 6, 8, 4, 7]"],[["[1, 2, 7, 7, 9, 5, 1, 6, 8, 9, 7, 2, 9, 3, 3, 0, 8, 0, 6, 9, 4, 2, 8, 2, 1, 5, 0, 8, 3, 4]"],"[0, 0, 1, 2, 5, 4, 0]"]],"type":"(list -> list)","name":"053","solution":"(letII (+ 5 1) (λk -> (scanl (λacc act -> (- (letII acc#2 (λx -> (+ act#2 acc#3))) k#3)) 0 (take (inc k#1) #2))))","num_train":4},{"ios":[[["[8, 9, 7, 8, 7, 4, 5, 7, 7, 1, 4, 3, 2, 9, 4, 7, 8, 1, 4, 5, 9, 2, 9, 7, 1, 3, 4, 6, 2, 3]"],"[14, 31, 10, 23, 7, 7, 12, 7, 9, 8, 14, 17, 25, 7, 10, 7, 11, 11, 27, 15, 7, 11]"],[["[4, 6, 9, 2, 7, 5, 1, 1, 1, 3, 6, 2, 8, 8, 5, 1, 3, 9, 3, 3, 2, 8, 9, 4, 9, 0, 2, 5, 0, 4]"],"[17, 11, 15, 14, 12, 12, 17, 11, 17, 7, 10, 8, 7]"],[["[9, 1, 9, 9, 3, 9, 5, 4, 5, 4, 5, 8, 2, 9, 1, 3, 7, 1, 9, 9, 0, 5, 4, 9, 3, 7, 7, 0, 3, 9]"],"[9, 7, 10, 14]"],[["[3, 5, 7, 1, 4, 8, 6, 7, 2, 1, 7, 4, 7, 3, 5, 8, 1, 9, 0, 8, 7, 1, 2, 7, 4, 6, 3, 0, 7, 3]"],"[16, 10, 15, 11, 18, 8, 15, 12, 10, 14, 13, 16, 10, 12, 9]"],[["[0, 2, 2, 4, 4, 3, 8, 3, 3, 4, 1, 2, 4, 5, 7, 7, 5, 5, 1, 1, 6, 2, 2, 4, 9, 7, 2, 6, 3, 5]"],"[12, 12, 15, 13, 7, 23]"],[["[9, 9, 3, 3, 5, 8, 0, 6, 3, 3, 0, 9, 2, 1, 6, 5, 5, 7, 3, 4, 1, 7, 1, 2, 4, 5, 3, 4, 0, 7]"],"[13, 7, 7, 10, 7, 13, 8, 9]"],[["[0, 0, 8, 2, 1, 2, 5, 5, 7, 1, 0, 1, 2, 5, 5, 5, 1, 1, 7, 0, 1, 1, 4, 6, 0, 5, 0, 3, 8, 0]"],"[15, 7, 7, 10, 14, 19, 18, 8, 14, 11, 10, 9, 7, 7, 8, 11, 8, 22, 11, 7, 7, 9, 12, 7, 17, 13, 13, 7, 7, 9]"],[["[7, 4, 2, 6, 0, 5, 9, 9, 8, 6, 7, 6, 8, 5, 3, 8, 3, 7, 5, 7, 7, 1, 5, 3, 0, 9, 1, 2, 3, 4]"],"[9, 12, 8, 7, 10, 11, 18]"]],"type":"(list -> list)","name":"054","solution":"(letII (inc 5) (λk -> (scanl (λacc act -> (+ (+ randnat 6) (letII (+ act#1 randnat) (λx -> (inc (- randnat acc#3)))))) 0 (take (+ (letII randnat (λx -> (+ randnat 1))) (inc randnat)) #2))))","num_train":4},{"ios":[[["[6, 0, 1, 9, 8, 9, 7, 5, 8, 0, 4, 1, 8, 6, 8, 2, 8, 8, 2, 8, 2, 0, 4, 2, 0, 9, 4, 3, 0, 1]"],"[0, 1, 6, 1, 0, 1, 8, 3, 0, 1]"],[["[1, 2, 0, 2, 0, 0, 6, 1, 5, 6, 5, 5, 2, 5, 9, 1, 0, 9, 7, 8, 6, 3, 6, 1, 2, 7, 3, 8, 6, 1]"],"[14, 5, 6, 12, 13, 14, 7, 7]"],[["[3, 1, 5, 6, 7, 5, 0, 5, 1, 6, 8, 8, 6, 2, 7, 0, 4, 5, 0, 5, 7, 7, 6, 3, 9, 0, 3, 9, 8, 0]"],"[5, 0, 0, 2, 14, 7, 8, 0, 1, 4, 0, 3, 7, 10, 1]"],[["[6, 5, 0, 7, 9, 5, 2, 3, 4, 8, 5, 2, 1, 3, 9, 8, 0, 6, 9, 9, 3, 5, 0, 1, 4, 1, 1, 3, 3, 9]"],"[2, 15, 16, 3, 0, 15, 2, 0, 10, 3]"],[["[4, 6, 6, 3, 7, 4, 2, 2, 2, 2, 3, 0, 3, 0, 7, 6, 5, 9, 0, 8, 2, 4, 1, 9, 7, 8, 2, 2, 2, 3]"],"[8, 4, 3, 3, 0, 8, 1, 3, 0]"],[["[1, 7, 6, 3, 9, 8, 9, 2, 7, 9, 3, 8, 2, 1, 7, 9, 8, 9, 0, 8, 6, 7, 2, 9, 8, 7, 1, 6, 2, 1]"],"[3, 5, 0, 2, 0, 3, 14, 10, 5, 9, 0, 1, 1, 1, 1]"],[["[7, 3, 3, 6, 0, 2, 4, 3, 7, 3, 6, 0, 8, 1, 0, 1, 0, 6, 8, 2, 0, 8, 1, 3, 0, 2, 1, 3, 3, 8]"],"[1, 5, 9, 5, 6, 1, 6, 2, 0, 2, 5, 6, 1]"],[["[2, 8, 0, 1, 8, 8, 4, 7, 3, 0, 4, 5, 9, 6, 5, 2, 8, 0, 6, 4, 2, 9, 6, 9, 7, 0, 5, 5, 6, 1]"],"[0, 16, 17, 6, 7, 7, 1, 6, 3, 4]"]],"type":"(list -> list)","name":"055","solution":"(letII (+ randnat 8) (λk -> (scanl (λacc act -> (case act#1 of O => (letII acc#2 (λx -> (inc acc#3))) | S => (λn -> randnat))) 0 (take k#1 #2))))","num_train":4},{"ios":[[["[9, 9, 9, 6, 4, 9, 9, 1, 7, 0, 0, 5, 8, 5, 8, 2, 8, 3, 6, 0, 2, 7, 3, 9, 8, 3, 5, 5, 5, 9]"],"[12, 18, 19, 20, 20]"],[["[0, 9, 2, 8, 8, 3, 9, 9, 4, 2, 3, 3, 0, 6, 2, 5, 2, 1, 6, 9, 2, 8, 3, 2, 6, 8, 4, 7, 6, 5]"],"[1, 12, 6, 10, 18, 9]"],[["[8, 3, 9, 3, 5, 6, 7, 8, 2, 4, 2, 8, 6, 3, 3, 1, 7, 7, 9, 6, 3, 1, 2, 2, 9, 5, 3, 6, 4, 7]"],"[14, 8, 9, 3, 6, 8]"],[["[0, 5, 7, 4, 5, 8, 3, 6, 9, 8, 9, 3, 4, 5, 5, 6, 0, 9, 6, 7, 8, 1, 7, 6, 9, 3, 4, 2, 5, 6]"],"[8, 32, 32, 10, 19]"],[["[7, 5, 9, 0, 0, 2, 4, 8, 7, 5, 5, 4, 9, 9, 2, 9, 4, 3, 9, 0, 0, 0, 4, 4, 2, 6, 4, 1, 4, 7]"],"[32, 7, 24, 16, 0]"],[["[1, 6, 3, 3, 4, 7, 7, 4, 2, 8, 1, 8, 4, 4, 1, 2, 9, 1, 0, 1, 0, 0, 7, 5, 7, 2, 0, 7, 2, 7]"],"[4, 12, 11, 4, 15, 14, 23, 4, 6, 11, 8, 13, 6, 7, 8, 6, 13, 15]"],[["[3, 2, 0, 0, 9, 8, 6, 3, 1, 1, 6, 0, 8, 1, 8, 1, 7, 5, 3, 5, 5, 0, 7, 1, 0, 8, 2, 5, 6, 9]"],"[8, 33, 0, 13]"],[["[0, 6, 6, 1, 3, 6, 2, 2, 4, 7, 7, 0, 7, 6, 5, 9, 0, 2, 0, 2, 9, 3, 6, 0, 2, 0, 7, 3, 1, 0]"],"[5, 12, 18, 16]"]],"type":"(list -> list)","name":"056","solution":"(letII (- (+ 2 2) (case (flip 0.5) of True => randnat | False => randnat)) (λk -> (scanl (λacc act -> (+ (+ act#1 randnat) (- randnat (letII randnat (λx -> (case (flip 0.9) of True => k#4 | False => acc#3)))))) 0 (take (+ (case randnat of O => randnat | S => (λn -> randnat)) 4) #2))))","num_train":4},{"ios":[[["[7, 8, 2, 6, 9, 1, 5, 2, 9, 2, 7, 6, 9, 3, 6, 0, 2, 5, 0, 0, 7, 8, 7, 8, 8, 5, 6, 4, 6, 1]"],"[7, 8, 3, 6, 9, 3, 3, 2, 3, 3, 3, 6, 9, 3, 3, 3, 2, 5, 3, 3, 7, 8, 3, 3, 8, 3, 6]"],[["[8, 2, 3, 3, 8, 6, 5, 5, 2, 2, 2, 6, 6, 0, 5, 8, 3, 0, 5, 6, 7, 7, 0, 8, 5, 5, 2, 2, 8, 5]"],"[8, 3, 3, 3, 8, 3, 5, 3, 3, 3, 3, 3]"],[["[4, 2, 1, 3, 5, 8, 2, 1, 5, 2, 6, 1, 1, 7, 1, 9, 1, 1, 8, 2, 8, 5, 3, 7, 3, 9, 8, 3, 8, 0]"],"[4, 2, 3, 3, 3, 8, 3, 3, 5, 2, 3, 3, 1, 7, 3, 9, 3, 3, 8, 3, 3]"],[["[2, 3, 0, 3, 2, 5, 4, 0, 2, 1, 2, 2, 5, 1, 1, 3, 0, 0, 4, 6, 9, 9, 7, 9, 5, 6, 8, 2, 1, 8]"],"[2, 3, 3, 3, 2, 3, 3, 0, 2, 1, 2, 2, 5, 3]"],[["[1, 7, 1, 9, 8, 0, 5, 2, 5, 5, 0, 5, 9, 3, 1, 8, 5, 6, 6, 0, 7, 8, 5, 0, 3, 1, 2, 9, 1, 2]"],"[1, 3, 1, 9, 3, 0, 5, 3, 5, 3, 3, 5, 9, 3, 3]"],[["[7, 2, 5, 3, 9, 6, 0, 2, 6, 4, 1, 5, 1, 8, 5, 6, 0, 2, 3, 3, 4, 9, 3, 8, 9, 7, 0, 4, 0, 0]"],"[7, 3, 5, 3, 3, 6, 3, 3, 6, 3]"],[["[3, 0, 1, 4, 2, 9, 1, 6, 9, 3, 4, 4, 4, 7, 8, 1, 1, 1, 4, 9, 6, 0, 0, 2, 3, 6, 4, 1, 4, 9]"],"[3, 3, 1, 4, 3, 9, 3, 6, 9, 3, 4, 4, 3, 7, 8, 3, 3, 3, 3, 3, 3, 0, 0, 2, 3]"],[["[4, 5, 5, 1, 5, 8, 0, 3, 3, 0, 1, 8, 0, 7, 8, 7, 5, 7, 3, 2, 5, 9, 2, 2, 4, 8, 1, 4, 9, 1]"],"[4, 3, 5, 3, 3, 3, 0, 3, 3, 3, 3, 3, 0, 7, 3, 7, 3, 7, 3, 2, 5, 9, 3, 3, 4]"]],"type":"(list -> list)","name":"057","solution":"(letII (inc 5) (λk -> (scanl (λacc act -> (case (- acc#2 (case randnat of O => (case 5 of O => randnat | S => (λn -> act#2)) | S => (λn -> randnat))) of O => act#1 | S => (λn -> 3))) 0 (take (+ (+ randnat (+ randnat randnat)) k#1) #2))))","num_train":4},{"ios":[[["[7, 9, 1, 4, 1, 3, 1, 1, 2, 4, 0, 2, 6, 1, 5, 5, 8, 5, 2, 6, 3, 1, 6, 3, 8, 6, 6, 4, 1, 9]"],"[8, 10, 2, 5, 2, 4, 2, 4, 3, 5, 1, 3]"],[["[0, 1, 9, 8, 4, 8, 7, 6, 4, 1, 2, 8, 4, 8, 5, 0, 8, 3, 4, 6, 0, 2, 6, 1, 7, 0, 3, 9, 4, 0]"],"[1, 4, 4, 9]"],[["[4, 4, 7, 9, 2, 8, 4, 0, 6, 5, 3, 6, 0, 6, 0, 4, 3, 5, 5, 8, 1, 9, 2, 4, 7, 5, 7, 7, 5, 6]"],"[5, 5, 8, 10]"],[["[6, 9, 3, 4, 9, 4, 4, 8, 3, 9, 5, 1, 6, 4, 1, 6, 7, 9, 6, 0, 8, 2, 8, 4, 4, 4, 6, 7, 9, 2]"],"[7, 4, 4, 5, 10, 5, 4, 9, 4, 10, 4, 2, 7, 5, 2]"],[["[1, 8, 9, 0, 0, 8, 8, 7, 6, 3, 2, 5, 3, 5, 1, 7, 0, 7, 1, 8, 4, 3, 8, 8, 3, 6, 6, 4, 2, 6]"],"[2, 9, 10, 4, 1, 9, 9, 8, 7, 4, 3, 6]"],[["[7, 6, 5, 6, 7, 7, 6, 0, 5, 0, 5, 9, 8, 4, 6, 8, 0, 5, 4, 9, 0, 7, 3, 2, 1, 8, 1, 3, 0, 9]"],"[8, 4, 6, 7, 8, 8, 7, 1, 6, 1, 6, 10]"],[["[1, 1, 7, 4, 6, 4, 0, 8, 4, 0, 4, 8, 1, 4, 0, 2, 4, 9, 3, 5, 3, 7, 2, 2, 7, 6, 6, 6, 2, 9]"],"[2, 2, 8]"],[["[8, 7, 9, 5, 6, 0, 5, 9, 4, 2, 5, 9, 9, 8, 0, 1, 2, 2, 6, 6, 0, 8, 5, 4, 4, 7, 0, 9, 4, 3]"],"[9, 8, 10, 6]"]],"type":"(list -> list)","name":"058","solution":"(letII (letII 7 (λx -> (- (case (inc randnat) of O => x#1 | S => (λn -> x#2)) randnat))) (λk -> (scanl (λacc act -> (letII act#1 (λx -> (inc (case randnat of O => (case acc#3 of O => randnat | S => (λn -> 3)) | S => (λn -> act#3)))))) 0 (take (+ (letII 9 (λx -> (inc randnat))) (case 0 of O => k#1 | S => (λn -> k#2))) #2))))","num_train":4},{"ios":[[["[3, 5, 9, 9, 6, 5, 7, 9, 2, 9, 3, 7, 0, 4, 1, 3, 9, 8, 7, 1, 6, 0, 4, 1, 5, 3, 7, 5, 6, 4]"],"[22, 11, 0, 19, 0, 9, 2, 11, 7]"],[["[6, 2, 0, 8, 6, 8, 3, 9, 8, 4, 0, 9, 3, 8, 3, 9, 0, 3, 0, 4, 5, 7, 0, 2, 3, 4, 6, 9, 5, 8]"],"[9, 0, 24, 35, 0, 4, 5, 1, 11]"],[["[0, 5, 4, 8, 9, 2, 0, 0, 3, 6, 5, 8, 5, 4, 0, 0, 7, 7, 2, 6, 1, 7, 1, 2, 0, 2, 1, 3, 5, 7]"],"[18, 0, 7, 1, 1, 0, 7, 6, 15]"],[["[1, 4, 1, 9, 2, 8, 9, 2, 4, 9, 0, 6, 2, 2, 8, 0, 0, 3, 1, 9, 7, 8, 5, 2, 3, 7, 6, 4, 6, 8]"],"[10, 4, 1, 11, 10, 5, 32, 0, 6]"],[["[1, 3, 2, 8, 1, 1, 5, 8, 7, 6, 2, 2, 0, 0, 5, 7, 5, 1, 7, 4, 1, 3, 1, 9, 6, 1, 4, 3, 7, 2]"],"[13, 0, 0, 19, 5, 15, 0, 5, 0]"],[["[9, 2, 4, 2, 3, 9, 9, 2, 9, 3, 9, 1, 8, 6, 1, 9, 7, 9, 2, 8, 4, 5, 2, 2, 2, 1, 8, 7, 3, 3]"],"[20, 0, 23, 0, 0, 8, 22, 0, 26]"],[["[6, 6, 4, 2, 2, 1, 5, 2, 0, 3, 0, 3, 6, 1, 0, 5, 0, 6, 6, 5, 2, 8, 5, 5, 1, 6, 3, 6, 8, 6]"],"[13, 7, 4, 15, 0, 0, 19, 0, 19]"],[["[5, 5, 9, 6, 7, 8, 8, 6, 2, 8, 8, 1, 2, 7, 6, 6, 9, 4, 8, 8, 9, 5, 3, 6, 5, 2, 2, 8, 8, 7]"],"[16, 0, 13, 1, 9, 3, 4, 15, 4]"]],"type":"(list -> list)","name":"059","solution":"(letII 4 (λk -> (scanl (λacc act -> (- (- (+ (+ randnat randnat) randnat) (- acc#2 randnat)) (- randnat act#1))) 0 (take (inc (letII randnat (λx -> (+ k#2 k#2)))) #2))))","num_train":4},{"ios":[[["[8, 6, 5, 6, 6, 4, 0, 1, 1, 1, 4, 0, 1, 6, 1, 2, 7, 8, 7, 7, 0, 5, 2, 2, 3, 4, 3, 6, 4, 3]"],"[1, 3, 1, 1, 2, 1, 12, 3, 1, 2]"],[["[8, 0, 1, 3, 4, 1, 3, 3, 6, 2, 8, 5, 7, 0, 3, 6, 0, 1, 3, 6, 6, 3, 5, 5, 5, 2, 4, 7, 4, 4]"],"[1, 3, 2, 1, 0, 7]"],[["[0, 0, 7, 1, 2, 2, 4, 3, 0, 8, 9, 0, 7, 2, 8, 1, 1, 2, 0, 6, 2, 7, 3, 5, 4, 3, 3, 4, 9, 4]"],"[4, 5, 10, 0, 9, 0, 5, 2, 4, 0, 1, 8, 3, 24]"],[["[6, 4, 1, 5, 4, 7, 1, 7, 0, 7, 5, 7, 3, 6, 2, 7, 2, 0, 6, 5, 8, 7, 8, 2, 6, 1, 5, 3, 7, 4]"],"[5, 3, 11, 0, 7, 4, 0, 1]"],[["[6, 6, 5, 3, 7, 0, 9, 3, 3, 8, 1, 4, 2, 9, 1, 1, 2, 0, 2, 7, 7, 0, 5, 4, 2, 9, 7, 4, 2, 3]"],"[2, 5, 8, 2, 9, 3, 0]"],[["[4, 1, 1, 3, 6, 6, 3, 2, 1, 6, 8, 2, 6, 1, 3, 5, 0, 8, 9, 6, 5, 3, 2, 6, 7, 7, 1, 7, 0, 2]"],"[1, 2, 3, 1, 9, 5, 0, 3, 1, 10, 2, 1, 6, 7, 0]"],[["[1, 1, 2, 0, 6, 6, 2, 7, 8, 2, 9, 2, 8, 4, 4, 9, 3, 9, 9, 3, 0, 3, 3, 9, 3, 9, 3, 1, 9, 6]"],"[3, 2, 3, 1, 3, 8, 3]"],[["[3, 7, 0, 6, 4, 6, 6, 3, 9, 4, 9, 0, 0, 4, 3, 8, 6, 0, 4, 1, 2, 3, 2, 3, 4, 0, 6, 4, 1, 9]"],"[6, 1, 1, 4, 0, 5, 0, 1]"]],"type":"(list -> list)","name":"060","solution":"(letII (inc randnat) (λk -> (scanl (λacc act -> (case (letII act#1 (λx -> (- acc#3 randnat))) of O => (inc randnat) | S => (λn -> randnat))) 0 (take (+ 5 k#1) #2))))","num_train":4},{"ios":[[["[1, 1, 6, 6, 3, 4, 3, 1, 7, 1, 9, 6, 1, 4, 3, 3, 8, 6, 9, 2, 6, 9, 2, 3, 8, 7, 4, 3, 5, 0]"],"[1, 2]"],[["[0, 3, 5, 5, 0, 0, 3, 9, 7, 9, 3, 1, 9, 1, 6, 2, 7, 5, 1, 3, 1, 9, 9, 0, 4, 0, 7, 9, 5, 7]"],"[1, 2]"],[["[7, 8, 3, 4, 8, 2, 8, 2, 7, 5, 8, 7, 3, 2, 3, 9, 6, 8, 1, 3, 7, 1, 3, 2, 3, 1, 2, 1, 7, 3]"],"[1, 2]"],[["[7, 9, 7, 1, 0, 0, 1, 3, 4, 1, 7, 3, 0, 3, 6, 1, 6, 8, 5, 6, 4, 5, 0, 5, 7, 3, 0, 2, 1, 9]"],"[1, 2]"],[["[5, 4, 4, 0, 9, 4, 3, 7, 6, 8, 9, 2, 8, 8, 9, 1, 7, 8, 5, 8, 9, 6, 3, 8, 5, 8, 0, 7, 4, 4]"],"[1, 2]"],[["[6, 4, 3, 2, 6, 6, 6, 1, 6, 2, 1, 6, 0, 9, 3, 6, 3, 0, 7, 4, 1, 7, 0, 6, 7, 8, 8, 6, 5, 4]"],"[1, 2]"],[["[9, 8, 4, 2, 0, 0, 4, 3, 4, 5, 5, 9, 7, 5, 6, 4, 7, 4, 7, 5, 8, 9, 3, 1, 6, 4, 6, 4, 1, 3]"],"[1, 2]"],[["[5, 5, 0, 8, 4, 5, 7, 5, 7, 1, 1, 9, 6, 4, 7, 8, 9, 2, 9, 6, 0, 3, 0, 9, 3, 8, 5, 3, 6, 9]"],"[1, 2]"]],"type":"(list -> list)","name":"061","solution":"(letII (inc (- (- 4 5) (letII 9 (λx -> (case (> x#1 randnat) of True => x#1 | False => randnat))))) (λk -> (scanl (λacc act -> (letII (inc act#1) (λx -> (inc acc#3)))) 0 (take (+ k#1 k#1) #2))))","num_train":4},{"ios":[[["[0, 3, 2, 1, 3, 9, 6, 4, 2, 8, 4, 6, 0, 4, 2, 3, 3, 6, 2, 9, 6, 7, 8, 6, 4, 5, 3, 4, 4, 2]"],"[0, 3, 5, 6, 9, 18, 24, 28, 30, 38, 42, 48, 48, 52, 54, 57, 60]"],[["[4, 6, 5, 6, 5, 2, 6, 7, 2, 4, 7, 3, 3, 9, 6, 6, 7, 4, 7, 0, 3, 2, 6, 2, 6, 8, 2, 0, 1, 2]"],"[4, 10, 15, 21, 26, 28, 34, 41, 43, 47, 54, 57, 60, 69, 75]"],[["[0, 4, 7, 7, 5, 6, 6, 6, 1, 5, 1, 1, 8, 1, 4, 6, 3, 5, 5, 0, 2, 1, 3, 0, 2, 5, 8, 2, 2, 8]"],"[0, 4, 11, 18, 23, 29, 35, 41, 42, 47, 48, 49, 57, 58, 62, 68, 71, 76]"],[["[3, 4, 7, 1, 0, 5, 2, 8, 5, 4, 0, 1, 7, 1, 8, 3, 6, 0, 0, 6, 9, 5, 5, 3, 3, 3, 9, 8, 5, 2]"],"[3, 7, 14, 15, 15, 20, 22, 30, 35, 39, 39, 40, 47, 48, 56, 59, 65]"],[["[5, 1, 0, 0, 7, 8, 2, 8, 2, 4, 2, 1, 7, 4, 5, 0, 4, 5, 7, 0, 7, 0, 9, 7, 3, 7, 2, 3, 0, 3]"],"[5, 6, 6, 6, 13, 21, 23, 31, 33, 37, 39, 40, 47, 51, 56, 56]"],[["[7, 3, 5, 0, 2, 7, 6, 7, 5, 6, 9, 1, 1, 4, 5, 4, 5, 2, 0, 5, 1, 6, 6, 1, 0, 1, 9, 4, 2, 9]"],"[7, 10, 15, 15, 17, 24, 30, 37, 42, 48, 57, 58]"],[["[0, 4, 4, 3, 1, 2, 8, 7, 2, 0, 2, 0, 4, 5, 8, 9, 3, 8, 9, 1, 6, 2, 7, 8, 0, 9, 7, 6, 8, 0]"],"[0, 4, 8, 11, 12, 14, 22, 29, 31, 31]"],[["[3, 6, 5, 1, 8, 2, 7, 9, 6, 5, 6, 7, 0, 0, 3, 5, 0, 4, 4, 8, 9, 6, 4, 4, 9, 7, 8, 6, 8, 3]"],"[3, 9, 14, 15, 23, 25, 32, 41, 47, 52, 58, 65, 65, 65, 68, 73]"]],"type":"(list -> list)","name":"062","solution":"(letII (inc 9) (λk -> (scanl (λacc act -> (letII (- k#3 randnat) (λx -> (+ acc#3 act#2)))) 0 (take (+ (case (flip 0.5) of True => k#1 | False => (inc 7)) (- (- k#1 randnat) (- randnat randnat))) #2))))","num_train":4},{"ios":[[["[9, 6, 5, 8, 0, 5, 2, 7, 5, 6, 1, 0, 7, 5, 3, 0, 0, 9, 5, 9, 6, 1, 0, 3, 1, 4, 6, 8, 8, 9]"],"[13, 25, 25, 29, 31, 35]"],[["[8, 4, 7, 5, 9, 9, 3, 6, 2, 9, 0, 0, 1, 6, 7, 7, 3, 1, 6, 3, 2, 7, 6, 6, 6, 4, 2, 2, 8, 0]"],"[9, 8, 16, 29, 28, 35]"],[["[5, 1, 2, 5, 8, 9, 4, 1, 8, 4, 4, 3, 8, 6, 3, 5, 0, 0, 4, 3, 2, 4, 3, 3, 1, 5, 0, 0, 6, 1]"],"[18, 29, 33, 33, 34, 39]"],[["[2, 5, 6, 4, 1, 0, 2, 8, 8, 5, 5, 1, 8, 7, 5, 8, 5, 3, 9, 2, 3, 6, 7, 0, 0, 5, 9, 5, 6, 1]"],"[4, 7, 11, 34, 36, 39]"],[["[5, 2, 4, 7, 7, 8, 9, 2, 2, 3, 7, 1, 3, 4, 3, 4, 3, 1, 9, 1, 6, 8, 2, 3, 3, 2, 7, 9, 1, 9]"],"[5, 6, 5, 6, 5, 4]"],[["[1, 5, 4, 9, 9, 2, 2, 7, 8, 9, 0, 5, 0, 5, 5, 2, 7, 3, 7, 5, 3, 8, 8, 8, 6, 8, 6, 0, 2, 8]"],"[5, 8, 7, 12, 27, 33]"],[["[1, 1, 8, 5, 5, 4, 4, 8, 6, 0, 9, 3, 4, 0, 8, 9, 1, 0, 8, 6, 7, 3, 1, 0, 0, 7, 9, 8, 8, 7]"],"[3, 2, 2, 1, 2, 7]"],[["[9, 1, 8, 4, 3, 2, 5, 2, 1, 6, 9, 6, 0, 5, 9, 9, 6, 6, 5, 4, 0, 8, 6, 6, 1, 1, 3, 8, 2, 1]"],"[16, 15, 15, 15, 23, 41]"]],"type":"(list -> list)","name":"063","solution":"(letII randnat (λk -> (scanl (λacc act -> (+ randnat (letII randnat (λx -> (case acc#3 of O => act#2 | S => (λn -> n#1)))))) 0 (take (inc (case (> (letII k#1 (λx -> (+ x#1 k#2))) (letII 8 (λx -> (+ k#2 k#2)))) of True => (case (flip 0.9) of True => (letII k#1 (λx -> (case (flip 0.8) of True => randnat | False => x#1))) | False => randnat) | False => 5)) #2))))","num_train":4},{"ios":[[["[7, 1, 8, 8, 5, 0, 8, 4, 4, 4, 0, 2, 3, 3, 0, 9, 8, 9, 9, 8, 0, 1, 2, 1, 2, 2, 5, 8, 0, 5]"],"[7, 1, 8, 8, 5, 0, 8, 4]"],[["[6, 0, 1, 6, 0, 6, 3, 8, 9, 2, 6, 0, 3, 8, 7, 3, 0, 6, 8, 5, 9, 5, 5, 3, 8, 8, 5, 8, 8, 0]"],"[6, 0, 1, 6, 0, 6, 3, 8]"],[["[7, 2, 2, 6, 7, 8, 7, 8, 9, 6, 2, 3, 6, 4, 2, 4, 1, 5, 8, 5, 3, 8, 6, 0, 3, 4, 5, 4, 2, 4]"],"[7, 2, 2, 6, 7, 8, 7, 8]"],[["[5, 2, 2, 6, 7, 2, 4, 6, 2, 7, 6, 6, 5, 0, 9, 0, 5, 6, 3, 2, 5, 6, 7, 0, 3, 5, 2, 5, 5, 6]"],"[5, 2, 2, 6, 7, 2, 4, 6]"],[["[9, 2, 0, 3, 6, 9, 8, 2, 4, 8, 7, 8, 2, 1, 8, 3, 2, 7, 7, 5, 6, 5, 4, 1, 3, 7, 8, 0, 8, 9]"],"[9, 3, 0, 3, 6, 9, 9, 3]"],[["[1, 5, 6, 1, 3, 7, 7, 3, 3, 8, 8, 3, 6, 7, 7, 4, 5, 4, 0, 8, 6, 4, 8, 4, 6, 6, 0, 2, 7, 8]"],"[1, 5, 6, 1, 3, 7, 7, 3]"],[["[9, 2, 5, 2, 5, 8, 7, 7, 9, 8, 0, 6, 3, 0, 8, 0, 6, 3, 9, 4, 8, 2, 1, 0, 8, 9, 3, 4, 4, 7]"],"[9, 3, 5, 2, 5, 8, 7, 7]"],[["[4, 5, 0, 6, 5, 5, 9, 4, 6, 4, 3, 7, 9, 8, 8, 9, 4, 7, 0, 7, 6, 5, 6, 0, 6, 0, 1, 7, 5, 0]"],"[4, 5, 0, 6, 5, 5, 9, 5]"]],"type":"(list -> list)","name":"064","solution":"(letII 8 (λk -> (scanl (λacc act -> (+ act#1 (- acc#2 k#3))) 0 (take k#1 #2))))","num_train":4},{"ios":[[["[2, 5, 8, 4, 7, 0, 3, 2, 6, 0, 5, 9, 0, 8, 6, 0, 4, 2, 0, 0, 7, 9, 3, 9, 4, 6, 9, 2, 6, 9]"],"[5, 19, 24, 36]"],[["[6, 7, 9, 6, 1, 7, 7, 3, 8, 2, 5, 6, 0, 8, 6, 9, 5, 7, 0, 7, 4, 6, 2, 3, 5, 0, 8, 7, 4, 5]"],"[15, 23, 27, 30, 68]"],[["[0, 3, 5, 0, 0, 6, 1, 1, 0, 0, 5, 2, 6, 5, 7, 1, 2, 6, 9, 4, 0, 4, 8, 7, 7, 8, 9, 7, 8, 9]"],"[0, 0, 10, 23, 46, 47, 97, 204, 413]"],[["[6, 1, 0, 1, 3, 6, 7, 8, 5, 0, 1, 9, 1, 8, 8, 8, 6, 9, 9, 5, 3, 9, 8, 9, 1, 1, 0, 1, 9, 5]"],"[30, 60]"],[["[2, 0, 7, 0, 8, 1, 6, 5, 1, 8, 5, 1, 7, 4, 0, 1, 8, 0, 7, 7, 2, 2, 7, 6, 5, 8, 5, 4, 7, 9]"],"[0, 3, 6, 12, 24, 61, 70, 140, 280]"],[["[1, 4, 6, 1, 0, 9, 8, 9, 8, 1, 7, 9, 4, 5, 3, 7, 7, 2, 5, 2, 3, 5, 9, 1, 8, 5, 7, 9, 5, 1]"],"[5, 7, 19, 38, 81, 96]"],[["[7, 7, 9, 6, 5, 2, 9, 0, 3, 1, 4, 2, 4, 2, 7, 6, 4, 1, 9, 0, 5, 3, 7, 9, 7, 9, 6, 4, 6, 3]"],"[13, 19, 28, 33, 68, 136]"],[["[0, 3, 8, 6, 6, 1, 5, 7, 4, 7, 6, 0, 0, 8, 9, 2, 0, 1, 5, 6, 5, 5, 5, 1, 2, 0, 8, 9, 9, 9]"],"[1, 6]"]],"type":"(list -> list)","name":"065","solution":"(letII (letII randnat (λx -> (inc (inc randnat)))) (λk -> (scanl (λacc act -> (+ (case (> act#1 k#3) of True => randnat | False => acc#2) (+ randnat acc#2))) 0 (take (+ randnat (letII k#1 (λx -> (inc randnat)))) #2))))","num_train":4},{"ios":[[["[5, 2, 8, 2, 8, 7, 0, 8, 9, 7, 0, 6, 8, 5, 9, 6, 1, 8, 8, 4, 0, 3, 4, 3, 7, 8, 2, 8, 0, 1]"],"[0, 1, 3, 3, 3, 3, 3, 2, 0, 0, 2, 2, 2, 5, 5, 5, 5, 6, 6, 4, 4, 4, 4, 2, 1, 7, 2, 11, 3, 3]"],[["[7, 3, 4, 8, 0, 2, 6, 4, 6, 1, 7, 4, 9, 4, 5, 5, 8, 4, 5, 8, 2, 0, 2, 8, 4, 4, 3, 9, 7, 5]"],"[0, 0, 0, 7, 7, 25, 25, 25, 25, 6, 6, 6, 14, 14, 14, 14, 14, 14, 0, 4, 4, 4]"],[["[7, 6, 5, 9, 6, 8, 6, 5, 1, 3, 0, 5, 6, 3, 2, 8, 8, 0, 7, 2, 3, 7, 3, 4, 6, 6, 3, 5, 6, 3]"],"[0, 0, 0, 0, 6, 0, 9, 6, 2, 18, 18, 11, 1, 9, 9, 9, 8]"],[["[7, 7, 7, 7, 7, 3, 8, 9, 9, 4, 3, 3, 9, 5, 0, 4, 6, 8, 3, 8, 6, 0, 3, 7, 6, 8, 4, 4, 8, 4]"],"[0, 0, 0, 0, 0, 0, 11, 0, 0, 2, 3, 2, 0, 0, 0, 2, 2]"],[["[6, 2, 2, 2, 2, 4, 9, 5, 0, 9, 3, 4, 0, 3, 6, 1, 5, 1, 2, 8, 2, 5, 9, 8, 6, 1, 0, 4, 0, 7]"],"[8, 2, 9, 7, 0, 3, 3, 9, 1, 1, 1, 1, 1, 1, 1, 5, 5, 1, 7]"],[["[7, 2, 5, 2, 8, 5, 8, 3, 8, 7, 4, 5, 2, 0, 6, 7, 1, 0, 6, 0, 5, 4, 2, 5, 0, 7, 9, 5, 4, 4]"],"[0, 0, 0, 8, 1, 1, 1, 0, 0, 0, 9, 2, 4, 4, 2, 2, 1, 5, 7, 1, 1, 1, 4, 7, 1, 2, 2]"],[["[6, 2, 3, 2, 9, 2, 4, 2, 5, 6, 8, 0, 3, 9, 9, 5, 7, 0, 1, 8, 9, 0, 9, 1, 0, 6, 7, 6, 2, 9]"],"[0, 10, 13, 11, 11, 11, 5, 2, 0, 0, 1, 4, 2, 0, 0, 0, 0]"],[["[4, 6, 7, 8, 3, 8, 3, 4, 9, 4, 5, 1, 0, 2, 5, 5, 0, 0, 2, 2, 5, 0, 7, 3, 1, 1, 7, 3, 5, 6]"],"[4, 4, 4, 8, 2, 11, 11, 9, 3, 3, 3, 3, 3, 2, 2, 3, 17, 1, 1, 1, 6, 4, 4, 16, 1, 5, 2, 5]"]],"type":"(list -> list)","name":"066","solution":"(letII (inc 9) (λk -> (scanl (λacc act -> (letII acc#2 (λx -> (case (iseven (case x#1 of O => act#2 | S => (λn -> randnat))) of True => randnat | False => x#1)))) 0 (take (+ (+ 7 randnat) k#1) #2))))","num_train":4},{"ios":[[["[7, 9, 4, 6, 2, 0, 3, 1, 8, 3, 0, 1, 0, 0, 7, 0, 8, 3, 6, 1, 0, 9, 0, 8, 8, 5, 1, 6, 3, 7]"],"[11, 12, 8, 8]"],[["[0, 2, 5, 8, 0, 7, 8, 2, 8, 9, 5, 5, 7, 7, 4, 4, 5, 9, 6, 7, 4, 9, 8, 2, 6, 9, 0, 9, 2, 1]"],"[1, 0, 3, 4]"],[["[4, 6, 8, 2, 0, 1, 6, 7, 2, 7, 1, 4, 5, 4, 8, 1, 4, 1, 9, 0, 6, 7, 9, 0, 8, 5, 2, 3, 3, 8]"],"[0, 10, 2, 0, 4, 17, 6, 0, 10, 4, 6, 0]"],[["[3, 3, 8, 4, 5, 9, 8, 1, 5, 6, 9, 9, 3, 5, 9, 3, 7, 2, 2, 5, 7, 0, 7, 9, 3, 9, 3, 0, 0, 1]"],"[8, 5, 0, 0, 0, 0]"],[["[9, 5, 1, 2, 0, 8, 2, 2, 6, 7, 0, 9, 2, 1, 4, 1, 6, 9, 6, 9, 0, 6, 0, 0, 8, 6, 0, 2, 3, 5]"],"[0, 0, 0, 4, 1, 0]"],[["[0, 7, 6, 7, 1, 1, 1, 7, 9, 5, 9, 4, 2, 8, 2, 8, 9, 8, 6, 0, 1, 3, 6, 7, 5, 9, 9, 2, 6, 0]"],"[0, 2, 1, 6, 7, 0, 0, 0, 0, 0, 4, 16, 2, 3, 6, 1, 0, 0, 0, 0, 0, 11, 6, 3, 0, 2, 0]"],[["[7, 0, 0, 4, 1, 0, 8, 4, 5, 7, 4, 7, 4, 7, 8, 3, 2, 0, 0, 6, 4, 4, 2, 7, 6, 7, 7, 0, 1, 0]"],"[11, 11, 11, 3, 0, 2]"],[["[8, 8, 1, 9, 7, 8, 1, 2, 7, 9, 7, 9, 6, 9, 4, 9, 6, 0, 2, 3, 8, 3, 0, 5, 3, 5, 2, 2, 6, 3]"],"[8, 0, 9, 0, 0, 5]"]],"type":"(list -> list)","name":"067","solution":"(letII (case (flip 0.4) of True => 3 | False => randnat) (λk -> (scanl (λacc act -> (case randnat of O => (+ randnat randnat) | S => (λn -> (case (flip 0.5) of True => (letII act#2 (λx -> (- acc#4 x#1))) | False => randnat)))) 0 (take (letII (- k#1 k#1) (λx -> (case (flip 0.8) of True => (+ randnat randnat) | False => (case (flip 0.6) of True => 6 | False => randnat)))) #2))))","num_train":4},{"ios":[[["[5, 5, 5, 1, 9, 8, 9, 4, 3, 5, 7, 4, 0, 0, 6, 9, 1, 0, 7, 2, 6, 8, 4, 4, 1, 4, 7, 7, 9, 7]"],"[5, 0, 5, 0, 9, 0, 9, 0, 3, 2, 5, 0, 0, 0, 6, 3, 0, 0, 7, 0, 6, 2, 2, 2, 0]"],[["[7, 8, 1, 4, 2, 0, 7, 6, 5, 1, 2, 9, 2, 7, 3, 9, 3, 3, 8, 4, 3, 5, 2, 7, 6, 8, 4, 4, 7, 5]"],"[7, 1, 0, 4, 0, 0, 7, 0, 5]"],[["[8, 7, 3, 9, 1, 7, 1, 3, 2, 9, 6, 1, 4, 0, 0, 9, 2, 0, 9, 6, 3, 7, 4, 5, 1, 6, 3, 8, 9, 7]"],"[8, 0, 3, 6, 0, 7, 0, 3, 0, 9, 0, 1, 3]"],[["[0, 2, 0, 0, 9, 7, 7, 7, 6, 1, 1, 7, 7, 1, 0, 8, 0, 6, 2, 0, 5, 0, 1, 5, 9, 5, 4, 9, 4, 0]"],"[0, 2, 0, 0, 9, 0, 7, 0, 6, 0, 1]"],[["[3, 4, 9, 4, 2, 4, 5, 9, 3, 6, 5, 3, 1, 3, 8, 7, 4, 8, 6, 9, 8, 3, 4, 7, 2, 1, 8, 9, 0, 3]"],"[3, 1, 8, 0, 2, 2, 3, 6, 0, 6, 0, 3, 0]"],[["[9, 2, 5, 8, 5, 9, 8, 4, 3, 4, 2, 3, 2, 4, 1, 2, 2, 7, 5, 7, 8, 4, 7, 2, 8, 2, 3, 5, 3, 3]"],"[9, 0, 5, 3, 2, 7, 1, 3, 0]"],[["[0, 8, 1, 0, 2, 1, 8, 7, 2, 3, 8, 5, 2, 8, 1, 2, 2, 1, 9, 9, 5, 1, 4, 5, 2, 0, 1, 4, 9, 8]"],"[0, 8, 0, 0, 2, 0, 8, 0, 2]"],[["[2, 9, 9, 6, 4, 1, 8, 7, 8, 3, 5, 4, 0, 2, 5, 9, 0, 9, 1, 1, 8, 5, 4, 4, 8, 3, 5, 2, 3, 0]"],"[2, 7, 2, 4, 0, 1, 7, 0, 8, 0]"]],"type":"(list -> list)","name":"068","solution":"(letII (case 2 of O => 5 | S => (λn -> (case n#1 of O => randnat | S => (λn -> (letII randnat (λx -> (inc 8))))))) (λk -> (scanl (λacc act -> (- act#1 acc#2)) 0 (take (+ randnat k#1) #2))))","num_train":4},{"ios":[[["[8, 2, 5, 2, 5, 5, 8, 5, 3, 1, 5, 5, 7, 5, 0, 1, 4, 5, 8, 6, 1, 6, 4, 6, 9, 2, 4, 1, 7, 9]"],"[5, 3, 5]"],[["[6, 7, 1, 2, 6, 8, 3, 1, 6, 1, 2, 6, 7, 0, 8, 1, 9, 8, 9, 9, 6, 1, 3, 8, 0, 1, 7, 6, 2, 4]"],"[5, 0, 5, 0]"],[["[6, 6, 8, 3, 1, 1, 0, 1, 6, 2, 4, 7, 6, 7, 2, 5, 6, 1, 7, 8, 9, 5, 0, 0, 4, 9, 0, 0, 3, 2]"],"[5, 1]"],[["[4, 2, 3, 5, 2, 2, 8, 6, 3, 8, 8, 9, 0, 0, 2, 7, 7, 3, 5, 7, 2, 7, 2, 5, 1, 9, 6, 3, 6, 4]"],"[5, 3, 0, 5]"],[["[6, 2, 8, 8, 2, 3, 5, 3, 1, 2, 7, 2, 2, 8, 1, 4, 4, 9, 0, 5, 5, 5, 3, 7, 2, 0, 4, 3, 4, 4]"],"[5, 7, 0]"],[["[1, 2, 3, 3, 6, 1, 1, 7, 3, 9, 4, 6, 8, 5, 0, 9, 2, 2, 8, 2, 1, 8, 3, 9, 0, 6, 4, 9, 7, 5]"],"[5, 14]"],[["[1, 8, 5, 0, 9, 7, 0, 2, 4, 3, 0, 4, 8, 4, 6, 3, 5, 2, 0, 0, 5, 4, 0, 1, 8, 5, 0, 6, 4, 3]"],"[5, 0, 5, 1, 0, 5, 4, 0, 5, 0]"],[["[7, 3, 0, 0, 1, 5, 9, 6, 3, 5, 0, 9, 2, 5, 1, 2, 5, 2, 5, 9, 1, 5, 6, 6, 6, 4, 0, 0, 1, 3]"],"[5, 9, 1, 6, 17, 0, 5, 0, 5]"]],"type":"(list -> list)","name":"069","solution":"(letII (letII 4 (λx -> (case (flip 0.6) of True => randnat | False => x#1))) (λk -> (scanl (λacc act -> (case acc#2 of O => (+ 5 0) | S => (λn -> (- randnat act#2)))) 0 (take k#1 #2))))","num_train":4},{"ios":[[["[0, 8, 0, 3, 3, 7, 2, 5, 8, 8, 1, 1, 9, 2, 2, 5, 5, 6, 2, 2, 0, 5, 7, 3, 0, 7, 3, 5, 8, 9]"],"[3, 2, 0, 0, 1, 3, 5, 0, 3]"],[["[5, 5, 3, 7, 1, 8, 8, 1, 1, 6, 5, 5, 7, 7, 6, 4, 5, 7, 2, 9, 8, 2, 6, 2, 4, 4, 6, 1, 0, 1]"],"[10, 0, 4, 0, 0, 6]"],[["[4, 6, 1, 4, 5, 3, 5, 3, 7, 7, 9, 9, 2, 9, 6, 6, 9, 7, 2, 0, 4, 8, 8, 5, 1, 6, 9, 8, 8, 4]"],"[5, 0, 9]"],[["[7, 1, 9, 6, 2, 4, 1, 3, 9, 5, 5, 7, 5, 3, 2, 6, 5, 5, 8, 2, 2, 3, 7, 8, 7, 3, 2, 8, 7, 4]"],"[4, 0, 0, 0]"],[["[8, 6, 8, 7, 8, 6, 0, 0, 6, 4, 6, 5, 1, 9, 0, 2, 8, 0, 3, 7, 7, 5, 4, 9, 9, 8, 0, 1, 6, 7]"],"[1, 0, 10, 0, 1]"],[["[5, 4, 4, 9, 4, 9, 3, 0, 8, 7, 1, 6, 9, 4, 6, 9, 0, 2, 4, 3, 2, 6, 4, 4, 6, 5, 5, 4, 0, 1]"],"[11, 0, 2, 2, 0, 0, 1]"],[["[0, 2, 6, 7, 9, 3, 0, 9, 0, 5, 2, 1, 7, 7, 6, 9, 4, 1, 2, 5, 0, 8, 5, 0, 7, 8, 7, 4, 0, 5]"],"[10, 0, 0, 6, 0]"],[["[3, 7, 7, 7, 1, 6, 8, 2, 4, 1, 1, 8, 6, 6, 2, 0, 8, 3, 2, 6, 8, 4, 3, 9, 0, 0, 3, 7, 8, 6]"],"[17, 0]"]],"type":"(list -> list)","name":"070","solution":"(letII (+ randnat randnat) (λk -> (scanl (λacc act -> (letII (letII randnat (λx -> (+ act#2 randnat))) (λx -> (- randnat (letII acc#3 (λx -> (case (flip 0.1) of True => x#2 | False => x#1))))))) 0 (take (case (+ randnat randnat) of O => randnat | S => (λn -> (inc randnat))) #2))))","num_train":4},{"ios":[[["[8, 6, 2, 6, 7, 1, 7, 9, 1, 7, 8, 4, 9, 7, 2, 1, 1, 7, 1, 1, 3, 5, 2, 7, 6, 0, 0, 4, 9, 5]"],"[8, 10, 3, 4, 4, 2, 11, 9, 2, 5, 5, 0, 10, 7]"],[["[1, 2, 3, 4, 6, 2, 8, 9, 2, 3, 4, 4, 4, 6, 9, 8, 2, 2, 0, 5, 3, 8, 5, 6, 5, 9, 3, 0, 4, 0]"],"[12, 6, 4, 3, 5, 0, 9, 2, 5, 0, 8, 7, 10, 8]"],[["[8, 0, 1, 3, 9, 4, 0, 7, 2, 0, 6, 3, 4, 0, 2, 1, 9, 9, 9, 9, 3, 2, 0, 7, 8, 4, 5, 1, 1, 2]"],"[21, 5, 6, 0, 17, 16, 15, 1, 2, 5, 5, 0, 16, 8]"],[["[2, 6, 1, 5, 4, 3, 4, 5, 3, 3, 1, 7, 8, 5, 8, 8, 8, 7, 3, 0, 4, 2, 3, 1, 1, 7, 1, 4, 8, 7]"],"[5, 3, 4, 4, 1, 8, 0, 7, 2, 4, 0, 19, 3, 8]"],[["[6, 9, 1, 3, 3, 0, 5, 7, 7, 2, 5, 1, 2, 6, 7, 0, 8, 5, 7, 8, 1, 6, 8, 5, 8, 2, 6, 0, 5, 9]"],"[6, 4, 2, 7, 21, 12, 2, 6, 1, 11, 2, 3, 6, 4]"],[["[7, 9, 7, 3, 8, 8, 9, 4, 8, 1, 3, 2, 0, 1, 1, 2, 8, 5, 0, 9, 6, 5, 0, 9, 0, 7, 0, 6, 6, 0]"],"[7, 3, 6, 1, 8, 4, 10, 13, 1, 0, 4, 2, 5, 2]"],[["[3, 7, 7, 7, 9, 7, 2, 8, 8, 6, 1, 1, 8, 0, 9, 6, 0, 8, 3, 0, 8, 4, 3, 2, 6, 6, 4, 0, 3, 1]"],"[8, 3, 13, 2, 9, 0, 4, 4, 4, 4, 3, 17, 3, 5, 6, 0, 15, 8, 6, 2]"],[["[4, 1, 0, 1, 5, 3, 2, 4, 4, 5, 1, 0, 8, 9, 5, 8, 7, 1, 0, 1, 8, 3, 8, 7, 0, 9, 0, 5, 0, 4]"],"[6, 5, 3, 1, 5, 2, 1, 4, 5, 3, 5, 3, 7, 2]"]],"type":"(list -> list)","name":"071","solution":"(letII (letII 3 (λx -> (case randnat of O => randnat | S => (λn -> 4)))) (λk -> (scanl (λacc act -> (letII (case (flip 0.7) of True => randnat | False => randnat) (λx -> (+ randnat (- act#2 acc#3))))) 0 (take (case (inc randnat) of O => 8 | S => (λn -> (inc (letII 9 (λx -> (+ k#3 x#1)))))) #2))))","num_train":4},{"ios":[[["[5, 9, 5, 2, 7, 9, 9, 9, 2, 6, 8, 9, 8, 7, 3, 9, 0, 6, 2, 1, 7, 1, 0, 6, 8, 6, 9, 4, 6, 2]"],"[0, 0, 0, 23, 23, 23, 23, 23, 0, 0, 0]"],[["[5, 5, 9, 7, 5, 8, 2, 7, 2, 5, 7, 3, 1, 9, 5, 3, 0, 2, 2, 2, 3, 7, 1, 5, 6, 7, 4, 8, 5, 9]"],"[4, 4, 1, 3, 3]"],[["[9, 6, 5, 4, 4, 0, 1, 7, 0, 4, 1, 4, 8, 9, 8, 1, 5, 2, 0, 4, 7, 7, 4, 6, 8, 5, 9, 7, 6, 3]"],"[0, 3, 7, 7, 7, 10, 4, 3, 1, 0, 7, 5, 5, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 3, 6, 6, 6]"],[["[7, 9, 6, 3, 3, 4, 6, 0, 4, 7, 9, 9, 0, 5, 0, 0, 7, 3, 7, 9, 5, 9, 4, 2, 3, 0, 7, 6, 0, 5]"],"[0, 6, 8, 0, 9, 7, 7, 14, 14, 6, 3, 3, 2, 2, 2, 0, 6, 6, 8, 8, 1, 1, 1, 1, 5, 0, 0, 0, 10, 10]"],[["[7, 9, 9, 5, 3, 3, 9, 9, 8, 5, 7, 0, 1, 1, 8, 7, 9, 7, 3, 2, 9, 5, 2, 4, 5, 9, 0, 6, 2, 4]"],"[0, 0, 2, 2, 0, 5, 5, 5, 5, 3, 3]"],[["[6, 7, 8, 4, 3, 8, 3, 7, 2, 9, 5, 0, 3, 0, 7, 3, 7, 6, 9, 9, 5, 1, 1, 3, 2, 2, 7, 1, 2, 0]"],"[0, 3, 3, 1, 2, 2, 3, 1, 1, 7, 7, 20, 0, 0, 0]"],[["[5, 9, 6, 7, 4, 7, 3, 6, 9, 0, 5, 2, 4, 9, 0, 2, 4, 3, 7, 0, 7, 2, 7, 1, 2, 4, 5, 6, 1, 7]"],"[7, 1, 0, 2]"],[["[4, 6, 8, 5, 5, 7, 2, 8, 5, 4, 4, 2, 9, 3, 1, 3, 4, 4, 8, 5, 7, 4, 3, 4, 4, 9, 9, 7, 9, 2]"],"[0, 0, 0, 2]"]],"type":"(list -> list)","name":"072","solution":"(letII (inc (letII randnat (λx -> (+ randnat randnat)))) (λk -> (scanl (λacc act -> (case (> randnat act#1) of True => randnat | False => (case (flip 0.5) of True => randnat | False => acc#2))) 0 (take (+ randnat k#1) #2))))","num_train":4},{"ios":[[["[2, 4, 6, 9, 6, 4, 1, 5, 8, 5, 1, 9, 3, 1, 5, 6, 5, 6, 4, 1, 0, 0, 2, 9, 7, 9, 4, 5, 4, 9]"],"[1, 3, 5, 8, 5, 3, 0, 4, 7, 4, 0, 8, 2]"],[["[8, 8, 4, 8, 0, 2, 9, 7, 2, 7, 1, 2, 9, 5, 4, 9, 9, 6, 1, 3, 9, 3, 5, 8, 8, 0, 4, 7, 4, 9]"],"[7, 7, 3, 7, 1, 1, 8, 6, 1, 6, 0, 1, 8, 4, 3, 8, 8, 5, 0, 2, 8, 2]"],[["[8, 2, 8, 3, 6, 6, 2, 7, 9, 3, 8, 2, 7, 3, 0, 1, 7, 9, 2, 2, 4, 1, 5, 9, 7, 7, 6, 2, 0, 2]"],"[7, 1, 7, 2, 5, 5, 1, 6]"],[["[3, 0, 2, 8, 7, 8, 6, 2, 6, 3, 7, 5, 4, 9, 2, 7, 6, 8, 5, 0, 8, 2, 4, 5, 3, 7, 1, 2, 7, 3]"],"[2, 0, 1, 7, 6, 7, 5, 1, 5, 2, 6]"],[["[7, 9, 2, 3, 4, 1, 2, 8, 3, 0, 7, 7, 6, 5, 4, 5, 3, 0, 2, 0, 0, 9, 6, 6, 5, 0, 9, 7, 3, 4]"],"[6, 8, 1, 2, 3, 0, 1, 7, 2, 19, 6, 6]"],[["[5, 8, 7, 9, 6, 3, 4, 2, 5, 0, 2, 2, 7, 3, 8, 6, 3, 0, 8, 6, 3, 3, 0, 2, 9, 3, 6, 5, 5, 3]"],"[4, 7, 6, 8, 5, 2, 3, 1, 4, 2, 1, 1, 6, 2, 7, 5]"],[["[2, 7, 5, 3, 7, 3, 9, 4, 7, 4, 2, 6, 2, 9, 6, 0, 1, 6, 1, 0, 8, 4, 5, 9, 3, 8, 0, 8, 7, 3]"],"[1, 6, 4, 2, 6, 2, 8, 3, 6, 3, 1]"],[["[1, 7, 5, 0, 3, 8, 1, 9, 9, 0, 6, 1, 6, 8, 2, 8, 9, 7, 2, 3, 0, 2, 9, 8, 3, 4, 8, 7, 0, 1]"],"[0, 6, 4, 0, 2, 7, 0, 8, 8, 6, 5, 0, 5, 7]"]],"type":"(list -> list)","name":"073","solution":"(letII (case (iseven 3) of True => 0 | False => 9) (λk -> (scanl (λacc act -> (case act#1 of O => (case randnat of O => (+ acc#2 randnat) | S => (λn -> randnat)) | S => (λn -> n#1))) 0 (take (case (+ randnat k#1) of O => (+ k#1 k#1) | S => (λn -> n#1)) #2))))","num_train":4},{"ios":[[["[0, 5, 1, 6, 5, 4, 6, 7, 6, 9, 4, 4, 2, 2, 9, 4, 7, 4, 6, 0, 3, 5, 0, 6, 1, 9, 4, 4, 2, 6]"],"[0, 5, 4, 8, 4]"],[["[2, 8, 8, 3, 3, 4, 6, 8, 9, 0, 0, 6, 2, 8, 6, 1, 4, 9, 5, 4, 8, 7, 7, 4, 3, 9, 1, 8, 0, 5]"],"[2, 12, 1, 7, 0, 4]"],[["[9, 3, 9, 0, 0, 0, 4, 4, 6, 0, 3, 3, 0, 1, 9, 7, 2, 4, 3, 3, 7, 3, 9, 7, 2, 4, 4, 7, 4, 5]"],"[9, 3, 1, 2, 0, 0, 4, 1]"],[["[0, 5, 8, 5, 0, 8, 4, 5, 3, 9, 0, 3, 5, 7, 6, 1, 8, 1, 8, 6, 2, 7, 7, 5, 1, 2, 0, 8, 4, 5]"],"[0, 5, 3, 4, 0, 8, 0]"],[["[1, 4, 6, 9, 5, 9, 8, 0, 7, 1, 6, 9, 1, 5, 2, 0, 1, 0, 1, 7, 2, 1, 8, 2, 2, 1, 3, 9, 3, 6]"],"[1, 1, 0, 9, 6, 5]"],[["[0, 2, 6, 6, 3, 8, 2, 0, 9, 1, 6, 8, 5, 4, 5, 9, 0, 6, 8, 7, 8, 5, 8, 3, 2, 1, 0, 1, 0, 8]"],"[0, 2, 1, 2, 1, 3, 2]"],[["[2, 6, 4, 2, 7, 7, 9, 6, 6, 9, 8, 8, 8, 6, 8, 3, 3, 8, 7, 9, 4, 7, 6, 5, 4, 2, 3, 2, 7, 1]"],"[2, 1, 2, 0]"],[["[2, 6, 2, 7, 7, 5, 3, 0, 9, 7, 5, 0, 9, 7, 8, 7, 4, 0, 3, 2, 5, 2, 4, 4, 9, 1, 3, 5, 8, 9]"],"[2, 9, 0, 7, 4, 0, 3, 19, 8]"]],"type":"(list -> list)","name":"074","solution":"(letII (inc (case (== randnat randnat) of True => randnat | False => randnat)) (λk -> (scanl (λacc act -> (letII (case acc#2 of O => act#1 | S => (λn -> randnat)) (λx -> (case (case randnat of O => 7 | S => (λn -> k#5)) of O => randnat | S => (λn -> x#2))))) 0 (take (case (- k#1 randnat) of O => randnat | S => (λn -> (+ randnat 6))) #2))))","num_train":4},{"ios":[[["[7, 1, 8, 1, 2, 4, 1, 8, 2, 6, 9, 5, 9, 4, 4, 0, 5, 5, 4, 8, 6, 7, 8, 9, 3, 0, 1, 9, 4, 0]"],"[5, 30, 8, 5, 19, 9, 17, 15]"],[["[9, 2, 5, 1, 9, 3, 4, 9, 5, 7, 1, 3, 7, 2, 2, 6, 1, 3, 4, 0, 5, 0, 5, 9, 0, 6, 3, 9, 0, 2]"],"[10, 12, 21, 9, 16, 21, 10, 16]"],[["[4, 8, 2, 7, 6, 3, 7, 8, 6, 5, 4, 0, 9, 9, 2, 6, 3, 8, 1, 0, 4, 5, 0, 3, 3, 5, 4, 1, 7, 4]"],"[10, 23, 25, 21, 4, 26, 12, 42]"],[["[6, 3, 3, 6, 1, 3, 0, 5, 7, 8, 2, 8, 6, 4, 9, 6, 9, 6, 1, 7, 7, 2, 5, 1, 9, 5, 0, 9, 7, 0]"],"[10, 30, 18, 16, 37, 2, 9, 20]"],[["[1, 3, 1, 3, 1, 6, 1, 3, 4, 1, 8, 6, 5, 7, 1, 3, 4, 6, 4, 0, 7, 2, 9, 2, 1, 7, 5, 5, 2, 7]"],"[12, 17, 16, 10, 7, 11, 5, 15]"],[["[9, 0, 1, 6, 6, 7, 6, 7, 8, 1, 8, 8, 2, 6, 0, 9, 0, 4, 9, 8, 1, 7, 9, 3, 1, 8, 6, 1, 5, 8]"],"[14, 19, 22, 12, 11, 4, 4]"],[["[2, 0, 0, 7, 5, 4, 2, 0, 9, 1, 4, 5, 3, 8, 3, 0, 2, 9, 0, 4, 7, 7, 7, 9, 9, 0, 6, 9, 1, 4]"],"[26, 37, 41, 9, 9, 23]"],[["[7, 7, 5, 5, 4, 5, 9, 5, 0, 8, 2, 0, 1, 0, 4, 7, 9, 4, 8, 7, 8, 0, 9, 1, 7, 5, 5, 6, 8, 9]"],"[16, 15, 7, 8, 13, 3, 8, 10]"]],"type":"(list -> list)","name":"075","solution":"(letII (+ (inc 4) (+ (letII 8 (λx -> (- x#1 x#1))) randnat)) (λk -> (scanl (λacc act -> (+ (+ (case act#1 of O => acc#2 | S => (λn -> randnat)) randnat) randnat)) 0 (take (case (flip 0.4) of True => k#1 | False => (case randnat of O => randnat | S => (λn -> 8))) #2))))","num_train":4},{"ios":[[["[5, 4, 5, 5, 7, 5, 3, 2, 7, 1, 5, 4, 2, 0, 8, 6, 2, 5, 5, 8, 4, 6, 8, 7, 4, 7, 6, 8, 9, 9]"],"[5, 5, 9, 5, 2, 3, 5]"],[["[2, 8, 6, 7, 9, 5, 9, 6, 0, 5, 9, 1, 0, 8, 2, 6, 1, 1, 3, 9, 3, 7, 6, 1, 0, 7, 2, 1, 3, 2]"],"[3, 1, 1, 5, 0, 5, 3, 1, 5, 1, 2, 8]"],[["[8, 2, 1, 4, 6, 8, 9, 1, 2, 4, 2, 0, 8, 5, 1, 7, 1, 3, 0, 1, 4, 2, 6, 9, 3, 3, 5, 7, 8, 5]"],"[1, 2, 1, 1, 12, 1, 3, 2, 3, 4, 1, 4, 7, 14]"],[["[4, 2, 1, 3, 4, 4, 8, 9, 9, 3, 5, 6, 3, 7, 7, 8, 1, 9, 7, 3, 2, 6, 1, 8, 9, 8, 0, 5, 7, 4]"],"[24, 1, 1, 3]"],[["[1, 9, 7, 5, 1, 9, 5, 4, 7, 1, 7, 3, 9, 4, 6, 6, 3, 3, 5, 5, 8, 9, 2, 2, 5, 9, 0, 9, 4, 9]"],"[0, 2]"],[["[6, 9, 9, 6, 7, 4, 7, 6, 7, 8, 9, 4, 7, 1, 2, 1, 4, 1, 0, 9, 5, 7, 2, 8, 0, 9, 9, 9, 8, 8]"],"[0, 10, 3, 2, 0]"],[["[4, 1, 5, 6, 9, 9, 1, 7, 5, 9, 4, 1, 3, 7, 4, 2, 2, 9, 9, 8, 4, 6, 6, 2, 3, 4, 3, 5, 3, 4]"],"[1, 0]"],[["[6, 9, 5, 5, 2, 8, 3, 3, 9, 1, 9, 0, 9, 0, 6, 8, 1, 4, 5, 6, 8, 4, 6, 6, 7, 0, 0, 1, 8, 3]"],"[3, 6, 1, 12, 4, 14, 3, 3, 1, 2, 6, 1, 1]"]],"type":"(list -> list)","name":"076","solution":"(letII (case (flip 0.9) of True => (letII randnat (λx -> (- (case randnat of O => x#1 | S => (λn -> x#2)) randnat))) | False => randnat) (λk -> (scanl (λacc act -> (case (flip 0.1) of True => (+ randnat randnat) | False => (letII acc#2 (λx -> (case (flip 0.2) of True => act#2 | False => randnat))))) 0 (take (+ k#1 (+ randnat randnat)) #2))))","num_train":4},{"ios":[[["[6, 8, 7, 7, 2, 9, 0, 3, 3, 3, 5, 6, 3, 3, 8, 0, 7, 8, 8, 7, 1, 6, 4, 2, 7, 9, 4, 6, 8, 7]"],"[2, 8, 1, 3, 2, 9, 0]"],[["[5, 3, 6, 9, 3, 7, 6, 7, 6, 5, 0, 1, 6, 1, 6, 8, 9, 6, 1, 2, 0, 2, 7, 5, 9, 1, 5, 5, 7, 7]"],"[5, 5, 2, 2, 0, 0, 1, 6]"],[["[6, 2, 2, 6, 6, 9, 2, 5, 2, 7, 1, 6, 3, 0, 4, 4, 0, 3, 5, 3, 9, 2, 7, 5, 3, 2, 0, 1, 9, 5]"],"[0, 2, 2, 6, 10, 9, 10, 5, 5]"],[["[6, 7, 1, 3, 2, 3, 3, 6, 2, 8, 4, 2, 3, 4, 4, 7, 0, 9, 1, 7, 3, 0, 1, 3, 6, 6, 3, 7, 6, 6]"],"[6, 7, 1, 2, 2, 1]"],[["[1, 3, 2, 2, 7, 3, 7, 9, 6, 6, 4, 1, 8, 5, 2, 8, 4, 1, 3, 1, 4, 9, 4, 9, 6, 2, 0, 9, 5, 3]"],"[0, 0, 2, 2, 7, 3, 3, 9]"],[["[7, 9, 7, 7, 0, 1, 2, 7, 5, 2, 7, 7, 8, 5, 2, 9, 4, 2, 5, 2, 2, 3, 7, 2, 9, 3, 5, 9, 5, 9]"],"[8, 10, 7, 7, 11, 2, 2, 2, 5, 2, 2]"],[["[0, 9, 1, 8, 2, 2, 7, 2, 2, 2, 4, 6, 5, 0, 6, 8, 4, 1, 3, 3, 1, 9, 2, 7, 1, 7, 9, 3, 5, 7]"],"[0, 0, 1, 5, 5, 5, 15, 7, 0, 0, 4]"],[["[3, 9, 4, 1, 9, 3, 1, 2, 4, 9, 4, 2, 8, 8, 1, 3, 4, 2, 4, 0, 8, 2, 3, 7, 2, 6, 9, 9, 7, 3]"],"[2, 9, 5, 14, 9, 0, 1, 2, 4, 1, 7, 2, 1, 1, 4]"]],"type":"(list -> list)","name":"077","solution":"(letII (+ randnat 6) (λk -> (scanl (λacc act -> (case (flip 0.5) of True => (case (flip 0.4) of True => acc#2 | False => act#1) | False => randnat)) 0 (take k#1 #2))))","num_train":4},{"ios":[[["[9, 2, 4, 2, 0, 6, 9, 0, 5, 9, 6, 6, 3, 5, 9, 2, 0, 4, 7, 4, 2, 9, 8, 7, 6, 8, 5, 5, 9, 1]"],"[11, 2, 4, 2]"],[["[4, 1, 4, 6, 0, 2, 7, 4, 8, 1, 9, 2, 0, 7, 1, 5, 4, 3, 5, 6, 4, 8, 1, 9, 0, 5, 2, 9, 6, 1]"],"[4, 1, 4, 1]"],[["[9, 5, 9, 4, 3, 8, 5, 4, 5, 2, 4, 5, 4, 2, 4, 9, 7, 2, 9, 5, 4, 2, 8, 3, 5, 5, 1, 9, 0, 3]"],"[0, 5, 9, 4]"],[["[5, 6, 8, 9, 8, 0, 5, 5, 4, 2, 1, 9, 1, 8, 9, 7, 9, 9, 7, 0, 1, 0, 8, 0, 8, 3, 3, 7, 9, 6]"],"[1, 6, 0, 9]"],[["[0, 8, 8, 5, 2, 0, 9, 4, 6, 1, 0, 7, 1, 3, 1, 6, 9, 4, 3, 4, 8, 2, 0, 2, 5, 4, 4, 1, 3, 6]"],"[0, 3, 8, 5]"],[["[1, 7, 6, 2, 8, 0, 0, 8, 4, 6, 0, 5, 2, 1, 6, 9, 2, 6, 3, 9, 9, 1, 0, 7, 9, 9, 5, 2, 6, 1]"],"[1, 7, 6, 2]"],[["[9, 9, 7, 2, 6, 8, 3, 2, 6, 8, 2, 7, 5, 8, 0, 6, 8, 1, 0, 7, 4, 0, 7, 0, 0, 1, 4, 7, 0, 6]"],"[9, 9, 7, 2]"],[["[2, 6, 0, 6, 9, 3, 1, 7, 6, 5, 8, 5, 1, 5, 7, 7, 7, 6, 7, 5, 8, 5, 8, 0, 5, 7, 5, 4, 4, 1]"],"[2, 6, 0, 6]"]],"type":"(list -> list)","name":"078","solution":"(letII (inc 3) (λk -> (scanl (λacc act -> (case (> act#1 act#1) of True => (case randnat of O => k#3 | S => (λn -> (inc randnat))) | False => (case randnat of O => (letII acc#2 (λx -> (- randnat (inc randnat)))) | S => (λn -> act#2)))) 0 (take k#1 #2))))","num_train":4},{"ios":[[["[0, 0, 3, 0, 2, 6, 9, 8, 9, 8, 8, 5, 7, 1, 8, 2, 9, 4, 4, 8, 4, 4, 0, 1, 0, 2, 4, 4, 6, 5]"],"[3, 3, 4, 0, 0, 1]"],[["[2, 9, 6, 8, 9, 6, 1, 1, 2, 2, 6, 7, 3, 2, 3, 4, 6, 9, 7, 8, 8, 7, 4, 7, 4, 9, 4, 3, 3, 5]"],"[1, 2]"],[["[1, 8, 3, 4, 5, 7, 6, 4, 1, 1, 2, 4, 9, 6, 4, 3, 6, 8, 7, 7, 0, 4, 1, 3, 8, 2, 0, 5, 4, 7]"],"[2, 3, 4]"],[["[9, 0, 8, 8, 4, 9, 7, 9, 5, 9, 1, 8, 3, 0, 1, 8, 1, 1, 4, 3, 4, 9, 9, 4, 2, 2, 6, 6, 9, 7]"],"[1, 1, 0, 1, 2, 3, 4]"],[["[7, 1, 9, 7, 5, 6, 3, 8, 1, 6, 2, 6, 0, 7, 1, 3, 3, 3, 9, 7, 0, 2, 5, 2, 4, 5, 7, 1, 0, 3]"],"[5, 6, 7, 5, 6, 7, 5, 6, 3]"],[["[0, 1, 0, 9, 4, 5, 2, 4, 9, 4, 5, 3, 7, 4, 3, 0, 5, 5, 9, 3, 8, 7, 1, 5, 5, 8, 8, 0, 0, 5]"],"[0, 2, 3, 4, 5, 6, 10, 11, 12, 9, 10]"],[["[1, 4, 3, 7, 8, 0, 0, 9, 4, 4, 6, 4, 4, 1, 1, 6, 3, 7, 1, 2, 8, 0, 7, 4, 9, 8, 8, 5, 6, 8]"],"[1, 2, 1, 2]"],[["[4, 9, 9, 4, 5, 9, 0, 3, 2, 8, 4, 2, 8, 1, 8, 2, 4, 6, 7, 2, 2, 0, 4, 4, 2, 4, 6, 6, 9, 6]"],"[1, 2]"]],"type":"(list -> list)","name":"079","solution":"(letII (+ (inc randnat) 1) (λk -> (scanl (λacc act -> (case (- randnat act#1) of O => (inc acc#2) | S => (λn -> randnat))) 0 (take k#1 #2))))","num_train":4},{"ios":[[["[3, 8, 9, 9, 6, 5, 2, 3, 6, 5, 3, 6, 1, 9, 6, 0, 2, 9, 5, 8, 7, 6, 5, 0, 7, 3, 8, 3, 7, 6]"],"[10, 15, 0, 1, 1, 1, 5, 4, 0, 3]"],[["[6, 6, 3, 3, 4, 8, 9, 7, 8, 3, 2, 3, 9, 2, 7, 2, 7, 7, 2, 0, 3, 1, 4, 3, 7, 7, 3, 8, 8, 4]"],"[0, 8, 5, 19, 0, 0, 7, 0]"],[["[3, 8, 9, 6, 9, 2, 0, 8, 4, 2, 9, 6, 7, 2, 4, 2, 5, 0, 3, 7, 9, 6, 9, 2, 1, 5, 3, 5, 4, 7]"],"[15, 0]"],[["[6, 2, 2, 6, 3, 2, 3, 1, 4, 5, 5, 3, 5, 6, 9, 0, 6, 4, 9, 4, 6, 7, 0, 2, 8, 3, 1, 1, 2, 1]"],"[0, 0, 4, 9, 0, 21, 0, 0, 0, 8, 3, 1, 1, 12, 7, 8, 1, 14]"],[["[3, 2, 9, 9, 0, 3, 2, 4, 9, 7, 5, 5, 9, 2, 3, 6, 0, 5, 6, 8, 8, 0, 5, 1, 6, 6, 2, 7, 1, 0]"],"[3, 9, 1, 13, 0, 6, 1, 0, 1]"],[["[4, 3, 4, 6, 9, 0, 9, 1, 1, 6, 3, 3, 8, 6, 7, 3, 8, 5, 3, 6, 1, 3, 8, 3, 6, 6, 6, 9, 5, 2]"],"[2, 0, 4, 1, 0, 7, 5, 0, 9, 15, 4, 0, 0]"],[["[7, 9, 4, 7, 3, 5, 0, 9, 0, 5, 1, 0, 8, 5, 9, 6, 7, 9, 9, 3, 9, 8, 7, 3, 0, 5, 9, 6, 0, 9]"],"[1, 0]"],[["[1, 3, 4, 3, 5, 5, 1, 4, 9, 8, 3, 0, 0, 5, 4, 0, 7, 2, 7, 7, 6, 3, 8, 1, 3, 1, 7, 2, 6, 6]"],"[3, 2, 1, 8, 6, 1, 2, 1, 2, 1, 3, 1, 5]"]],"type":"(list -> list)","name":"080","solution":"(letII (inc randnat) (λk -> (scanl (λacc act -> (letII (inc acc#2) (λx -> (case act#2 of O => randnat | S => (λn -> randnat))))) 0 (take (+ randnat randnat) #2))))","num_train":4},{"ios":[[["[1, 3, 3, 9, 4, 5, 7, 9, 4, 1, 8, 8, 4, 7, 5, 4, 5, 2, 5, 7, 8, 0, 6, 4, 3, 3, 4, 7, 1, 7]"],"[6, 2, 1, 0, 0, 0, 0, 0, 15, 2, 1, 0, 0, 15, 3, 0]"],[["[9, 5, 8, 4, 1, 2, 5, 3, 6, 3, 8, 7, 7, 5, 8, 5, 1, 0, 8, 6, 6, 3, 9, 6, 3, 9, 2, 4, 3, 0]"],"[2, 1, 0, 2, 17, 8, 0, 4]"],[["[5, 6, 7, 0, 4, 1, 9, 5, 3, 8, 4, 5, 2, 1, 7, 6, 8, 3, 5, 8, 0, 2, 8, 1, 5, 4, 6, 4, 5, 5]"],"[4, 3, 8, 3, 2, 7, 8, 2, 8]"],[["[0, 4, 2, 1, 2, 5, 0, 4, 1, 4, 0, 7, 7, 9, 7, 4, 6, 7, 5, 8, 3, 4, 0, 9, 7, 6, 8, 4, 0, 6]"],"[7, 1, 3, 0, 10, 2, 6, 5]"],[["[4, 3, 0, 2, 9, 5, 0, 0, 6, 8, 3, 9, 9, 2, 9, 5, 2, 0, 8, 4, 1, 3, 8, 9, 0, 8, 1, 5, 6, 6]"],"[4, 4, 7, 7, 0, 7, 7, 1]"],[["[3, 8, 6, 4, 5, 0, 7, 0, 7, 6, 3, 4, 1, 4, 4, 9, 7, 9, 9, 7, 7, 4, 8, 8, 3, 3, 6, 2, 6, 5]"],"[9, 9, 4, 7, 0, 9, 1, 3, 1, 7]"],[["[7, 4, 0, 6, 9, 3, 8, 4, 1, 2, 5, 7, 2, 7, 5, 6, 9, 5, 2, 3, 4, 4, 5, 7, 9, 5, 1, 3, 7, 5]"],"[7, 5, 8, 3, 5, 6, 1, 19, 5, 5, 7, 0, 1, 4, 29]"],[["[1, 9, 1, 8, 1, 3, 9, 0, 0, 9, 6, 1, 1, 2, 6, 6, 0, 5, 5, 4, 0, 5, 4, 2, 7, 2, 1, 0, 0, 2]"],"[12, 0, 0, 3, 2, 4, 2, 7, 10, 0, 15]"]],"type":"(list -> list)","name":"081","solution":"(letII (letII (+ 2 randnat) (λx -> (+ x#1 (case x#1 of O => x#1 | S => (λn -> randnat))))) (λk -> (scanl (λacc act -> (+ (letII act#1 (λx -> (- x#1 x#1))) (letII acc#2 (λx -> (case randnat of O => k#4 | S => (λn -> randnat)))))) 0 (take (inc (+ (- randnat k#1) k#1)) #2))))","num_train":4},{"ios":[[["[5, 9, 5, 9, 1, 1, 1, 9, 2, 0, 4, 0, 0, 1, 8, 0, 1, 0, 8, 2, 2, 6, 1, 4, 8, 3, 0, 9, 1, 9]"],"[10, 11, 8, 13, 2, 6, 1]"],[["[6, 6, 6, 1, 2, 9, 8, 7, 0, 2, 7, 3, 1, 2, 7, 6, 7, 3, 7, 6, 0, 5, 4, 2, 4, 8, 2, 0, 1, 2]"],"[8, 3, 11, 3, 5, 13, 9]"],[["[0, 0, 5, 4, 0, 6, 4, 8, 9, 7, 4, 2, 0, 5, 6, 6, 3, 2, 9, 7, 9, 6, 5, 9, 4, 3, 5, 4, 3, 8]"],"[17, 2, 7, 9, 2, 10, 7]"],[["[3, 6, 1, 7, 5, 8, 7, 7, 5, 1, 4, 2, 4, 3, 7, 1, 8, 2, 3, 0, 2, 5, 0, 8, 2, 1, 4, 3, 9, 5]"],"[5, 8, 3, 6, 8, 21, 9]"],[["[2, 3, 7, 0, 6, 2, 1, 6, 2, 5, 7, 8, 5, 4, 1, 1, 5, 5, 4, 8, 7, 6, 3, 8, 4, 5, 5, 2, 9, 9]"],"[4, 8, 1, 3, 13, 10, 1]"],[["[9, 0, 4, 3, 5, 0, 4, 4, 1, 8, 6, 2, 8, 0, 1, 0, 2, 9, 3, 1, 0, 9, 0, 6, 1, 7, 1, 5, 4, 5]"],"[19, 3, 10, 15, 6, 1, 8]"],[["[3, 1, 3, 6, 7, 7, 9, 7, 0, 3, 1, 8, 5, 5, 4, 0, 3, 2, 9, 5, 4, 1, 9, 4, 5, 4, 1, 7, 0, 8]"],"[7, 3, 4, 7, 16, 2, 9]"],[["[1, 6, 4, 0, 8, 5, 3, 6, 3, 3, 6, 1, 1, 6, 4, 5, 7, 8, 4, 0, 5, 7, 4, 7, 4, 0, 7, 2, 7, 1]"],"[11, 11, 8, 19, 15, 8, 2]"]],"type":"(list -> list)","name":"082","solution":"(letII (letII 5 (λx -> (inc (inc x#1)))) (λk -> (scanl (λacc act -> (+ randnat (case (flip 0.3) of True => (letII randnat (λx -> (- 8 acc#3))) | False => (case (flip 0.9) of True => act#1 | False => randnat)))) 0 (take (case (flip 0.3) of True => (letII k#1 (λx -> (case randnat of O => randnat | S => (λn -> x#2)))) | False => k#1) #2))))","num_train":4},{"ios":[[["[6, 1, 0, 6, 6, 6, 3, 9, 4, 9, 0, 6, 5, 3, 1, 6, 6, 9, 5, 7, 4, 2, 3, 2, 5, 5, 9, 7, 2, 2]"],"[0, 0, 0, 6, 5, 6, 2, 9]"],[["[8, 3, 6, 9, 5, 6, 3, 9, 2, 5, 8, 9, 7, 8, 5, 7, 8, 7, 3, 6, 3, 1, 6, 9, 0, 9, 5, 5, 7, 4]"],"[3, 1, 5, 8, 0, 0, 2, 7]"],[["[8, 6, 5, 5, 5, 5, 9, 5, 6, 6, 6, 2, 6, 0, 0, 5, 6, 0, 2, 3, 5, 9, 6, 0, 5, 0, 4, 3, 1, 9]"],"[3, 0, 0, 1, 2, 0, 8, 0]"],[["[1, 8, 5, 3, 0, 9, 5, 3, 2, 3, 9, 2, 7, 0, 5, 0, 2, 5, 1, 6, 2, 3, 0, 7, 5, 1, 4, 5, 4, 7]"],"[0, 6, 0, 0, 0, 9, 0, 0]"],[["[3, 7, 2, 4, 8, 3, 1, 6, 2, 8, 0, 9, 3, 5, 4, 3, 2, 2, 2, 3, 2, 9, 8, 5, 9, 7, 4, 1, 9, 5]"],"[0, 0, 2, 4, 0, 0, 1, 6]"],[["[2, 5, 2, 4, 7, 4, 8, 4, 8, 1, 8, 6, 9, 7, 1, 1, 8, 5, 9, 0, 1, 3, 1, 4, 2, 0, 8, 5, 3, 4]"],"[2, 0, 0, 3, 7, 1, 4, 0]"],[["[0, 6, 4, 2, 9, 5, 1, 9, 0, 6, 8, 3, 5, 9, 1, 4, 2, 1, 9, 2, 1, 9, 2, 4, 5, 2, 1, 5, 9, 3]"],"[0, 5, 4, 0, 8, 5, 0, 7]"],[["[8, 1, 8, 8, 8, 1, 4, 1, 3, 7, 4, 0, 1, 3, 1, 8, 1, 5, 1, 1, 0, 5, 5, 9, 2, 4, 1, 5, 7, 1]"],"[2, 1, 0, 7, 0, 0, 0, 1]"]],"type":"(list -> list)","name":"083","solution":"(letII (+ 1 (letII (- 2 6) (λx -> (- x#1 randnat)))) (λk -> (scanl (λacc act -> (letII acc#2 (λx -> (- act#2 randnat)))) 0 (take 8 #2))))","num_train":4},{"ios":[[["[6, 1, 0, 2, 6, 6, 9, 6, 1, 6, 1, 5, 3, 3, 2, 0, 3, 3, 4, 6, 3, 4, 3, 4, 1, 6, 3, 6, 7, 6]"],"[3, 0, 0, 13, 7]"],[["[9, 9, 4, 1, 3, 3, 9, 6, 6, 8, 7, 2, 0, 7, 5, 9, 2, 2, 5, 5, 9, 2, 7, 4, 2, 0, 7, 5, 0, 2]"],"[0, 6, 1, 2, 11]"],[["[9, 7, 5, 9, 6, 3, 1, 9, 0, 0, 3, 0, 2, 3, 3, 2, 7, 5, 9, 9, 8, 2, 4, 3, 9, 3, 2, 5, 3, 0]"],"[7, 0, 6, 0, 0, 9, 10]"],[["[4, 9, 1, 6, 9, 8, 7, 4, 0, 5, 2, 0, 5, 6, 5, 0, 1, 9, 1, 1, 6, 3, 3, 9, 7, 5, 9, 3, 9, 3]"],"[2, 6, 3, 3, 1, 1, 9, 1, 1, 4]"],[["[7, 1, 4, 3, 5, 5, 1, 1, 8, 5, 0, 4, 4, 1, 5, 2, 2, 4, 0, 8, 1, 7, 5, 1, 9, 2, 4, 7, 5, 8]"],"[3, 0, 21, 12, 9, 0, 1, 0, 7, 9, 1, 1, 0]"],[["[7, 4, 2, 4, 6, 3, 4, 4, 8, 6, 0, 5, 3, 5, 2, 8, 1, 2, 8, 5, 2, 8, 7, 1, 4, 6, 4, 6, 3, 5]"],"[2, 10, 0, 1, 4, 2]"],[["[0, 1, 4, 5, 3, 5, 3, 3, 2, 4, 6, 0, 2, 6, 5, 9, 6, 0, 4, 8, 6, 5, 1, 2, 7, 0, 4, 6, 6, 3]"],"[5, 4, 3, 4, 4, 4]"],[["[4, 0, 5, 8, 7, 7, 9, 1, 8, 1, 5, 6, 3, 1, 8, 2, 1, 8, 9, 0, 2, 0, 8, 3, 2, 9, 0, 1, 0, 3]"],"[2, 2, 1, 5, 6, 0, 0, 6, 4, 0, 2, 1, 10]"]],"type":"(list -> list)","name":"084","solution":"(letII randnat (λk -> (scanl (λacc act -> (case (+ (letII 1 (λx -> (+ randnat (letII randnat (λx -> (case (flip 0.9) of True => (+ act#3 randnat) | False => x#1)))))) randnat) of O => (case act#1 of O => k#3 | S => (λn -> acc#3)) | S => (λn -> randnat))) 0 (take (+ (inc k#1) randnat) #2))))","num_train":4},{"ios":[[["[7, 8, 3, 5, 6, 3, 2, 0, 1, 1, 3, 9, 0, 5, 2, 6, 0, 8, 8, 0, 2, 0, 7, 1, 5, 6, 5, 0, 9, 1]"],"[3, 2, 2, 5, 3, 1, 1, 1, 1, 18, 1]"],[["[6, 0, 5, 4, 9, 4, 7, 3, 6, 5, 1, 2, 3, 1, 2, 1, 5, 2, 2, 4, 5, 0, 9, 8, 0, 5, 8, 2, 1, 5]"],"[1, 1, 6, 1, 4, 1, 2, 1, 4, 1, 1]"],[["[1, 6, 0, 3, 6, 0, 8, 2, 0, 2, 3, 5, 9, 3, 8, 6, 5, 8, 9, 3, 7, 8, 6, 2, 5, 1, 7, 4, 6, 5]"],"[7, 1, 4, 11, 1, 1, 2, 6, 1, 2, 1]"],[["[0, 3, 8, 3, 2, 4, 6, 0, 5, 2, 9, 8, 1, 1, 4, 3, 5, 9, 2, 9, 8, 1, 0, 7, 9, 6, 4, 5, 0, 3]"],"[1, 2, 1, 3, 1, 1, 5, 1, 3, 7, 4]"],[["[2, 2, 3, 1, 7, 1, 9, 2, 1, 2, 3, 7, 8, 1, 2, 6, 9, 3, 5, 6, 7, 6, 4, 5, 9, 0, 9, 0, 6, 3]"],"[4, 1, 11, 1, 4, 3, 1, 3, 8, 1, 2]"],[["[2, 9, 2, 0, 6, 4, 4, 7, 0, 9, 9, 8, 2, 1, 3, 5, 1, 0, 6, 6, 2, 6, 2, 0, 9, 7, 3, 2, 6, 1]"],"[3, 1, 2, 1, 2, 4, 1, 16, 4, 8, 1]"],[["[9, 8, 9, 6, 9, 2, 2, 6, 3, 8, 9, 0, 3, 8, 4, 1, 2, 6, 4, 1, 7, 8, 6, 4, 8, 8, 0, 3, 4, 5]"],"[2, 1, 1, 3, 1, 1, 1, 1, 5, 1, 1]"],[["[2, 1, 6, 6, 3, 4, 6, 3, 0, 2, 0, 4, 3, 3, 6, 9, 4, 3, 7, 8, 1, 9, 4, 4, 2, 7, 9, 8, 1, 4]"],"[4, 1, 14, 1, 5, 1, 1, 6, 1, 2, 10]"]],"type":"(list -> list)","name":"085","solution":"(letII (letII randnat (λx -> (+ randnat (letII randnat (λx -> (case randnat of O => x#2 | S => (λn -> randnat))))))) (λk -> (scanl (λacc act -> (inc (- (case act#1 of O => randnat | S => (λn -> randnat)) (case (flip 0.1) of True => act#1 | False => acc#2)))) 0 (take (inc (letII (case randnat of O => k#1 | S => (λn -> randnat)) (λx -> (inc 9)))) #2))))","num_train":4},{"ios":[[["[3, 0, 7, 7, 1, 8, 9, 4, 8, 9, 4, 9, 9, 5, 4, 4, 0, 4, 2, 1, 5, 1, 0, 6, 3, 9, 7, 6, 7, 2]"],"[6, 6, 3, 13, 0, 2]"],[["[7, 0, 8, 8, 3, 1, 2, 2, 7, 1, 5, 8, 4, 5, 5, 6, 9, 8, 5, 7, 8, 9, 2, 2, 8, 5, 5, 7, 6, 9]"],"[7, 7, 2, 0, 1, 2]"],[["[4, 0, 1, 8, 7, 3, 9, 7, 5, 5, 3, 9, 5, 3, 0, 4, 2, 4, 6, 7, 7, 5, 5, 5, 0, 5, 7, 6, 0, 9]"],"[6, 6, 3, 0, 3, 4]"],[["[2, 8, 3, 2, 8, 1, 0, 6, 8, 8, 4, 9, 6, 2, 0, 6, 2, 3, 6, 6, 0, 8, 3, 6, 3, 3, 3, 2, 0, 6]"],"[0, 3, 2, 0, 5, 2]"],[["[2, 2, 0, 7, 2, 0, 4, 1, 7, 7, 9, 5, 9, 9, 0, 9, 3, 2, 3, 7, 4, 1, 8, 1, 4, 6, 8, 2, 8, 5]"],"[11, 0, 0, 1, 3, 3]"],[["[4, 2, 7, 9, 8, 4, 9, 3, 3, 9, 8, 3, 2, 6, 2, 2, 3, 1, 8, 9, 0, 5, 2, 4, 9, 6, 6, 5, 2, 9]"],"[0, 26, 4, 1, 0, 1]"],[["[3, 4, 2, 5, 8, 4, 0, 3, 3, 7, 4, 0, 5, 9, 0, 8, 6, 6, 2, 4, 8, 7, 5, 7, 7, 4, 8, 8, 7, 8]"],"[9, 0, 4, 4, 7, 13]"],[["[6, 6, 4, 0, 3, 2, 1, 3, 1, 7, 7, 1, 9, 4, 9, 5, 7, 5, 9, 1, 8, 8, 4, 6, 4, 0, 0, 3, 1, 5]"],"[4, 4, 6, 6, 5, 0]"]],"type":"(list -> list)","name":"086","solution":"(letII 6 (λk -> (scanl (λacc act -> (case act#1 of O => acc#2 | S => (λn -> randnat))) 0 (take k#1 #2))))","num_train":4},{"ios":[[["[2, 8, 6, 3, 4, 6, 1, 8, 4, 9, 4, 0, 6, 6, 1, 4, 6, 7, 7, 6, 7, 4, 7, 3, 3, 1, 7, 6, 1, 4]"],"[15, 12, 1, 3, 4, 7, 27]"],[["[5, 7, 0, 2, 1, 3, 3, 0, 8, 7, 2, 9, 1, 7, 8, 1, 4, 7, 9, 9, 8, 8, 6, 5, 1, 7, 0, 3, 5, 1]"],"[3, 7, 5, 12, 3, 7, 4, 1, 6, 0]"],[["[6, 4, 4, 9, 1, 8, 2, 4, 7, 1, 5, 3, 7, 8, 2, 6, 5, 2, 5, 5, 4, 3, 1, 2, 3, 8, 1, 1, 2, 9]"],"[8, 4, 4, 1, 0, 5, 2, 0, 12, 0, 6, 2, 6, 3, 0]"],[["[0, 7, 3, 1, 8, 4, 8, 4, 1, 3, 9, 3, 2, 7, 1, 8, 3, 7, 7, 2, 6, 6, 4, 5, 4, 9, 2, 3, 3, 1]"],"[0, 2, 1, 6, 2, 0, 8, 2, 2, 25]"],[["[0, 9, 6, 0, 4, 4, 7, 1, 2, 3, 5, 3, 8, 2, 1, 0, 4, 1, 7, 0, 1, 6, 8, 7, 9, 4, 7, 2, 3, 0]"],"[5, 0, 6, 9, 4, 4, 9, 1, 0, 7, 2, 1]"],[["[6, 5, 6, 9, 0, 0, 1, 0, 7, 1, 7, 5, 0, 2, 8, 3, 8, 6, 5, 5, 6, 0, 1, 0, 8, 7, 3, 4, 5, 1]"],"[3, 2, 2, 9, 2, 2, 7, 4, 8, 2, 7, 3]"],[["[3, 5, 1, 2, 5, 1, 0, 3, 0, 9, 9, 2, 3, 7, 3, 5, 1, 8, 9, 1, 4, 2, 0, 8, 9, 3, 1, 8, 7, 9]"],"[1, 5, 11, 3, 10, 8, 2, 8, 0, 0, 1, 11, 8, 0]"],[["[6, 7, 2, 2, 6, 3, 7, 9, 1, 1, 7, 8, 4, 4, 3, 4, 3, 0, 8, 5, 3, 2, 7, 2, 4, 0, 4, 3, 8, 3]"],"[0, 12, 0, 6, 1, 0, 2, 0]"]],"type":"(list -> list)","name":"087","solution":"(letII (inc randnat) (λk -> (scanl (λacc act -> (letII acc#2 (λx -> (case (flip 0.8) of True => randnat | False => act#2)))) 0 (take (+ (inc randnat) randnat) #2))))","num_train":4},{"ios":[[["[3, 1, 5, 4, 7, 1, 5, 7, 7, 4, 0, 5, 0, 7, 8, 0, 6, 1, 4, 7, 2, 1, 8, 2, 1, 5, 4, 5, 1, 7]"],"[0, 0, 3, 0, 0, 5, 0, 0, 7, 0, 0, 0]"],[["[4, 3, 9, 9, 8, 1, 2, 7, 0, 5, 5, 5, 3, 0, 8, 5, 3, 1, 0, 5, 7, 5, 2, 3, 3, 3, 8, 0, 4, 3]"],"[0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0]"],[["[6, 7, 5, 5, 6, 7, 2, 6, 7, 0, 3, 5, 2, 7, 1, 3, 0, 9, 1, 2, 5, 3, 0, 3, 4, 7, 0, 4, 6, 4]"],"[0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 15]"],[["[9, 5, 0, 3, 9, 6, 0, 5, 5, 6, 5, 9, 9, 1, 2, 2, 3, 4, 7, 2, 5, 6, 1, 1, 9, 6, 5, 7, 3, 1]"],"[0, 5, 7, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 5, 8, 0, 0, 7, 0, 0, 1, 16, 0, 0, 0, 0, 0]"],[["[0, 9, 5, 6, 8, 8, 3, 6, 0, 1, 6, 5, 0, 9, 4, 8, 6, 9, 2, 9, 7, 4, 5, 8, 7, 2, 6, 7, 3, 9]"],"[2, 0, 0, 0, 0, 0, 10, 13, 0, 0]"],[["[5, 8, 3, 6, 0, 8, 4, 2, 0, 1, 3, 3, 1, 7, 0, 5, 7, 2, 8, 4, 4, 7, 3, 0, 7, 0, 0, 5, 2, 5]"],"[0, 0, 0, 0, 1, 0, 0, 5, 1, 0, 0, 1, 1, 0, 1, 0]"],[["[8, 5, 0, 5, 9, 6, 1, 0, 1, 8, 6, 2, 6, 2, 9, 4, 0, 0, 6, 2, 6, 7, 1, 1, 7, 7, 5, 7, 8, 5]"],"[0, 0, 4, 0, 0, 11, 0, 6, 1, 0, 2, 0, 0, 0, 0, 1]"],[["[4, 2, 6, 8, 6, 4, 8, 6, 4, 0, 3, 9, 5, 9, 2, 6, 1, 4, 0, 5, 5, 3, 1, 2, 6, 7, 7, 9, 3, 9]"],"[1, 5, 0, 0, 0, 0, 2, 0, 3, 9]"]],"type":"(list -> list)","name":"088","solution":"(letII (+ randnat 5) (λk -> (scanl (λacc act -> (- randnat (inc (letII acc#2 (λx -> (inc act#2)))))) 0 (take (+ k#1 k#1) #2))))","num_train":4},{"ios":[[["[9, 8, 8, 6, 7, 9, 2, 7, 8, 4, 3, 7, 3, 6, 6, 6, 0, 8, 2, 5, 3, 3, 0, 8, 1, 9, 2, 1, 0, 0]"],"[6, 4, 4, 3, 2, 3, 7, 1, 1, 16, 1]"],[["[2, 8, 9, 5, 3, 5, 6, 8, 7, 9, 7, 4, 5, 6, 5, 4, 9, 9, 3, 2, 6, 3, 4, 7, 1, 9, 3, 2, 6, 0]"],"[1, 0, 9, 8, 3, 4, 3, 2, 2, 1, 0, 0, 0]"],[["[4, 3, 0, 2, 2, 3, 6, 0, 2, 2, 9, 9, 7, 9, 4, 3, 4, 9, 5, 2, 1, 1, 1, 5, 5, 0, 9, 8, 6, 5]"],"[3, 2, 1, 6, 5, 17, 16, 4, 21, 20, 19, 18, 17, 16, 4, 3, 0, 5, 4, 3]"],[["[7, 8, 9, 4, 8, 9, 1, 5, 4, 8, 1, 3, 9, 4, 6, 4, 2, 1, 7, 8, 7, 1, 8, 4, 4, 6, 3, 1, 3, 4]"],"[4, 6, 0, 0, 4, 3, 3, 2, 12]"],[["[4, 3, 3, 4, 7, 7, 0, 9, 9, 9, 0, 2, 0, 6, 5, 4, 7, 9, 7, 6, 4, 9, 6, 5, 1, 2, 4, 5, 7, 7]"],"[7, 0, 0, 15, 14, 13, 12, 2, 1, 7, 6, 1, 12]"],[["[0, 2, 3, 3, 9, 6, 2, 8, 8, 8, 3, 4, 5, 1, 7, 4, 5, 5, 4, 7, 9, 4, 3, 1, 8, 6, 0, 3, 9, 3]"],"[3, 2, 1, 0, 0, 15, 0, 2, 3, 1, 0, 1, 0]"],[["[5, 8, 2, 2, 7, 9, 1, 3, 2, 3, 7, 6, 7, 4, 3, 0, 0, 6, 3, 1, 7, 3, 2, 6, 3, 2, 7, 5, 2, 4]"],"[6, 9, 8, 5, 4, 17, 16, 15, 2]"],[["[0, 7, 8, 6, 3, 3, 6, 2, 8, 0, 9, 7, 9, 7, 2, 7, 6, 5, 9, 3, 8, 3, 1, 9, 0, 1, 0, 2, 6, 4]"],"[0, 9, 8, 0, 2, 1, 1, 0, 8, 6]"]],"type":"(list -> list)","name":"089","solution":"(letII (case randnat of O => (case 2 of O => randnat | S => (λn -> 8)) | S => (λn -> (+ randnat randnat))) (λk -> (scanl (λacc act -> (letII (+ (case (flip 0.2) of True => act#1 | False => k#3) act#1) (λx -> (case (case (flip 0.5) of True => acc#3 | False => randnat) of O => randnat | S => (λn -> n#1))))) 0 (take (inc (+ randnat 7)) #2))))","num_train":4},{"ios":[[["[8, 9, 6, 2, 5, 8, 2, 3, 7, 5, 1, 8, 8, 9, 4, 3, 7, 9, 8, 0, 9, 0, 9, 6, 6, 6, 9, 2, 4, 9]"],"[8, 1, 5, 0, 5, 3, 0]"],[["[3, 3, 0, 6, 5, 3, 5, 0, 9, 1, 4, 5, 5, 2, 6, 1, 6, 0, 9, 2, 8, 9, 6, 1, 7, 8, 2, 6, 1, 1]"],"[3, 0, 0, 6, 0, 3, 2, 0, 9, 0]"],[["[0, 1, 7, 8, 3, 8, 4, 0, 8, 1, 3, 8, 4, 2, 8, 7, 1, 8, 6, 6, 7, 7, 5, 1, 5, 6, 3, 8, 0, 5]"],"[0, 1, 6, 2, 1, 7, 0, 0, 8, 0, 3]"],[["[5, 0, 1, 8, 2, 6, 0, 2, 7, 7, 9, 8, 2, 7, 3, 6, 9, 6, 8, 6, 8, 3, 5, 2, 3, 3, 4, 2, 6, 3]"],"[5, 0, 1, 7, 0, 6, 0, 2]"],[["[4, 8, 3, 8, 7, 5, 6, 3, 4, 2, 8, 4, 6, 3, 4, 9, 3, 7, 9, 8, 2, 0, 2, 9, 3, 6, 3, 8, 8, 0]"],"[4, 4, 0, 8]"],[["[7, 2, 0, 4, 6, 3, 4, 3, 3, 0, 1, 8, 8, 8, 2, 9, 3, 6, 1, 5, 7, 5, 6, 9, 9, 5, 3, 2, 8, 7]"],"[7, 0, 0, 4, 2, 1, 3, 0, 3, 0]"],[["[2, 9, 2, 2, 1, 9, 4, 9, 1, 6, 5, 8, 8, 4, 4, 4, 8, 2, 5, 9, 8, 7, 8, 0, 4, 8, 9, 8, 1, 8]"],"[2, 7, 0, 2, 0, 9, 0, 9, 0, 6, 0, 8, 0, 4, 0]"],[["[5, 7, 7, 8, 3, 4, 8, 5, 1, 1, 0, 2, 2, 1, 4, 9, 2, 4, 4, 1, 6, 0, 0, 0, 2, 0, 8, 4, 6, 1]"],"[5, 2, 5, 3, 0, 4, 4, 1]"]],"type":"(list -> list)","name":"090","solution":"(letII (inc (letII randnat (λx -> (+ randnat (letII randnat (λx -> (+ x#2 randnat))))))) (λk -> (scanl (λacc act -> (- act#1 acc#2)) 0 (take k#1 #2))))","num_train":4},{"ios":[[["[6, 5, 6, 6, 5, 3, 8, 9, 2, 8, 2, 6, 7, 8, 9, 1, 9, 6, 2, 0, 3, 8, 1, 5, 0, 0, 5, 9, 8, 7]"],"[7, 5, 7, 13, 20]"],[["[0, 5, 7, 0, 8, 2, 9, 4, 0, 5, 2, 2, 8, 5, 9, 6, 6, 2, 9, 1, 3, 0, 3, 6, 1, 5, 9, 7, 2, 2]"],"[0, 10, 13, 14, 14]"],[["[2, 7, 6, 6, 8, 9, 5, 5, 1, 8, 3, 3, 1, 9, 2, 4, 5, 9, 6, 9, 8, 2, 7, 1, 5, 3, 5, 6, 7, 2]"],"[17, 7, 12, 17, 9]"],[["[6, 5, 6, 8, 3, 9, 5, 5, 4, 2, 5, 9, 6, 5, 4, 9, 3, 4, 6, 8, 6, 8, 5, 2, 8, 9, 2, 0, 3, 8]"],"[0, 2, 2, 6, 6]"],[["[5, 0, 5, 0, 2, 5, 5, 8, 6, 9, 0, 5, 9, 5, 0, 3, 4, 2, 6, 9, 9, 0, 2, 1, 7, 8, 8, 4, 7, 2]"],"[1, 4, 6, 6, 7]"],[["[8, 9, 6, 3, 9, 3, 4, 6, 8, 7, 7, 0, 2, 7, 2, 9, 0, 0, 1, 6, 2, 3, 1, 0, 7, 7, 2, 1, 1, 1]"],"[12, 9, 9, 9, 9]"],[["[5, 4, 7, 8, 7, 7, 4, 7, 1, 9, 0, 6, 1, 4, 6, 4, 7, 3, 4, 4, 7, 4, 9, 5, 8, 2, 7, 3, 4, 5]"],"[1, 6, 10, 10, 10]"],[["[5, 2, 4, 4, 9, 1, 7, 7, 7, 4, 3, 9, 5, 1, 2, 5, 5, 1, 5, 8, 9, 4, 2, 5, 9, 2, 1, 8, 3, 7]"],"[8, 13, 13, 13, 18]"]],"type":"(list -> list)","name":"091","solution":"(letII (inc 3) (λk -> (scanl (λacc act -> (+ (case (flip 0.3) of True => act#1 | False => acc#2) (case (flip 0.7) of True => randnat | False => (- randnat randnat)))) 0 (take (inc 4) #2))))","num_train":4},{"ios":[[["[3, 1, 0, 5, 7, 3, 3, 5, 7, 8, 0, 8, 4, 1, 5, 7, 9, 8, 5, 8, 5, 3, 3, 9, 5, 8, 6, 4, 8, 4]"],"[5, 2, 3]"],[["[7, 6, 4, 1, 5, 2, 2, 5, 7, 6, 3, 0, 5, 3, 1, 7, 7, 8, 8, 4, 7, 3, 6, 7, 1, 8, 6, 9, 9, 2]"],"[8, 8, 6]"],[["[3, 5, 5, 8, 6, 6, 8, 1, 9, 8, 4, 2, 0, 3, 9, 3, 1, 3, 5, 5, 3, 0, 0, 9, 3, 9, 2, 9, 2, 8]"],"[9, 7, 6]"],[["[2, 3, 6, 3, 1, 8, 3, 8, 6, 3, 4, 6, 2, 2, 1, 4, 7, 7, 4, 1, 2, 2, 3, 0, 0, 1, 7, 2, 6, 0]"],"[5, 3, 6]"],[["[6, 6, 2, 4, 7, 7, 7, 1, 0, 0, 8, 9, 6, 2, 7, 0, 3, 4, 0, 9, 6, 6, 9, 2, 8, 2, 9, 5, 0, 8]"],"[21, 8, 2]"],[["[7, 1, 8, 1, 5, 4, 8, 1, 6, 4, 6, 2, 4, 2, 5, 5, 2, 3, 6, 3, 5, 1, 4, 2, 2, 6, 2, 2, 8, 1]"],"[9, 14, 12]"],[["[4, 4, 9, 3, 5, 7, 0, 7, 8, 4, 1, 6, 9, 3, 7, 9, 7, 3, 7, 7, 9, 4, 1, 0, 5, 6, 2, 7, 0, 4]"],"[6, 8, 13]"],[["[1, 8, 6, 5, 3, 2, 4, 0, 6, 1, 2, 9, 0, 0, 8, 3, 1, 5, 8, 0, 6, 6, 0, 7, 5, 3, 3, 2, 2, 1]"],"[3, 26, 10]"]],"type":"(list -> list)","name":"092","solution":"(letII (- 9 randnat) (λk -> (scanl (λacc act -> (+ (case randnat of O => randnat | S => (λn -> randnat)) (case acc#2 of O => act#1 | S => (λn -> act#2)))) 0 (take (letII (letII 5 (λx -> (+ x#1 (case (flip 0.1) of True => 4 | False => k#2)))) (λx -> (+ 3 (- 1 randnat)))) #2))))","num_train":4},{"ios":[[["[1, 2, 0, 7, 2, 3, 2, 7, 1, 9, 5, 5, 4, 5, 6, 4, 6, 4, 8, 3, 1, 3, 4, 1, 5, 6, 5, 1, 9, 8]"],"[16, 21, 25, 23]"],[["[7, 6, 3, 5, 4, 4, 4, 4, 7, 2, 2, 8, 2, 7, 2, 3, 8, 2, 5, 7, 9, 2, 8, 7, 7, 4, 3, 5, 3, 7]"],"[8, 15, 16, 17]"],[["[4, 0, 6, 0, 6, 4, 1, 2, 0, 2, 6, 4, 7, 2, 9, 8, 8, 1, 4, 4, 6, 8, 4, 9, 9, 1, 5, 4, 3, 9]"],"[20, 24, 18, 36]"],[["[9, 5, 0, 5, 5, 8, 8, 3, 0, 6, 3, 9, 5, 9, 6, 0, 7, 2, 1, 7, 2, 3, 1, 1, 4, 6, 4, 2, 6, 8]"],"[5, 5, 7, 6]"],[["[7, 3, 8, 6, 5, 3, 7, 6, 2, 0, 6, 7, 7, 4, 8, 0, 7, 1, 7, 5, 4, 1, 8, 6, 4, 0, 3, 1, 9, 7]"],"[9, 6, 7, 8]"],[["[0, 6, 1, 2, 2, 5, 1, 4, 3, 9, 8, 4, 5, 9, 0, 7, 7, 2, 4, 0, 2, 8, 4, 5, 5, 0, 9, 4, 7, 7]"],"[2, 0, 13, 14]"],[["[4, 6, 4, 9, 2, 4, 0, 9, 1, 5, 5, 2, 6, 6, 8, 5, 2, 4, 4, 1, 7, 4, 8, 7, 0, 2, 9, 8, 5, 5]"],"[4, 7, 0, 1]"],[["[0, 2, 6, 0, 1, 0, 2, 5, 6, 7, 1, 9, 5, 0, 1, 9, 9, 7, 8, 3, 0, 9, 0, 2, 4, 0, 4, 7, 1, 4]"],"[3, 16, 10, 11]"]],"type":"(list -> list)","name":"093","solution":"(letII (letII randnat (λx -> (- (- x#1 randnat) (case randnat of O => (case (flip 0.8) of True => 9 | False => x#1) | S => (λn -> randnat))))) (λk -> (scanl (λacc act -> (letII randnat (λx -> (+ (- acc#3 (+ randnat act#2)) (+ randnat randnat))))) 0 (take (inc 3) #2))))","num_train":4},{"ios":[[["[7, 2, 0, 3, 6, 9, 7, 6, 6, 7, 0, 9, 0, 7, 2, 4, 4, 2, 0, 3, 2, 2, 4, 7, 1, 2, 1, 7, 3, 7]"],"[1, 7]"],[["[4, 6, 1, 0, 8, 4, 2, 4, 5, 7, 2, 2, 6, 5, 2, 5, 0, 6, 3, 6, 4, 4, 6, 2, 7, 3, 6, 4, 5, 0]"],"[1, 8]"],[["[3, 9, 0, 3, 9, 5, 2, 1, 6, 5, 0, 6, 1, 5, 5, 7, 9, 7, 3, 6, 9, 1, 3, 0, 2, 9, 6, 4, 8, 8]"],"[7, 4, 5, 6, 2, 1, 2, 1, 2, 11, 0, 0, 20, 1, 3, 4, 13, 6, 0, 1, 4, 0, 1, 2]"],[["[4, 8, 9, 9, 8, 7, 0, 6, 3, 0, 3, 2, 2, 1, 7, 1, 7, 2, 3, 0, 8, 3, 4, 3, 9, 9, 1, 9, 0, 1]"],"[1, 2, 1, 1, 2, 8, 0, 1, 3, 10, 11, 10, 9, 0, 0, 1, 2, 3, 4, 5, 13, 0]"],[["[5, 3, 1, 5, 1, 2, 8, 4, 1, 0, 1, 4, 6, 4, 3, 0, 5, 6, 4, 2, 5, 9, 2, 4, 4, 9, 1, 9, 7, 7]"],"[1, 2, 1, 2, 2, 7, 8, 7, 5, 4, 2, 3, 4, 5, 6, 3, 4, 1, 2, 3, 3, 4]"],[["[5, 3, 6, 3, 1, 8, 4, 9, 0, 9, 1, 6, 7, 7, 4, 0, 0, 7, 0, 2, 8, 9, 5, 9, 4, 2, 5, 7, 4, 7]"],"[10, 11, 12, 3, 0, 3, 2, 3, 12, 6, 2, 2, 2, 3]"],[["[1, 3, 3, 7, 5, 1, 9, 0, 2, 3, 1, 8, 9, 2, 0, 9, 6, 9, 5, 7, 9, 3, 5, 8, 2, 7, 8, 4, 0, 5]"],"[3, 4, 4, 2, 3, 6, 7, 1, 2, 2, 1, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 0, 1, 2, 10, 11, 12, 13, 12, 13]"],[["[6, 7, 8, 8, 8, 0, 1, 8, 6, 9, 3, 4, 3, 3, 4, 3, 1, 6, 5, 8, 1, 1, 6, 3, 4, 2, 1, 5, 4, 3]"],"[1, 12]"]],"type":"(list -> list)","name":"094","solution":"(letII (letII randnat (λx -> (+ randnat x#1))) (λk -> (scanl (λacc act -> (case (flip 0.6) of True => randnat | False => (letII act#1 (λx -> (inc acc#3))))) 0 (take (+ k#1 k#1) #2))))","num_train":4},{"ios":[[["[9, 0, 8, 2, 5, 6, 2, 9, 8, 8, 6, 8, 3, 4, 9, 2, 5, 1, 3, 2, 1, 0, 9, 0, 2, 9, 9, 0, 5, 6]"],"[0, 0, 8, 2, 5, 3]"],[["[1, 3, 1, 8, 2, 4, 0, 4, 5, 1, 7, 3, 1, 1, 4, 3, 9, 2, 9, 9, 7, 6, 6, 8, 5, 4, 7, 2, 5, 8]"],"[1, 3, 1, 8, 0, 4]"],[["[9, 2, 4, 9, 1, 8, 2, 6, 9, 3, 4, 4, 2, 5, 9, 6, 5, 9, 5, 3, 7, 3, 7, 5, 7, 4, 1, 3, 3, 9]"],"[3, 0, 0, 9, 0, 8]"],[["[2, 1, 1, 4, 4, 6, 7, 8, 7, 7, 5, 7, 8, 9, 3, 3, 8, 7, 4, 0, 5, 5, 3, 6, 7, 6, 7, 4, 5, 6]"],"[0, 0, 0, 0, 4, 3]"],[["[2, 0, 1, 8, 5, 8, 4, 0, 6, 9, 4, 9, 8, 0, 4, 3, 9, 0, 1, 0, 9, 2, 8, 3, 1, 8, 6, 0, 2, 1]"],"[1, 0, 0, 5, 0, 0]"],[["[1, 9, 6, 6, 9, 9, 7, 6, 4, 1, 4, 4, 2, 5, 0, 8, 4, 2, 0, 4, 9, 7, 9, 3, 0, 0, 8, 0, 7, 5]"],"[0, 3, 0, 0, 9, 9]"],[["[7, 2, 7, 9, 7, 7, 0, 8, 8, 2, 9, 5, 1, 6, 8, 7, 9, 6, 3, 2, 3, 2, 7, 2, 2, 2, 8, 6, 7, 7]"],"[7, 2, 6, 2, 7, 0]"],[["[1, 0, 4, 4, 8, 5, 0, 1, 1, 6, 9, 6, 0, 5, 6, 6, 1, 9, 9, 7, 3, 2, 3, 8, 5, 7, 7, 2, 8, 8]"],"[0, 0, 0, 0, 5, 5]"]],"type":"(list -> list)","name":"095","solution":"(letII (inc (letII randnat (λx -> (+ (inc x#1) randnat)))) (λk -> (scanl (λacc act -> (- (case k#3 of O => acc#2 | S => (λn -> act#2)) (- randnat (- randnat randnat)))) 0 (take 6 #2))))","num_train":4},{"ios":[[["[2, 6, 9, 7, 6, 8, 3, 1, 6, 5, 5, 4, 9, 9, 5, 6, 3, 7, 6, 9, 9, 7, 7, 1, 0, 8, 0, 3, 3, 4]"],"[3, 8, 14, 14, 14]"],[["[0, 9, 4, 8, 8, 1, 9, 0, 1, 0, 1, 7, 4, 2, 8, 5, 8, 2, 6, 0, 4, 6, 7, 0, 9, 7, 1, 1, 0, 0]"],"[2, 3]"],[["[2, 0, 1, 4, 5, 8, 2, 7, 0, 1, 8, 3, 2, 3, 3, 7, 6, 4, 9, 3, 8, 5, 8, 1, 3, 6, 6, 6, 2, 3]"],"[4, 5, 21, 22, 25]"],[["[3, 6, 0, 0, 7, 7, 2, 1, 5, 1, 4, 4, 6, 4, 1, 9, 4, 0, 5, 2, 2, 7, 2, 6, 8, 7, 9, 8, 4, 2]"],"[0, 11]"],[["[7, 8, 0, 2, 5, 2, 6, 2, 9, 3, 5, 2, 7, 6, 6, 4, 2, 6, 1, 3, 8, 2, 0, 9, 5, 5, 5, 1, 6, 7]"],"[2, 3, 7]"],[["[1, 6, 1, 2, 8, 3, 3, 9, 4, 4, 0, 3, 7, 1, 1, 4, 5, 9, 4, 3, 6, 3, 3, 3, 1, 4, 9, 7, 2, 8]"],"[2, 7, 13, 14]"],[["[0, 9, 4, 0, 4, 0, 4, 5, 0, 1, 0, 9, 5, 3, 9, 8, 6, 2, 2, 3, 6, 4, 1, 7, 9, 5, 8, 8, 0, 3]"],"[3, 5, 41, 42, 48, 48]"],[["[7, 6, 9, 7, 1, 5, 8, 0, 9, 7, 5, 9, 4, 1, 9, 0, 0, 2, 3, 3, 7, 1, 1, 1, 7, 2, 8, 1, 9, 8]"],"[7, 10]"]],"type":"(list -> list)","name":"096","solution":"(letII (case randnat of O => 1 | S => (λn -> (- randnat randnat))) (λk -> (scanl (λacc act -> (letII (- act#1 randnat) (λx -> (+ acc#3 randnat)))) 0 (take (inc randnat) #2))))","num_train":4},{"ios":[[["[2, 7, 3, 9, 9, 4, 0, 2, 0, 7, 3, 2, 0, 9, 1, 8, 8, 6, 7, 0, 7, 7, 6, 7, 5, 9, 1, 5, 2, 8]"],"[12, 4, 4, 0]"],[["[6, 2, 0, 4, 1, 7, 6, 2, 6, 5, 7, 3, 2, 5, 2, 5, 4, 7, 0, 6, 4, 2, 9, 7, 0, 6, 8, 9, 1, 0]"],"[7, 3, 2, 0, 12]"],[["[0, 2, 1, 4, 9, 3, 3, 0, 6, 4, 9, 8, 7, 5, 1, 2, 5, 8, 5, 6, 5, 7, 2, 5, 4, 1, 9, 4, 1, 4]"],"[6, 10, 8, 2, 2, 5, 4]"],[["[2, 7, 5, 0, 3, 8, 1, 3, 6, 4, 4, 8, 9, 7, 4, 8, 1, 7, 1, 9, 6, 1, 9, 2, 9, 9, 3, 8, 5, 0]"],"[5, 0, 0, 0, 4, 2, 5, 3, 2, 3, 4, 5, 16, 2]"],[["[2, 2, 5, 0, 8, 5, 7, 3, 3, 1, 6, 3, 3, 3, 8, 3, 8, 6, 3, 9, 2, 1, 1, 1, 9, 5, 1, 7, 8, 1]"],"[7, 5, 4, 1, 8, 2, 4, 0, 2, 3, 8, 6]"],[["[2, 4, 9, 3, 2, 3, 7, 0, 0, 9, 8, 4, 4, 9, 7, 6, 8, 1, 8, 5, 2, 3, 6, 6, 8, 1, 2, 4, 5, 8]"],"[30, 1, 1]"],[["[8, 7, 4, 9, 2, 5, 8, 0, 4, 8, 3, 6, 1, 9, 5, 2, 7, 9, 2, 2, 6, 7, 9, 0, 3, 5, 1, 9, 5, 1]"],"[1, 1, 1, 3, 5, 1, 5, 6]"],[["[8, 8, 1, 7, 2, 6, 1, 9, 2, 4, 3, 7, 9, 7, 1, 0, 0, 2, 3, 8, 2, 6, 7, 7, 2, 6, 5, 9, 8, 6]"],"[2, 4, 29, 0, 5, 1, 0, 1, 12, 1]"]],"type":"(list -> list)","name":"097","solution":"(letII (letII randnat (λx -> (case (flip 0.2) of True => (inc (inc (inc (letII x#1 (λx -> (+ 3 randnat)))))) | False => (letII x#1 (λx -> (+ randnat x#1)))))) (λk -> (scanl (λacc act -> (case (inc act#1) of O => acc#2 | S => (λn -> randnat))) 0 (take (case (flip 0.3) of True => k#1 | False => k#1) #2))))","num_train":4},{"ios":[[["[0, 3, 5, 2, 5, 0, 7, 5, 0, 6, 7, 2, 0, 5, 0, 3, 7, 7, 2, 0, 8, 7, 2, 8, 1, 7, 8, 7, 7, 5]"],"[0, 2, 6, 6, 28, 1, 1, 0]"],[["[5, 2, 2, 2, 5, 6, 7, 4, 7, 7, 3, 5, 1, 9, 9, 8, 8, 8, 2, 1, 6, 7, 5, 8, 0, 0, 6, 6, 6, 2]"],"[3, 1, 0, 1]"],[["[1, 0, 1, 8, 3, 1, 7, 6, 8, 4, 7, 0, 4, 0, 6, 1, 4, 6, 4, 2, 9, 2, 6, 2, 7, 4, 7, 0, 5, 0]"],"[0, 2, 0, 0, 0, 2, 20, 0]"],[["[3, 6, 0, 3, 0, 3, 2, 4, 5, 1, 5, 3, 0, 6, 7, 9, 9, 7, 2, 7, 1, 6, 5, 5, 0, 2, 5, 6, 3, 3]"],"[14, 2, 3]"],[["[7, 3, 4, 3, 9, 3, 0, 9, 1, 1, 0, 5, 5, 2, 0, 6, 4, 7, 0, 8, 3, 1, 5, 8, 0, 9, 4, 1, 4, 1]"],"[4, 2, 18, 0, 1, 6, 4, 1, 0, 11, 8, 1]"],[["[2, 6, 1, 8, 7, 4, 0, 6, 5, 7, 9, 6, 4, 0, 5, 4, 3, 1, 6, 8, 7, 0, 9, 4, 9, 8, 7, 5, 8, 4]"],"[0, 2, 0, 1, 3, 8, 8, 8, 0, 3, 6]"],[["[2, 1, 7, 5, 6, 7, 3, 7, 9, 5, 0, 4, 7, 3, 9, 5, 3, 5, 8, 1, 8, 8, 6, 7, 5, 9, 5, 8, 9, 0]"],"[3, 5, 0, 13, 0, 8, 7, 0, 0, 5]"],[["[7, 5, 7, 1, 1, 4, 5, 5, 7, 2, 9, 6, 9, 1, 3, 7, 8, 4, 9, 2, 9, 1, 8, 5, 2, 8, 1, 4, 6, 6]"],"[3, 1, 1, 0, 3, 3, 2, 7, 2, 0]"]],"type":"(list -> list)","name":"098","solution":"(letII (case randnat of O => randnat | S => (λn -> (+ 7 n#1))) (λk -> (scanl (λacc act -> (case 8 of O => act#1 | S => (λn -> (case (iseven randnat) of True => randnat | False => (letII randnat (λx -> (case (flip 0.1) of True => acc#4 | False => randnat))))))) 0 (take (case (flip 0.2) of True => 5 | False => k#1) #2))))","num_train":4},{"ios":[[["[8, 3, 0, 6, 4, 4, 8, 0, 7, 0, 4, 4, 7, 2, 4, 8, 1, 2, 7, 1, 4, 1, 0, 7, 0, 2, 1, 7, 6, 7]"],"[1, 3, 0, 1, 9]"],[["[8, 5, 2, 3, 2, 0, 9, 7, 9, 3, 4, 0, 0, 6, 7, 4, 2, 4, 7, 0, 6, 3, 2, 3, 1, 1, 7, 5, 7, 4]"],"[2, 9, 9, 3, 2, 0]"],[["[8, 3, 7, 2, 0, 2, 9, 7, 0, 3, 1, 0, 8, 9, 5, 5, 4, 5, 3, 7, 1, 2, 4, 0, 2, 0, 5, 6, 4, 9]"],"[9, 9, 7, 9, 9]"],[["[0, 6, 2, 2, 2, 9, 6, 8, 0, 3, 7, 5, 2, 7, 3, 8, 7, 0, 4, 1, 8, 5, 4, 8, 7, 7, 9, 9, 7, 3]"],"[0, 4, 14, 2]"],[["[7, 8, 8, 3, 8, 6, 4, 2, 6, 1, 1, 0, 6, 3, 5, 4, 7, 5, 6, 9, 5, 2, 1, 7, 9, 4, 3, 5, 0, 6]"],"[13, 9, 9, 3, 8, 6]"],[["[0, 1, 2, 6, 2, 9, 8, 9, 3, 8, 8, 8, 5, 1, 1, 0, 1, 9, 9, 9, 2, 3, 5, 6, 6, 0, 9, 8, 4, 3]"],"[8, 0, 18, 6, 2, 9]"],[["[5, 7, 6, 3, 3, 9, 3, 3, 8, 8, 8, 8, 5, 7, 5, 3, 6, 6, 5, 2, 7, 2, 9, 6, 4, 2, 4, 1, 9, 8]"],"[9, 2, 9, 9, 9, 9, 3, 9, 8, 1]"],[["[5, 8, 0, 1, 2, 7, 4, 5, 6, 1, 2, 6, 6, 7, 9, 5, 7, 6, 2, 8, 6, 0, 0, 4, 4, 1, 5, 8, 7, 7]"],"[9, 9, 9, 1, 2]"]],"type":"(list -> list)","name":"099","solution":"(letII (case 3 of O => 3 | S => (λn -> n#1)) (λk -> (scanl (λacc act -> (case (letII randnat (λx -> (- randnat acc#3))) of O => (case (flip 0.5) of True => 9 | False => act#1) | S => (λn -> randnat))) 0 (take (inc (+ (inc k#1) (case randnat of O => k#1 | S => (λn -> n#1)))) #2))))","num_train":4}],"task_info":[{"q_expr":-30.320128514178847,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":4},{"q_expr":-33.610748243905896,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":5},{"q_expr":-57.34492802462692,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-51.13733996396778,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-51.88625409486344,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-43.421297800782746,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":7},{"q_expr":-73.287399640239,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-57.82175007151691,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-72.60359331314021,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-30.320128514178847,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":5},{"q_expr":-64.7929504525432,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-52.00875451188739,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-46.32199104240079,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-48.06447946262206,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-71.45197322435845,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-53.71910670648011,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-42.71880976676165,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-61.25238897834722,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-43.58274778309163,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-62.81006276143294,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-34.50308573475755,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-64.80272964052831,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-62.09011738771827,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-39.41132128353685,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-67.11005910181247,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-35.52473698228953,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-66.77372900001292,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-71.75445000095384,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-26.976500984338166,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":3},{"q_expr":-21.949117832940694,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":4},{"q_expr":-70.36477583850564,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-32.43209324756424,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-35.94410499556669,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-81.05760747239276,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-55.115030003913304,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-40.33722401674053,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":7},{"q_expr":-97.47328527998452,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-62.64846252745223,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-57.10168380160571,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-66.65419443131773,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-39.652375638995274,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":7},{"q_expr":-43.52638716857221,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":5},{"q_expr":-72.58135717169331,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-35.47534503708621,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":5},{"q_expr":-50.2112700441085,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-49.181319993761825,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-63.55052783784206,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-50.19167723467505,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-23.209180103917674,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":4},{"q_expr":-54.19916067157936,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-38.76003814814361,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-32.11496964994431,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":5},{"q_expr":-49.15600218577754,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-31.914298954482156,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":5},{"q_expr":-57.60480428674071,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-25.350315214602844,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":4},{"q_expr":-62.55626844764851,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-57.888040125693294,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-71.78047729133047,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-48.35364192024428,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-33.283845458300824,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-50.49610716442806,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-58.69897034190962,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-75.64548053570037,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-19.241067631838476,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":3},{"q_expr":-45.64099523397103,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-43.73577806638925,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":7},{"q_expr":-71.312880279693,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-40.34860448609263,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-39.48988360603995,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":5},{"q_expr":-49.20364259794205,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-66.60130752740062,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-35.0079847398539,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":7},{"q_expr":-55.03926126509547,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-61.87005550294146,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-60.30840825434372,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-55.53855616783752,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-26.391357651449482,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":4},{"q_expr":-55.69555991664718,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-30.518225405377144,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-24.730276505863543,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":5},{"q_expr":-59.245900578828284,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-62.478563490656846,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-39.165825772567125,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":5},{"q_expr":-64.46269485253234,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-57.43875781926081,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-14.168738768736885,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":2},{"q_expr":-25.54120672207987,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":5},{"q_expr":-30.575795257198614,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-69.85807393192351,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-27.077536162693328,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":5},{"q_expr":-41.725119659227396,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":7},{"q_expr":-70.60182229498884,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9},{"q_expr":-63.22955167090664,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-29.131659896388875,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":5},{"q_expr":-43.74150306494009,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-32.24829130559985,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":6},{"q_expr":-61.83468735910367,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":10},{"q_expr":-58.77726151654435,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":8},{"q_expr":-55.47312584772532,"p_inputs":[-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137,-69.07755278982137],"size":9}],"path":"out/fuzz-datasets/2024-11-13/14-37-19/dataset.json"}