{"task_dist":{"input_dist":"(Unit)","input_type":"unit","grammar":"PCFG:\n  ?lets -> (letII ?int (λk -> (scanlunit (λacc x -> ?int) 0 ?int))) [1.0]\n  ?int -> randnat [0.4] | #int [0.3-0.0] | 0 [0.008-0.04] | 1 [0.008-0.04] | 2 [0.008-0.04] | 3 [0.008-0.04] | 4 [0.008-0.04] | 5 [0.008-0.04] | 6 [0.008-0.04] | 7 [0.008-0.04] | 8 [0.008-0.04] | 9 [0.008-0.04] | (letII ?int (λx -> (inc ?int))) [0.01] | (letII ?int (λx -> (+ ?int ?int))) [0.01] | (letII ?int (λx -> (- ?int ?int))) [0.01] | (letII ?int (λx -> (case ?int of O => ?int | S => (λn -> ?int)))) [0.01] | (letII ?int (λx -> (case ?bool of True => ?int | False => ?int))) [0.01] | (inc ?int) [0.04] | (+ ?int ?int) [0.04] | (- ?int ?int) [0.04] | (case ?int of O => ?int | S => (λn -> ?int)) [0.04] | (case ?bool of True => ?int | False => ?int) [0.04]\n  ?bool -> #bool [0.08-0.0] | (flip 0.1) [0.08-0.09] | (flip 0.2) [0.08-0.09] | (flip 0.3) [0.08-0.09] | (flip 0.4) [0.08-0.09] | (flip 0.5) [0.08-0.09] | (flip 0.6) [0.08-0.09] | (flip 0.7) [0.08-0.09] | (flip 0.8) [0.08-0.09] | (flip 0.9) [0.08-0.09] | (iseven ?int) [0.07] | (== ?int ?int) [0.07] | (> ?int ?int) [0.07]\n","output_type":"list"},"tasks":[{"ios":[[["nothing"],"[1, 6, 12, 3, 8, 13, 4, 1, 1, 0, 10, 21, 4]"],[["nothing"],"[0, 2, 1, 2, 1, 0, 7, 1, 2]"],[["nothing"],"[4, 1, 2, 5, 0, 0, 1, 1, 0, 3, 8, 13, 2, 1, 1, 1, 2, 2, 15, 2, 0, 4]"],[["nothing"],"[0, 4, 0, 8, 5, 8, 5, 1, 21, 5]"],[["nothing"],"[0, 1, 3, 0, 12, 0, 13, 12, 5, 6, 1, 0, 6, 5, 0, 3, 1]"],[["nothing"],"[4, 4, 0, 0, 0, 18, 0, 1, 10, 2, 2]"],[["nothing"],"[1, 0, 2, 0, 7]"],[["nothing"],"[5, 13, 13, 4, 1, 0, 2, 2, 1, 1, 1, 2, 1, 8, 4, 1, 0, 0, 0, 3, 8, 4, 4, 12, 7, 1]"]],"type":"(unit -> list)","name":"000","solution":"(letII (letII 3 (λx -> (+ randnat (+ x#1 randnat)))) (λk -> (scanlunit (λacc x -> (case (== 8 acc#2) of True => k#3 | False => randnat)) 0 (letII (case k#1 of O => k#1 | S => (λn -> randnat)) (λx -> (+ (+ x#1 randnat) (case randnat of O => randnat | S => (λn -> randnat))))))))","num_train":4},{"ios":[[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8, 9]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"],[["nothing"],"[1, 2, 3, 4, 5]"],[["nothing"],"[1, 2, 3, 4, 5, 6]"],[["nothing"],"[1, 2, 3, 4, 5]"],[["nothing"],"[1, 2, 3, 4, 5, 6]"],[["nothing"],"[1, 2, 3, 4, 5]"]],"type":"(unit -> list)","name":"001","solution":"(letII (case (flip 0.5) of True => randnat | False => 4) (λk -> (scanlunit (λacc x -> (inc acc#2)) 0 (+ k#1 randnat))))","num_train":4},{"ios":[[["nothing"],"[2, 3]"],[["nothing"],"[3, 1]"],[["nothing"],"[13, 1]"],[["nothing"],"[1, 2]"],[["nothing"],"[0, 10]"],[["nothing"],"[0, 13]"],[["nothing"],"[3, 14]"],[["nothing"],"[1, 18]"]],"type":"(unit -> list)","name":"002","solution":"(letII (- (+ randnat randnat) randnat) (λk -> (scanlunit (λacc x -> (case randnat of O => (inc acc#2) | S => (λn -> randnat))) 0 (case (== randnat k#1) of True => (- (inc k#1) randnat) | False => 2))))","num_train":4},{"ios":[[["nothing"],"[2, 2, 6, 14, 18, 21, 21]"],[["nothing"],"[13, 14]"],[["nothing"],"[8, 9, 13, 17, 26, 26, 29]"],[["nothing"],"[0, 1, 4, 9, 9, 11, 16]"],[["nothing"],"[3, 11, 25, 29, 30, 34, 36]"],[["nothing"],"[2, 3, 5, 9, 11, 18, 23]"],[["nothing"],"[4, 6]"],[["nothing"],"[1, 10, 13, 26, 28, 30, 31]"]],"type":"(unit -> list)","name":"003","solution":"(letII 6 (λk -> (scanlunit (λacc x -> (+ randnat acc#2)) 0 (case (flip 0.8) of True => (inc k#1) | False => 2))))","num_train":4},{"ios":[[["nothing"],"[4, 8, 7]"],[["nothing"],"[4, 9, 5, 2, 2]"],[["nothing"],"[4, 13, 0, 4, 0, 4, 4, 3]"],[["nothing"],"[4, 12, 3, 2, 0, 4, 2, 2, 1]"],[["nothing"],"[4, 11, 1, 0, 4, 0]"],[["nothing"],"[4, 0, 4, 2]"],[["nothing"],"[4, 0, 4, 1, 1, 3, 2, 2, 2, 6, 3, 2, 4, 7, 11, 1, 4, 0, 4]"],[["nothing"],"[4, 2, 5, 2, 23, 0, 4, 7, 0, 4, 1, 15]"]],"type":"(unit -> list)","name":"004","solution":"(letII (letII (case (flip 0.7) of True => randnat | False => randnat) (λx -> (case (> randnat x#1) of True => randnat | False => (case (flip 0.9) of True => x#1 | False => x#1)))) (λk -> (scanlunit (λacc x -> (case acc#2 of O => 4 | S => (λn -> randnat))) 0 (case randnat of O => (letII k#1 (λx -> (case (flip 0.8) of True => x#1 | False => randnat))) | S => (λn -> (inc (inc randnat)))))))","num_train":4},{"ios":[[["nothing"],"[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]"],[["nothing"],"[2, 4, 6]"],[["nothing"],"[2, 4]"],[["nothing"],"[2, 4, 6, 8]"],[["nothing"],"[2, 4, 6, 8]"],[["nothing"],"[2, 4, 6, 8, 10]"],[["nothing"],"[2, 4, 6, 8, 10, 12]"],[["nothing"],"[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]"]],"type":"(unit -> list)","name":"005","solution":"(letII (letII (letII 3 (λx -> (+ randnat x#1))) (λx -> (- (case (flip 0.8) of True => randnat | False => randnat) (inc randnat)))) (λk -> (scanlunit (λacc x -> (inc (inc acc#2))) 0 (letII 3 (λx -> (inc (case (flip 0.2) of True => randnat | False => randnat)))))))","num_train":4},{"ios":[[["nothing"],"[2, 0, 2, 2, 0, 0, 9, 5, 8, 0, 2, 0, 6, 0, 4, 3, 7, 0, 4, 0, 2]"],[["nothing"],"[11, 0, 7, 0, 4, 8, 12, 0, 0, 14, 0, 3, 0, 0, 0, 0, 3, 6, 0, 2, 0, 0, 0, 1, 0, 0, 9, 0, 2, 0, 8]"],[["nothing"],"[13, 0, 2, 0, 10, 0, 1, 2, 10, 0]"],[["nothing"],"[3, 0, 1, 8, 0, 17, 0, 1, 4, 0, 4, 0, 0]"],[["nothing"],"[12, 0, 0, 3, 3, 0, 2, 5, 0, 3]"],[["nothing"],"[1, 6, 0, 3, 2, 9, 0, 0, 6, 0, 1, 0, 2, 0]"],[["nothing"],"[4, 0, 0, 1, 1, 1, 1, 4, 3]"],[["nothing"],"[3, 0, 2, 0, 2, 11, 0, 1, 2]"]],"type":"(unit -> list)","name":"006","solution":"(letII (+ 5 (case (flip 0.8) of True => randnat | False => (case (flip 0.7) of True => randnat | False => randnat))) (λk -> (scanlunit (λacc x -> (letII 6 (λx -> (- randnat acc#3)))) 0 (letII (case (flip 0.2) of True => randnat | False => 9) (λx -> (+ (case (== randnat randnat) of True => randnat | False => k#2) (inc 3)))))))","num_train":4},{"ios":[[["nothing"],"[4, 6]"],[["nothing"],"[5, 7, 8, 9]"],[["nothing"],"[3, 34, 34]"],[["nothing"],"[3, 4, 4, 8, 8, 9, 12]"],[["nothing"],"[1, 1, 1, 2, 4, 8, 13]"],[["nothing"],"[6, 7, 14, 17, 20, 21, 21, 22]"],[["nothing"],"[0, 13, 14, 15, 16, 19, 19]"],[["nothing"],"[5, 6, 7, 8, 12, 16, 35]"]],"type":"(unit -> list)","name":"007","solution":"(letII 5 (λk -> (scanlunit (λacc x -> (+ acc#2 randnat)) 0 (case (flip 0.8) of True => (inc randnat) | False => 7))))","num_train":4},{"ios":[[["nothing"],"[1, 2, 3, 4, 5, 6, 7]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7]"]],"type":"(unit -> list)","name":"008","solution":"(letII (case 9 of O => 4 | S => (λn -> randnat)) (λk -> (scanlunit (λacc x -> (inc (case (flip 0.1) of True => acc#2 | False => acc#2))) 0 7)))","num_train":4},{"ios":[[["nothing"],"[1, 3, 7, 4, 1, 1, 1]"],[["nothing"],"[3, 1, 1, 2, 1, 13, 10]"],[["nothing"],"[1, 12, 2, 3, 0, 2, 6]"],[["nothing"],"[1, 2, 0, 0, 12, 3, 2]"],[["nothing"],"[11, 3, 3, 5, 0, 0, 0]"],[["nothing"],"[0, 4, 1, 2, 3, 0, 0]"],[["nothing"],"[5, 6, 0, 0, 1, 1, 7]"],[["nothing"],"[2, 6, 0, 0, 9, 11, 9]"]],"type":"(unit -> list)","name":"009","solution":"(letII (letII 5 (λx -> (inc x#1))) (λk -> (scanlunit (λacc x -> (case (- randnat acc#2) of O => randnat | S => (λn -> (case k#4 of O => 6 | S => (λn -> (case (flip 0.1) of True => randnat | False => n#2)))))) 0 (inc k#1))))","num_train":4},{"ios":[[["nothing"],"[2, 4, 6, 8, 10, 12, 14]"],[["nothing"],"[2, 4, 6, 8, 10, 12, 14]"],[["nothing"],"[2, 4, 6, 8]"],[["nothing"],"[2, 4, 6, 8, 10, 12, 14]"],[["nothing"],"[2, 4]"],[["nothing"],"[2, 4, 6, 8, 10, 12, 14]"],[["nothing"],"[2, 4, 6, 8, 10, 12, 14]"],[["nothing"],"[2, 4, 6, 8, 10, 12, 14]"]],"type":"(unit -> list)","name":"010","solution":"(letII (letII randnat (λx -> (case randnat of O => 3 | S => (λn -> x#2)))) (λk -> (scanlunit (λacc x -> (inc (inc (case (flip 0.2) of True => acc#2 | False => (letII acc#2 (λx -> (case (flip 0.6) of True => acc#3 | False => acc#3))))))) 0 (letII randnat (λx -> (inc (inc (letII 5 (λx -> (case (iseven k#3) of True => randnat | False => x#1))))))))))","num_train":4},{"ios":[[["nothing"],"[1, 0, 1, 2, 3, 4, 5, 6, 7]"],[["nothing"],"[0, 0, 1, 2, 3, 4]"],[["nothing"],"[1, 2, 3, 4]"],[["nothing"],"[0, 1, 2]"],[["nothing"],"[1, 2, 3, 0]"],[["nothing"],"[1, 2, 3, 0, 0, 1, 0, 1, 2, 1, 0, 1, 2, 0, 1]"],[["nothing"],"[1, 2, 3, 3, 3, 3, 4, 0, 1, 0, 1, 2]"],[["nothing"],"[1, 2, 3]"]],"type":"(unit -> list)","name":"011","solution":"(letII (case (flip 0.8) of True => randnat | False => 6) (λk -> (scanlunit (λacc x -> (- (inc acc#2) (letII k#3 (λx -> (- (- randnat randnat) (- randnat acc#3)))))) 0 (+ randnat randnat))))","num_train":4},{"ios":[[["nothing"],"[29, 15, 20, 17, 20, 14, 14, 20, 18, 25, 17, 34, 31, 30, 19, 13, 19, 12, 25, 23]"],[["nothing"],"[25, 23, 24, 21, 17, 21, 12, 12, 13, 21, 22, 19, 14, 12, 16, 24, 24, 14, 17, 15]"],[["nothing"],"[19, 11, 16, 25, 17, 26, 15, 15, 19, 20, 18, 13, 20, 26, 16, 18, 15, 30, 18, 17]"],[["nothing"],"[40, 15, 11, 36, 11, 24, 23, 16, 19, 12, 30, 17, 12, 15, 14, 18, 24, 13, 12, 18]"],[["nothing"],"[13, 11, 17, 15, 19, 19, 14, 18, 15, 17, 13, 19, 11, 26, 46, 17, 23, 15, 30, 17]"],[["nothing"],"[21, 22, 21, 28, 46, 18, 26, 15, 13, 24, 18, 19, 14, 20, 13, 11, 30, 15, 16, 13]"],[["nothing"],"[20, 25, 22, 13, 12, 12, 18, 14, 13, 19, 17, 22, 14, 23, 16, 13, 21, 11, 21, 22]"],[["nothing"],"[23, 28, 20, 21, 12, 26, 15, 20, 21, 19, 13, 12, 19, 34, 18, 16, 16, 32, 34, 15]"]],"type":"(unit -> list)","name":"012","solution":"(letII (inc 9) (λk -> (scanlunit (λacc x -> (+ (letII (case (flip 0.3) of True => randnat | False => (letII acc#2 (λx -> (inc randnat)))) (λx -> (inc (case randnat of O => randnat | S => (λn -> randnat))))) (letII randnat (λx -> (+ randnat k#4))))) 0 (+ (case k#1 of O => randnat | S => (λn -> k#2)) k#1))))","num_train":4},{"ios":[[["nothing"],"[3, 5, 5, 9]"],[["nothing"],"[0, 1, 5, 3]"],[["nothing"],"[0, 4, 3, 0]"],[["nothing"],"[0, 0, 1, 4]"],[["nothing"],"[0, 0, 22, 1]"],[["nothing"],"[2, 1, 2, 3]"],[["nothing"],"[3, 3, 1, 2]"],[["nothing"],"[7, 1, 1, 0]"]],"type":"(unit -> list)","name":"013","solution":"(letII 5 (λk -> (scanlunit (λacc x -> (case (flip 0.9) of True => randnat | False => acc#2)) 0 (case k#1 of O => k#1 | S => (λn -> n#1)))))","num_train":4},{"ios":[[["nothing"],"[0, 2, 2, 23, 2]"],[["nothing"],"[1, 0, 5, 2, 3]"],[["nothing"],"[3, 10, 1, 3, 3]"],[["nothing"],"[3, 0, 3, 1, 3]"],[["nothing"],"[0, 3, 3, 5, 2]"],[["nothing"],"[0, 1, 10, 2, 2]"],[["nothing"],"[4, 1, 0, 2, 3]"],[["nothing"],"[8, 3, 0, 1, 4]"]],"type":"(unit -> list)","name":"014","solution":"(letII (case 2 of O => randnat | S => (λn -> n#1)) (λk -> (scanlunit (λacc x -> (letII randnat (λx -> (case (== randnat randnat) of True => (letII 5 (λx -> (+ acc#4 randnat))) | False => (case (flip 0.6) of True => randnat | False => randnat))))) 0 5)))","num_train":4},{"ios":[[["nothing"],"[0, 4, 6, 4]"],[["nothing"],"[0, 2, 16, 2, 16]"],[["nothing"],"[0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]"],[["nothing"],"[0, 2]"],[["nothing"],"[1, 12, 1]"],[["nothing"],"[1, 2]"],[["nothing"],"[4, 0, 6, 0, 2, 2, 2, 2, 2]"],[["nothing"],"[0, 1, 2, 1, 2, 1]"]],"type":"(unit -> list)","name":"015","solution":"(letII (inc (inc randnat)) (λk -> (scanlunit (λacc x -> (case acc#2 of O => (case randnat of O => randnat | S => (λn -> randnat)) | S => (λn -> (- k#4 n#1)))) 0 (case (flip 0.5) of True => (inc randnat) | False => (case (flip 0.9) of True => randnat | False => k#1)))))","num_train":4},{"ios":[[["nothing"],"[6, 9, 14, 19, 21]"],[["nothing"],"[1, 12, 14, 25, 29]"],[["nothing"],"[7, 9, 11, 22, 27, 29, 34, 35, 39, 40, 48, 54, 56, 58, 65, 68, 70, 72, 73]"],[["nothing"],"[2, 9, 14]"],[["nothing"],"[12, 15]"],[["nothing"],"[7, 9, 10, 11, 32, 41, 43, 48, 51, 52, 60, 71, 82]"],[["nothing"],"[8, 20, 22, 23, 34, 40, 42, 44, 48, 75, 88, 89, 90, 94]"],[["nothing"],"[1, 6, 9, 17, 37, 38, 49, 50, 52, 53]"]],"type":"(unit -> list)","name":"016","solution":"(letII (inc (- randnat (- randnat 7))) (λk -> (scanlunit (λacc x -> (letII 1 (λx -> (+ randnat (inc acc#3))))) 0 (+ k#1 (letII randnat (λx -> (+ 1 x#1)))))))","num_train":4},{"ios":[[["nothing"],"[1, 8, 12]"],[["nothing"],"[7, 8, 12, 32]"],[["nothing"],"[4, 7, 12, 17]"],[["nothing"],"[11, 31, 32, 32]"],[["nothing"],"[17, 20, 20, 25]"],[["nothing"],"[1, 13, 32]"],[["nothing"],"[2, 4, 6, 16]"],[["nothing"],"[3, 4, 15, 15, 16, 23, 28, 29]"]],"type":"(unit -> list)","name":"017","solution":"(letII (+ (case (iseven 0) of True => randnat | False => 7) (- 3 randnat)) (λk -> (scanlunit (λacc x -> (+ (case randnat of O => (+ randnat randnat) | S => (λn -> n#1)) acc#2)) 0 (inc randnat))))","num_train":4},{"ios":[[["nothing"],"[0, 3, 0, 0, 9, 0, 4, 7, 0, 4, 0, 0, 0, 0, 4, 0]"],[["nothing"],"[29, 0, 29, 0, 27, 0, 32, 0, 25, 4, 9, 21, 0, 23, 8, 11, 3, 21, 4]"],[["nothing"],"[17, 0, 1, 24, 0, 26, 0, 18, 0, 15]"],[["nothing"],"[14, 0, 23, 0, 14, 0, 8, 4, 2, 8, 0, 29, 0, 12, 10, 3, 0, 4]"],[["nothing"],"[0, 10]"],[["nothing"],"[11, 10, 2, 9, 2, 3, 2, 3, 3, 7, 0]"],[["nothing"],"[4, 0, 8, 0, 7]"],[["nothing"],"[9, 0, 7, 0]"]],"type":"(unit -> list)","name":"018","solution":"(letII (+ randnat randnat) (λk -> (scanlunit (λacc x -> (letII acc#2 (λx -> (- (+ (+ k#4 k#4) randnat) (letII randnat (λx -> (+ x#2 randnat))))))) 0 (letII randnat (λx -> (+ (+ (case randnat of O => 7 | S => (λn -> n#1)) randnat) randnat))))))","num_train":4},{"ios":[[["nothing"],"[1, 7, 7, 7, 7, 7, 0, 8, 1]"],[["nothing"],"[4, 0, 0, 0, 10, 10, 10, 10, 10]"],[["nothing"],"[0, 0, 9, 6, 6, 6, 4, 4, 0]"],[["nothing"],"[0, 0, 9, 9, 6, 27, 0, 8, 8]"],[["nothing"],"[0, 0, 1, 1, 1, 9, 9, 0, 0]"],[["nothing"],"[0, 0, 1, 1, 1, 4, 4, 1, 1]"],[["nothing"],"[6, 6, 1, 1, 1, 0, 0, 0, 4]"],[["nothing"],"[1, 1, 15, 0, 0, 1, 1, 1, 0]"]],"type":"(unit -> list)","name":"019","solution":"(letII 4 (λk -> (scanlunit (λacc x -> (case (flip 0.5) of True => randnat | False => acc#2)) 0 9)))","num_train":4},{"ios":[[["nothing"],"[1, 1, 2, 0, 7, 0, 0, 12, 4, 4, 1, 0, 0, 10, 1, 2, 1, 0, 6, 4, 0, 0, 12]"],[["nothing"],"[0, 2, 2, 4, 0, 0, 5, 0, 4, 2, 1, 7, 1, 1]"],[["nothing"],"[4, 7, 0, 6, 0, 2, 2, 3, 1, 8]"],[["nothing"],"[19, 4, 1, 14, 2, 2, 1, 1]"],[["nothing"],"[1, 1, 0, 2, 3, 1, 4, 1]"],[["nothing"],"[2, 3, 9, 1, 2, 2, 8, 5, 5, 9, 7]"],[["nothing"],"[3, 2, 0, 0, 6, 0, 22, 3, 5, 3, 9, 9, 5, 1, 0]"],[["nothing"],"[11, 2, 0, 2, 3, 6, 0, 1, 0]"]],"type":"(unit -> list)","name":"020","solution":"(letII (- 2 (+ 4 randnat)) (λk -> (scanlunit (λacc x -> (case (case (> 9 (+ k#3 8)) of True => k#3 | False => (letII randnat (λx -> (inc randnat)))) of O => randnat | S => (λn -> (inc acc#3)))) 0 (letII randnat (λx -> (+ randnat 8))))))","num_train":4},{"ios":[[["nothing"],"[12, 1]"],[["nothing"],"[0, 3]"],[["nothing"],"[0, 12, 2]"],[["nothing"],"[4, 0]"],[["nothing"],"[5, 0, 3, 8, 1, 4]"],[["nothing"],"[12, 0, 2]"],[["nothing"],"[0, 0, 0, 0, 2, 3]"],[["nothing"],"[1, 8, 9, 0, 0]"]],"type":"(unit -> list)","name":"021","solution":"(letII (letII (letII 2 (λx -> (case randnat of O => x#1 | S => (λn -> randnat)))) (λx -> (inc x#1))) (λk -> (scanlunit (λacc x -> (case (> acc#2 randnat) of True => randnat | False => randnat)) 0 k#1)))","num_train":4},{"ios":[[["nothing"],"[8, 21, 29]"],[["nothing"],"[11, 19, 27, 41, 57, 81, 100, 114, 125, 137, 147]"],[["nothing"],"[16, 24, 35, 49, 57, 69, 79, 90, 101, 109]"],[["nothing"],"[26, 35, 43, 59, 69, 78, 89, 99, 111, 131, 146]"],[["nothing"],"[8, 31, 45, 62, 72, 88, 102, 112, 121, 140, 150, 159, 171, 185, 193]"],[["nothing"],"[8, 16]"],[["nothing"],"[10, 22, 36]"],[["nothing"],"[11, 20, 28, 40, 48, 60, 69, 77]"]],"type":"(unit -> list)","name":"022","solution":"(letII (- randnat 5) (λk -> (scanlunit (λacc x -> (+ randnat (+ 8 acc#2))) 0 (letII (+ randnat randnat) (λx -> (case 4 of O => randnat | S => (λn -> x#2)))))))","num_train":4},{"ios":[[["nothing"],"[8, 10, 12, 17, 34]"],[["nothing"],"[6, 17, 32, 35]"],[["nothing"],"[5, 11]"],[["nothing"],"[4, 7, 12, 14, 18]"],[["nothing"],"[6, 12, 29, 31]"],[["nothing"],"[16, 22, 24, 26, 28]"],[["nothing"],"[3, 15, 18, 22, 31, 35, 38, 43, 50, 67, 72, 76, 81, 83, 89]"],[["nothing"],"[4, 7, 20, 27, 51, 53]"]],"type":"(unit -> list)","name":"023","solution":"(letII (case 8 of O => 4 | S => (λn -> randnat)) (λk -> (scanlunit (λacc x -> (letII randnat (λx -> (+ (inc acc#3) (inc randnat))))) 0 (inc (inc k#1)))))","num_train":4},{"ios":[[["nothing"],"[1, 17, 19, 25, 33, 34, 39, 39, 42, 53, 63, 67, 71, 72]"],[["nothing"],"[0, 8, 9, 10, 14]"],[["nothing"],"[2, 3, 3, 4, 8, 19, 23, 24, 27]"],[["nothing"],"[0, 2, 2]"],[["nothing"],"[9, 12, 13, 15, 20, 23, 23, 23]"],[["nothing"],"[2, 2, 2, 12, 15, 24, 29, 30, 31, 33, 39, 47, 56, 56, 56, 62, 71]"],[["nothing"],"[0, 3, 5, 5, 6, 10, 12, 12, 15, 15, 16, 25, 36, 39, 40, 43, 47, 50, 56, 62, 68, 76, 77, 83]"],[["nothing"],"[9, 9, 10, 10, 14, 16, 16, 17, 17, 17, 25, 25, 32, 34, 34, 39, 47, 51, 60, 65]"]],"type":"(unit -> list)","name":"024","solution":"(letII (letII 8 (λx -> (+ x#1 randnat))) (λk -> (scanlunit (λacc x -> (+ randnat acc#2)) 0 (+ randnat randnat))))","num_train":4},{"ios":[[["nothing"],"[4, 9, 4, 5, 5, 12, 9, 6]"],[["nothing"],"[13, 13, 7, 13, 4, 5, 9, 5]"],[["nothing"],"[18, 8, 14, 6, 15, 4, 5, 6]"],[["nothing"],"[8, 4, 4, 10, 4, 18, 12, 4]"],[["nothing"],"[4, 7]"],[["nothing"],"[6, 4]"],[["nothing"],"[14, 18, 12, 6, 8]"],[["nothing"],"[4, 4, 5, 5, 9, 7, 5, 6, 11]"]],"type":"(unit -> list)","name":"025","solution":"(letII (case (flip 0.2) of True => (letII 6 (λx -> (inc randnat))) | False => 8) (λk -> (scanlunit (λacc x -> (+ (case k#3 of O => k#3 | S => (λn -> 4)) (case (case acc#2 of O => 0 | S => (λn -> randnat)) of O => randnat | S => (λn -> randnat)))) 0 (case (flip 0.3) of True => randnat | False => k#1))))","num_train":4},{"ios":[[["nothing"],"[3, 20, 0, 7, 0, 3]"],[["nothing"],"[15, 0, 0, 9, 0]"],[["nothing"],"[8, 0, 2, 0, 0, 10, 0, 7, 0, 8]"],[["nothing"],"[3, 18, 0]"],[["nothing"],"[2, 7, 0, 4, 0, 8, 0, 2, 0, 16, 0, 3, 1, 6, 6, 0, 0]"],[["nothing"],"[7, 0, 0, 3, 8, 0, 4, 11, 0, 9]"],[["nothing"],"[2, 0, 4, 0, 8, 1, 1, 1, 1, 0, 2, 4, 12, 0, 1, 0, 1, 0, 0, 1, 2]"],[["nothing"],"[2, 0, 4, 0, 5, 0, 1]"]],"type":"(unit -> list)","name":"026","solution":"(letII (- (letII (case randnat of O => 1 | S => (λn -> randnat)) (λx -> (case x#1 of O => randnat | S => (λn -> randnat)))) 0) (λk -> (scanlunit (λacc x -> (- (case randnat of O => 2 | S => (λn -> randnat)) acc#2)) 0 (case (flip 0.7) of True => (+ randnat randnat) | False => k#1))))","num_train":4},{"ios":[[["nothing"],"[0, 0, 0, 1, 8]"],[["nothing"],"[0, 0, 0, 0, 0, 0, 0, 4, 8, 8]"],[["nothing"],"[9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]"],[["nothing"],"[0, 0, 3, 8, 8, 8]"],[["nothing"],"[0, 6, 8, 8, 8, 8, 8]"],[["nothing"],"[0, 0, 5, 8, 8, 8, 8, 8, 8, 8]"],[["nothing"],"[0, 0, 1, 8, 8, 8, 8, 8, 8, 8]"],[["nothing"],"[1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]"]],"type":"(unit -> list)","name":"027","solution":"(letII (letII randnat (λx -> (inc (letII x#1 (λx -> (case x#1 of O => randnat | S => (λn -> n#1))))))) (λk -> (scanlunit (λacc x -> (case acc#2 of O => (- randnat (- k#3 randnat)) | S => (λn -> 8))) 0 (+ (letII randnat (λx -> (case (flip 0.2) of True => x#1 | False => randnat))) k#1))))","num_train":4},{"ios":[[["nothing"],"[3, 4, 3, 3, 3]"],[["nothing"],"[1, 2, 3, 4, 5]"],[["nothing"],"[3, 4, 5, 3, 4]"],[["nothing"],"[1, 2, 3, 3, 4]"],[["nothing"],"[1, 2, 3, 4, 5]"],[["nothing"],"[3, 3, 4, 5, 6]"],[["nothing"],"[1, 2, 3, 3, 4]"],[["nothing"],"[3, 4, 3, 3, 4]"]],"type":"(unit -> list)","name":"028","solution":"(letII 3 (λk -> (scanlunit (λacc x -> (case (flip 0.7) of True => (inc acc#2) | False => k#3)) 0 5)))","num_train":4},{"ios":[[["nothing"],"[0, 2, 0, 0, 16, 13, 1, 1, 0, 0, 0, 14, 8, 0, 0, 17, 9, 0, 0, 0, 0, 0, 2, 0, 1, 2, 2, 0, 0, 0, 0, 0]"],[["nothing"],"[0, 7, 2, 0, 0, 13, 2, 0, 1, 0, 0, 5, 13, 6, 7, 0, 0, 2, 1, 0, 3, 1, 0, 0, 0, 7, 1, 0, 0, 0, 12, 1, 0, 1, 0, 2, 2, 0, 0, 7, 3, 0, 0, 1, 2, 9, 1, 2, 0, 0, 2, 0]"],[["nothing"],"[3, 8, 0, 10, 0, 3, 0, 9, 0, 0, 0, 14, 0, 1]"],[["nothing"],"[2, 0, 0, 0, 3, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 7, 1, 0, 4, 0, 4, 5, 5, 3, 0, 1, 1, 4, 0, 0, 0, 1, 0, 0, 2]"],[["nothing"],"[0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]"],[["nothing"],"[0, 0, 0, 6, 2, 0, 0, 0, 3, 0, 0, 1, 0, 1, 0, 2, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0]"],[["nothing"],"[0, 7, 1, 0, 0, 3, 0, 0, 11, 5, 0, 0, 0, 5, 0, 0]"],[["nothing"],"[7, 0, 1, 7, 0, 0, 5, 8, 6, 0, 0, 5, 0, 0, 10, 0]"]],"type":"(unit -> list)","name":"029","solution":"(letII (+ (case 8 of O => randnat | S => (λn -> n#1)) (letII randnat (λx -> (+ randnat x#1)))) (λk -> (scanlunit (λacc x -> (letII acc#2 (λx -> (- randnat randnat)))) 0 (+ (- (letII k#1 (λx -> (case randnat of O => randnat | S => (λn -> k#3)))) 2) (case (flip 0.3) of True => (inc randnat) | False => k#1)))))","num_train":4},{"ios":[[["nothing"],"[0, 16, 29, 42, 55, 68, 81, 94, 107, 108, 121, 134, 147, 160, 160, 168, 181, 194, 198]"],[["nothing"],"[4, 12, 20, 28, 36, 44, 52, 52, 60, 68, 69, 77, 80, 88, 96, 104, 112, 120, 128, 136, 144, 146, 154, 162, 170, 185, 193, 201, 209, 217, 225, 233, 241, 249]"],[["nothing"],"[12, 24, 36, 48, 60, 72]"],[["nothing"],"[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39]"],[["nothing"],"[17, 34, 51, 55, 56, 73, 90, 107]"],[["nothing"],"[3, 6, 9, 12, 15, 18, 21, 24, 29, 32, 35]"],[["nothing"],"[3, 9, 12, 18, 22, 28, 34, 40]"],[["nothing"],"[8, 16, 24, 32, 33, 38, 46, 47]"]],"type":"(unit -> list)","name":"030","solution":"(letII (inc (case (case (flip 0.5) of True => randnat | False => 6) of O => (letII randnat (λx -> (+ randnat x#1))) | S => (λn -> (+ n#1 randnat)))) (λk -> (scanlunit (λacc x -> (+ (case randnat of O => randnat | S => (λn -> k#4)) acc#2)) 0 (letII randnat (λx -> (+ (letII randnat (λx -> (+ randnat x#2))) x#1))))))","num_train":4},{"ios":[[["nothing"],"[4, 4, 16, 21, 21, 23, 27, 27, 35, 35, 41, 48, 49, 52, 54]"],[["nothing"],"[6, 6, 7, 10, 21, 44]"],[["nothing"],"[0, 3, 5, 5, 8, 8, 8, 12, 13, 17]"],[["nothing"],"[1, 1, 3, 13, 19, 22, 25, 31, 44, 59, 60, 67, 67, 75]"],[["nothing"],"[6, 10, 13, 15, 19, 25, 31, 33, 39, 42, 42, 47, 48, 54, 60, 60, 65, 68, 72, 72, 74, 75, 76, 80, 80, 106, 109, 113, 119, 128, 128, 129, 134, 137]"],[["nothing"],"[2, 7, 8, 11, 12, 22, 28, 32, 32, 44, 44, 46]"],[["nothing"],"[0, 0, 5, 5, 10, 17, 24, 27, 31, 32, 42, 52, 52, 64, 67, 70, 80, 83, 92, 92]"],[["nothing"],"[4, 4, 4, 8, 9, 9, 15, 15, 21, 27, 29, 29]"]],"type":"(unit -> list)","name":"031","solution":"(letII 6 (λk -> (scanlunit (λacc x -> (letII randnat (λx -> (+ acc#3 randnat)))) 0 (+ (+ randnat randnat) k#1))))","num_train":4},{"ios":[[["nothing"],"[5, 17, 18, 20, 22, 23, 25, 26, 33, 45, 48, 51, 52, 55, 57]"],[["nothing"],"[2, 11, 23, 31, 33, 37, 37, 37, 42, 53]"],[["nothing"],"[5, 8, 23, 24, 24]"],[["nothing"],"[3, 3, 5, 6, 19, 19]"],[["nothing"],"[1, 1, 2, 5, 8, 11]"],[["nothing"],"[8, 11, 13, 14, 14, 17, 18, 27, 27, 27, 34, 37]"],[["nothing"],"[0, 8, 11, 14]"],[["nothing"],"[7, 14, 18, 21, 27]"]],"type":"(unit -> list)","name":"032","solution":"(letII (inc (letII randnat (λx -> (inc x#1)))) (λk -> (scanlunit (λacc x -> (+ (letII 3 (λx -> (case x#1 of O => randnat | S => (λn -> acc#4)))) randnat)) 0 (letII randnat (λx -> (+ randnat randnat))))))","num_train":4},{"ios":[[["nothing"],"[2, 4, 6, 8, 10, 12, 14, 16, 18]"],[["nothing"],"[2, 4, 6, 8, 10, 12]"],[["nothing"],"[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]"],[["nothing"],"[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]"],[["nothing"],"[2, 4, 6, 8]"],[["nothing"],"[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]"],[["nothing"],"[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]"],[["nothing"],"[2, 4, 6, 8, 10, 12, 14, 16, 18]"]],"type":"(unit -> list)","name":"033","solution":"(letII (inc (inc (inc randnat))) (λk -> (scanlunit (λacc x -> (inc (inc acc#2))) 0 (case (flip 0.9) of True => k#1 | False => randnat))))","num_train":4},{"ios":[[["nothing"],"[8, 11, 2, 4, 1]"],[["nothing"],"[6, 6, 6, 3]"],[["nothing"],"[6, 6, 4, 1, 7, 2]"],[["nothing"],"[2, 6]"],[["nothing"],"[6, 6, 1, 6, 1, 6]"],[["nothing"],"[6, 16, 1, 7]"],[["nothing"],"[5, 2, 6, 12, 6]"],[["nothing"],"[6, 6, 4, 1, 7, 6, 1]"]],"type":"(unit -> list)","name":"034","solution":"(letII (letII randnat (λx -> (+ (letII randnat (λx -> (inc randnat))) randnat))) (λk -> (scanlunit (λacc x -> (case (iseven (letII (inc acc#2) (λx -> (inc randnat)))) of True => 6 | False => (inc randnat))) 0 k#1)))","num_train":4},{"ios":[[["nothing"],"[6, 0]"],[["nothing"],"[6, 0, 6, 0]"],[["nothing"],"[3, 3, 0]"],[["nothing"],"[6, 6, 6, 0]"],[["nothing"],"[6, 0, 6, 0, 6, 6, 0, 0, 6]"],[["nothing"],"[2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2]"],[["nothing"],"[4, 0, 4, 4]"],[["nothing"],"[8, 0, 8, 0, 0, 0, 8, 0, 0, 8, 0, 8, 8, 0, 0, 8, 8]"]],"type":"(unit -> list)","name":"035","solution":"(letII (case (iseven (letII randnat (λx -> (inc randnat)))) of True => (case (flip 0.9) of True => 6 | False => (case (flip 0.9) of True => randnat | False => 8)) | False => (case (flip 0.5) of True => 8 | False => randnat)) (λk -> (scanlunit (λacc x -> (case (flip 0.8) of True => (- k#3 acc#2) | False => acc#2)) 0 (inc randnat))))","num_train":4},{"ios":[[["nothing"],"[4, 0, 2, 2, 1, 0, 7]"],[["nothing"],"[0, 8, 1, 5, 0]"],[["nothing"],"[6, 0, 0, 4, 7, 0, 2]"],[["nothing"],"[1, 1, 6, 1, 0, 9, 0]"],[["nothing"],"[5, 3]"],[["nothing"],"[0, 2, 0, 0, 0, 3, 2, 2, 2]"],[["nothing"],"[1, 10, 0, 11, 0]"],[["nothing"],"[5, 1, 0, 0, 4, 0, 4, 3, 8, 4, 1, 0, 3]"]],"type":"(unit -> list)","name":"036","solution":"(letII (case (flip 0.9) of True => 5 | False => 8) (λk -> (scanlunit (λacc x -> (case 9 of O => (case randnat of O => acc#2 | S => (λn -> k#4)) | S => (λn -> randnat))) 0 (case randnat of O => 5 | S => (λn -> randnat)))))","num_train":4},{"ios":[[["nothing"],"[7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84]"],[["nothing"],"[7, 14, 21, 28, 35, 42, 49, 56, 63]"],[["nothing"],"[7, 14, 21, 28, 35, 42, 49, 56]"],[["nothing"],"[7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77]"],[["nothing"],"[7, 14, 21, 28, 35, 42, 49, 56]"],[["nothing"],"[7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77]"],[["nothing"],"[7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105, 112, 119]"],[["nothing"],"[7, 14, 21, 28, 35, 42, 49, 56, 63]"]],"type":"(unit -> list)","name":"037","solution":"(letII (+ (inc 7) randnat) (λk -> (scanlunit (λacc x -> (+ 6 (letII randnat (λx -> (inc acc#3))))) 0 k#1)))","num_train":4},{"ios":[[["nothing"],"[7, 10, 4, 4, 10, 9, 1, 7, 7, 7, 10, 7, 10, 10, 3, 9, 9, 5]"],[["nothing"],"[8, 9, 5, 6, 6, 1, 1, 5, 8, 9, 10, 8, 8, 9, 9]"],[["nothing"],"[1, 1, 10, 6, 1, 9]"],[["nothing"],"[9, 5, 3, 4, 6, 8, 9, 10, 8, 6, 10, 8, 3, 8, 8, 1, 7]"],[["nothing"],"[10, 10, 7, 8, 6, 1, 9, 10, 10, 10, 4, 10, 1]"],[["nothing"],"[1, 6, 8, 6, 9, 1, 3, 9, 1, 4, 1, 8, 1, 4, 10, 9, 1, 10]"],[["nothing"],"[10, 8, 9, 1, 1, 10, 10, 9, 1, 5, 7, 9, 7, 6, 8, 7, 4, 4]"],[["nothing"],"[1, 6, 10, 1, 3, 7, 1, 4, 10, 10, 8, 9, 5, 3]"]],"type":"(unit -> list)","name":"038","solution":"(letII (letII 4 (λx -> (+ x#1 (letII randnat (λx -> (inc x#2)))))) (λk -> (scanlunit (λacc x -> (letII (case (flip 0.1) of True => acc#2 | False => (+ randnat k#3)) (λx -> (inc (- k#4 randnat))))) 0 (- (+ k#1 k#1) randnat))))","num_train":4},{"ios":[[["nothing"],"[0, 2, 2, 10, 1, 1, 1]"],[["nothing"],"[0, 1, 2, 10, 10, 10, 0]"],[["nothing"],"[0, 0, 0, 0, 1, 1, 3]"],[["nothing"],"[6, 6, 0, 1, 4, 0, 0]"],[["nothing"],"[4, 4, 4, 4, 5, 15, 15]"],[["nothing"],"[1, 1, 1, 0, 0, 0, 2]"],[["nothing"],"[0, 6, 6, 1, 13, 13, 13]"],[["nothing"],"[0, 10, 0, 9, 9, 4, 4]"]],"type":"(unit -> list)","name":"039","solution":"(letII (inc 6) (λk -> (scanlunit (λacc x -> (case (flip 0.4) of True => acc#2 | False => randnat)) 0 (case (flip 0.9) of True => k#1 | False => k#1))))","num_train":4},{"ios":[[["nothing"],"[8, 0, 0]"],[["nothing"],"[0, 0, 2]"],[["nothing"],"[3, 19, 7]"],[["nothing"],"[8, 0, 1]"],[["nothing"],"[12, 0, 4]"],[["nothing"],"[4, 22, 0]"],[["nothing"],"[29, 0, 2]"],[["nothing"],"[4, 0, 1]"]],"type":"(unit -> list)","name":"040","solution":"(letII (+ (letII randnat (λx -> (case (flip 0.2) of True => randnat | False => randnat))) (inc 7)) (λk -> (scanlunit (λacc x -> (- randnat (- acc#2 randnat))) 0 3)))","num_train":4},{"ios":[[["nothing"],"[2, 7, 9, 13, 16, 36, 38, 51, 56, 66, 68, 73, 75, 78, 81, 84]"],[["nothing"],"[14, 21, 25, 27, 30]"],[["nothing"],"[15, 18, 37, 41, 47]"],[["nothing"],"[6, 11, 13, 16, 21, 25, 30, 33, 40, 45]"],[["nothing"],"[5, 13, 17, 19, 21, 27, 31, 38]"],[["nothing"],"[7, 12, 23, 25, 39, 48, 52, 71]"],[["nothing"],"[9, 12, 14, 18, 33, 36, 56, 58, 63, 71, 79, 85, 87]"],[["nothing"],"[19, 25, 31, 40, 42]"]],"type":"(unit -> list)","name":"041","solution":"(letII (+ (case (flip 0.4) of True => 0 | False => randnat) (case (flip 0.4) of True => randnat | False => 8)) (λk -> (scanlunit (λacc x -> (inc (+ acc#2 (inc randnat)))) 0 (letII (- 9 k#1) (λx -> (case (flip 0.2) of True => 5 | False => k#2))))))","num_train":4},{"ios":[[["nothing"],"[10, 18, 10, 10, 10, 14, 10, 11, 14, 10, 10, 19, 29, 30, 42, 50, 52, 59, 64, 67, 68, 10, 10, 10, 10, 15, 16, 19, 10]"],[["nothing"],"[7, 10, 10, 11, 10, 22]"],[["nothing"],"[10, 20, 50, 10, 10, 10, 16, 18, 19, 21, 10, 15, 10, 10, 10, 10]"],[["nothing"],"[10, 10, 14, 16, 26, 10, 10, 10, 12, 10, 10, 24, 10, 14, 16, 18]"],[["nothing"],"[4, 8, 10, 15]"],[["nothing"],"[10, 10, 10, 10, 10, 10, 15, 17, 18, 10, 10, 11, 10]"],[["nothing"],"[10, 10, 10, 11, 10, 10, 10, 15, 25, 26, 35, 10, 10, 10, 10, 13, 10]"],[["nothing"],"[10, 18, 22]"]],"type":"(unit -> list)","name":"042","solution":"(letII (case (- 1 3) of O => 9 | S => (λn -> randnat)) (λk -> (scanlunit (λacc x -> (inc (letII (case (flip 0.9) of True => 7 | False => randnat) (λx -> (case (flip 0.5) of True => k#4 | False => (+ acc#3 randnat)))))) 0 (+ (letII k#1 (λx -> (case (flip 0.5) of True => randnat | False => x#1))) (+ randnat randnat)))))","num_train":4},{"ios":[[["nothing"],"[7, 10, 17, 6, 2, 8]"],[["nothing"],"[6, 6, 8, 1, 6, 6]"],[["nothing"],"[7, 9, 6, 10, 7, 7]"],[["nothing"],"[12, 10, 7, 7, 9, 22]"],[["nothing"],"[7, 7, 15, 13, 5, 8]"],[["nothing"],"[19, 9, 7, 27, 6, 7]"],[["nothing"],"[10, 8, 10, 14, 8, 8]"],[["nothing"],"[18, 6, 8, 17, 6, 14]"]],"type":"(unit -> list)","name":"043","solution":"(letII (+ (- randnat 8) (+ 3 3)) (λk -> (scanlunit (λacc x -> (case (flip 0.9) of True => (letII acc#2 (λx -> (+ k#4 randnat))) | False => randnat)) 0 (case (inc k#1) of O => k#1 | S => (λn -> n#1)))))","num_train":4},{"ios":[[["nothing"],"[1, 2]"],[["nothing"],"[1, 2]"],[["nothing"],"[1, 2]"],[["nothing"],"[1, 2]"],[["nothing"],"[1, 2]"],[["nothing"],"[1, 2]"],[["nothing"],"[1, 2]"],[["nothing"],"[1, 2]"]],"type":"(unit -> list)","name":"044","solution":"(letII 7 (λk -> (scanlunit (λacc x -> (inc acc#2)) 0 2)))","num_train":4},{"ios":[[["nothing"],"[0, 3, 12, 22, 6, 17, 2, 0, 3, 4, 7, 8, 5, 1, 6]"],[["nothing"],"[9, 14, 9, 10, 10, 7, 14, 11, 8, 8, 9, 8, 9, 8, 11, 3, 16, 8]"],[["nothing"],"[8, 7, 25, 0, 8, 13, 7, 6, 14, 6, 9, 10, 5, 18, 8, 5]"],[["nothing"],"[0, 51, 0, 33, 28, 31, 28, 27, 30, 6, 36, 0, 35, 5, 27, 28, 29, 34, 27, 27, 22, 14, 31, 27, 9, 28, 27, 28, 36, 4, 30, 6, 37, 0, 34, 1, 34]"],[["nothing"],"[11, 19, 12, 6, 15, 4, 11, 11, 4, 9, 9, 11, 9, 6, 9, 5, 17, 11]"],[["nothing"],"[21, 14, 15, 14, 22, 6, 28, 4, 15, 23, 19, 14, 14, 14, 20, 21, 14, 18, 15, 25, 15, 16, 17]"],[["nothing"],"[38, 3, 1, 0, 0, 7, 4, 0]"],[["nothing"],"[1, 10, 0, 8, 1, 8, 6, 2, 6, 16, 5, 2, 4, 2, 6, 5, 6, 1]"]],"type":"(unit -> list)","name":"045","solution":"(letII (letII randnat (λx -> (+ (+ randnat x#1) 4))) (λk -> (scanlunit (λacc x -> (- (+ randnat (case (flip 0.9) of True => k#3 | False => acc#2)) (case (flip 0.7) of True => 6 | False => acc#2))) 0 (+ (inc k#1) (inc randnat)))))","num_train":4},{"ios":[[["nothing"],"[4, 9, 9, 5, 7, 7, 0, 4, 15, 8, 9, 16, 4, 3, 9, 2, 6, 7]"],[["nothing"],"[4, 16]"],[["nothing"],"[4, 1, 4, 5, 7, 5, 2, 5, 9, 5, 9, 1, 3, 11, 8, 25, 36, 31, 10, 18]"],[["nothing"],"[4, 2, 6, 10]"],[["nothing"],"[4, 17, 12, 12, 16, 8, 13, 2]"],[["nothing"],"[4, 14, 1, 6, 12, 3]"],[["nothing"],"[4, 7, 10, 3, 9, 4, 5, 2, 12, 11, 3, 12, 7, 9, 3, 16]"],[["nothing"],"[4, 6, 4, 20, 2, 5, 5, 8, 2, 2, 9, 3]"]],"type":"(unit -> list)","name":"046","solution":"(letII (inc randnat) (λk -> (scanlunit (λacc x -> (letII 2 (λx -> (case acc#3 of O => 4 | S => (λn -> (+ randnat randnat)))))) 0 (+ (case (iseven randnat) of True => k#1 | False => k#1) (letII (letII randnat (λx -> (- randnat k#2))) (λx -> (case k#2 of O => x#1 | S => (λn -> k#3))))))))","num_train":4},{"ios":[[["nothing"],"[2, 2, 9, 4]"],[["nothing"],"[0, 4, 1, 0]"],[["nothing"],"[2, 3, 3, 4]"],[["nothing"],"[4, 1, 7, 0]"],[["nothing"],"[3, 2, 6, 2]"],[["nothing"],"[4, 4, 1, 6]"],[["nothing"],"[4, 0, 3, 1]"],[["nothing"],"[0, 3, 1, 4]"]],"type":"(unit -> list)","name":"047","solution":"(letII (case 3 of O => randnat | S => (λn -> randnat)) (λk -> (scanlunit (λacc x -> (case (== randnat acc#2) of True => randnat | False => randnat)) 0 (+ (- (letII k#1 (λx -> (- k#2 x#1))) 8) 4))))","num_train":4},{"ios":[[["nothing"],"[24, 2, 5]"],[["nothing"],"[2, 10, 5]"],[["nothing"],"[9, 5, 8]"],[["nothing"],"[2, 1, 4]"],[["nothing"],"[6, 1, 3]"],[["nothing"],"[1, 12, 18]"],[["nothing"],"[2, 5, 4]"],[["nothing"],"[3, 1, 3]"]],"type":"(unit -> list)","name":"048","solution":"(letII 3 (λk -> (scanlunit (λacc x -> (letII (letII acc#2 (λx -> (inc acc#3))) (λx -> (inc (letII 6 (λx -> (case (case (flip 0.7) of True => x#1 | False => randnat) of O => randnat | S => (λn -> randnat)))))))) 0 k#1)))","num_train":4},{"ios":[[["nothing"],"[1, 12]"],[["nothing"],"[2, 7, 1, 1, 5, 0, 11, 21, 7]"],[["nothing"],"[8, 13, 2, 3, 0, 0, 4]"],[["nothing"],"[0, 4, 0, 8, 10, 1, 0, 4, 7]"],[["nothing"],"[5, 1, 0, 1, 6, 7, 5, 9, 7]"],[["nothing"],"[0, 21, 32, 25, 20, 16, 19, 19, 16]"],[["nothing"],"[6, 2, 3, 6, 6, 7, 6, 3, 8]"],[["nothing"],"[1, 2, 2, 2, 6, 0, 14, 22, 24]"]],"type":"(unit -> list)","name":"049","solution":"(letII 9 (λk -> (scanlunit (λacc x -> (letII (+ acc#2 7) (λx -> (+ (- acc#3 randnat) randnat)))) 0 (case k#1 of O => (letII (letII randnat (λx -> (case x#1 of O => randnat | S => (λn -> randnat)))) (λx -> (+ x#1 randnat))) | S => (λn -> (case (flip 0.5) of True => k#2 | False => randnat))))))","num_train":4},{"ios":[[["nothing"],"[0, 9, 9, 0, 1, 7, 7, 1, 7, 4, 10, 11]"],[["nothing"],"[1, 1, 0, 3, 15, 9, 1, 0, 0, 0, 1, 5]"],[["nothing"],"[12, 2, 7, 3, 4, 0, 9, 2, 9, 9]"],[["nothing"],"[9, 9, 8, 0, 9, 9, 2, 1, 0, 0]"],[["nothing"],"[17, 9, 19, 0, 0, 1, 9]"],[["nothing"],"[0, 9, 15, 6]"],[["nothing"],"[3, 1, 1, 9, 8, 2, 9, 9, 9, 4, 1, 1]"],[["nothing"],"[9, 2, 2, 2, 0, 9, 9, 9, 0, 5, 3, 9, 4, 0, 0, 9, 2, 0, 3, 9, 13]"]],"type":"(unit -> list)","name":"050","solution":"(letII (case randnat of O => 0 | S => (λn -> 9)) (λk -> (scanlunit (λacc x -> (case (iseven (inc 9)) of True => (letII acc#2 (λx -> (case (flip 0.3) of True => 9 | False => randnat))) | False => acc#2)) 0 (+ (inc k#1) (case (flip 0.8) of True => randnat | False => randnat)))))","num_train":4},{"ios":[[["nothing"],"[2, 0, 6, 12, 0, 4, 0, 0]"],[["nothing"],"[11, 0, 0, 2, 0, 19, 0, 0]"],[["nothing"],"[4, 0, 1, 2, 0, 0, 5, 6]"],[["nothing"],"[1, 6, 2, 2, 0, 0, 0, 6]"],[["nothing"],"[0, 6, 2, 0, 3, 0, 3, 0]"],[["nothing"],"[1, 0, 2, 0, 4, 2, 5, 3]"],[["nothing"],"[4, 0, 0, 5, 0, 2, 0, 4]"],[["nothing"],"[8, 0, 10, 0, 4, 0, 1, 0]"]],"type":"(unit -> list)","name":"051","solution":"(letII (inc 7) (λk -> (scanlunit (λacc x -> (- randnat (case randnat of O => acc#2 | S => (λn -> acc#3)))) 0 k#1)))","num_train":4},{"ios":[[["nothing"],"[8, 9, 6, 6, 7, 5, 2, 13, 27, 19]"],[["nothing"],"[8, 11, 14, 6, 6, 10, 13, 3, 19, 4, 13]"],[["nothing"],"[12, 10, 12, 15, 27, 4, 3, 6, 9, 19]"],[["nothing"],"[14, 7, 33, 1, 9, 29, 16, 7, 15, 29]"],[["nothing"],"[3, 3, 5, 10, 16, 2, 9, 8, 14, 32]"],[["nothing"],"[2, 8, 15, 15, 8, 3, 5, 26, 32, 1, 13, 8, 21, 8, 13, 13, 30]"],[["nothing"],"[1, 25, 4, 12, 6, 14, 2, 13, 7, 8, 20, 27, 8, 16, 3]"],[["nothing"],"[2, 7, 8, 11, 9, 27, 29, 42, 11, 19, 24]"]],"type":"(unit -> list)","name":"052","solution":"(letII (case randnat of O => randnat | S => (λn -> randnat)) (λk -> (scanlunit (λacc x -> (+ (inc (letII randnat (λx -> (case (flip 0.3) of True => (+ randnat acc#3) | False => (case randnat of O => acc#3 | S => (λn -> randnat)))))) randnat)) 0 (inc (letII k#1 (λx -> (+ 8 (letII randnat (λx -> (inc randnat))))))))))","num_train":4},{"ios":[[["nothing"],"[1, 2, 11, 15, 16, 25, 34, 39, 44, 48, 49, 52, 59, 60, 65, 67, 77, 78, 83, 87, 101, 104, 113, 122, 128, 135]"],[["nothing"],"[4, 9, 19, 29, 38, 40, 45, 46, 52, 53, 58, 77, 81, 88, 90]"],[["nothing"],"[4, 6, 7, 8, 9, 10, 22, 23, 26, 28, 30, 36, 41, 53, 62, 65, 73, 78]"],[["nothing"],"[9, 17, 22, 25, 29, 34, 36, 37, 44, 58, 59, 60, 62, 63, 73]"],[["nothing"],"[5, 7, 10, 23, 26, 29, 34, 41, 42, 48, 50, 56, 61, 80, 81, 91, 96, 101, 102, 111, 118, 121]"],[["nothing"],"[2, 3, 11, 13, 14, 15, 17, 21, 23, 27, 33, 38, 41, 50, 51, 52, 54, 56, 60, 64, 84, 85, 91, 96, 101, 104, 106, 125, 130, 135, 137, 143, 147]"],[["nothing"],"[6, 8, 12, 19, 20, 25, 36, 49, 50, 56, 57, 59, 60, 81, 88, 97, 100, 106, 112, 119, 130, 131, 133, 134, 136]"],[["nothing"],"[4, 6, 7, 12, 15, 18, 24, 25, 30, 33, 50, 52, 54, 60, 61, 62, 63, 65, 68, 72, 76, 78, 79]"]],"type":"(unit -> list)","name":"053","solution":"(letII randnat (λk -> (scanlunit (λacc x -> (inc (+ acc#2 (letII randnat (λx -> (case (flip 0.7) of True => randnat | False => randnat)))))) 0 (+ (+ 6 (inc 8)) randnat))))","num_train":4},{"ios":[[["nothing"],"[17, 0, 17, 0, 17, 0, 17, 0, 17, 0, 17, 0, 17, 0, 17, 0, 17, 0]"],[["nothing"],"[17, 0, 17, 0, 17, 0]"],[["nothing"],"[17, 0, 17, 0, 17, 0, 17, 0, 17, 0, 17]"],[["nothing"],"[17, 0, 17, 0, 17, 0, 17, 0, 17, 0, 17, 0]"],[["nothing"],"[17, 0, 17, 0, 17, 0, 17, 0]"],[["nothing"],"[17, 0, 17, 0, 17, 0, 17, 0, 17]"],[["nothing"],"[17, 0, 17, 0, 17, 0]"],[["nothing"],"[17, 0, 17, 0, 17, 0, 17, 0, 17, 0, 17]"]],"type":"(unit -> list)","name":"054","solution":"(letII (+ (letII 8 (λx -> (case x#1 of O => (inc (case randnat of O => x#1 | S => (λn -> 6))) | S => (λn -> x#2)))) 9) (λk -> (scanlunit (λacc x -> (- k#3 acc#2)) 0 (inc (case (flip 0.5) of True => (+ randnat 5) | False => randnat)))))","num_train":4},{"ios":[[["nothing"],"[16, 3, 13, 3, 9, 3]"],[["nothing"],"[12, 3, 10, 5, 12, 3, 9, 4, 15, 3]"],[["nothing"],"[40, 3, 28, 3, 33, 3, 30, 3]"],[["nothing"],"[11, 3, 10, 3, 8]"],[["nothing"],"[6, 3, 4, 7, 3]"],[["nothing"],"[12, 3, 17, 3, 17, 3, 16, 3, 14, 3, 22, 3, 8, 4]"],[["nothing"],"[12, 3, 16, 3, 11, 3]"],[["nothing"],"[9, 5]"]],"type":"(unit -> list)","name":"055","solution":"(letII (letII 4 (λx -> (inc randnat))) (λk -> (scanlunit (λacc x -> (+ (inc 2) (- (letII k#3 (λx -> (+ randnat x#1))) acc#2))) 0 (inc (+ randnat randnat)))))","num_train":4},{"ios":[[["nothing"],"[3, 0, 3]"],[["nothing"],"[0, 3, 0]"],[["nothing"],"[13, 12, 13, 11, 12, 10, 11, 12, 9, 10, 12, 10, 11]"],[["nothing"],"[2, 2, 4, 4]"],[["nothing"],"[3, 0, 3, 0]"],[["nothing"],"[0, 2, 0]"],[["nothing"],"[7, 8, 0, 0, 6, 4, 6, 8]"],[["nothing"],"[2, 0, 0, 0]"]],"type":"(unit -> list)","name":"056","solution":"(letII (inc (inc randnat)) (λk -> (scanlunit (λacc x -> (- k#3 (case acc#2 of O => randnat | S => (λn -> randnat)))) 0 (case (> (+ k#1 randnat) (case k#1 of O => randnat | S => (λn -> 2))) of True => k#1 | False => randnat))))","num_train":4},{"ios":[[["nothing"],"[8, 11, 38, 45, 57, 73, 75, 83]"],[["nothing"],"[2, 4, 9, 11, 16, 20, 28, 30]"],[["nothing"],"[4, 25, 38, 46, 55, 61, 73, 84]"],[["nothing"],"[2, 16, 18, 21, 25, 27, 31, 34]"],[["nothing"],"[6, 20, 24, 31, 34, 36, 51, 61]"],[["nothing"],"[2, 9, 11, 42, 44, 46, 50, 54]"],[["nothing"],"[7, 14, 16, 20, 24, 27, 40, 49]"],[["nothing"],"[2, 9, 11, 25, 27, 30, 41, 43]"]],"type":"(unit -> list)","name":"057","solution":"(letII (case randnat of O => (case (flip 0.9) of True => randnat | False => randnat) | S => (λn -> n#1)) (λk -> (scanlunit (λacc x -> (inc (inc (+ acc#2 randnat)))) 0 (case randnat of O => k#1 | S => (λn -> (inc 7))))))","num_train":4},{"ios":[[["nothing"],"[1, 4, 9, 21, 24, 26, 31, 41, 46, 51]"],[["nothing"],"[0, 7, 9, 16, 17, 25, 29, 32, 37, 39]"],[["nothing"],"[15, 16, 24, 29, 30, 30, 37, 40, 55, 56, 59, 62, 67, 88, 93, 95, 95, 96, 100, 102]"],[["nothing"],"[18, 46, 60, 70, 71, 71, 71]"],[["nothing"],"[3, 8, 8, 21]"],[["nothing"],"[5, 6]"],[["nothing"],"[10, 11, 11, 13, 13, 15, 18, 23, 23, 29, 31, 32, 35, 35, 35, 36]"],[["nothing"],"[2, 6, 6, 24, 26, 26, 32, 41, 46, 48, 51, 57, 59, 59]"]],"type":"(unit -> list)","name":"058","solution":"(letII randnat (λk -> (scanlunit (λacc x -> (letII randnat (λx -> (+ acc#3 randnat)))) 0 (+ randnat k#1))))","num_train":4},{"ios":[[["nothing"],"[4, 10, 0, 10, 1, 10, 4, 1, 10, 22]"],[["nothing"],"[5, 4, 5, 7, 0, 5, 8, 0]"],[["nothing"],"[4, 3, 2, 3, 4, 12, 1, 4, 4, 1, 1]"],[["nothing"],"[22, 0, 22, 10, 7, 3, 22, 0, 22, 10, 0, 2, 0, 6, 1, 5, 3, 22, 10, 4, 4, 4, 22]"],[["nothing"],"[0, 4, 1, 0, 0, 4, 0, 4, 1, 3, 4, 0, 4]"],[["nothing"],"[5, 5, 2, 5, 3]"],[["nothing"],"[25, 5, 4, 5, 3, 6, 0, 1, 25, 4, 25, 7, 7, 5, 9, 1, 25, 1, 25, 0, 25, 0, 2, 25, 0, 5, 3]"],[["nothing"],"[5, 2, 7, 2, 3, 2, 11, 16, 1, 11, 14, 3, 12, 0, 11, 2, 11]"]],"type":"(unit -> list)","name":"059","solution":"(letII (letII randnat (λx -> (+ (case randnat of O => randnat | S => (λn -> n#1)) (case (flip 0.2) of True => randnat | False => randnat)))) (λk -> (scanlunit (λacc x -> (letII k#3 (λx -> (case (iseven (letII randnat (λx -> (- x#1 acc#4)))) of True => randnat | False => k#4)))) 0 (+ (case k#1 of O => 8 | S => (λn -> randnat)) (case k#1 of O => randnat | S => (λn -> n#1))))))","num_train":4},{"ios":[[["nothing"],"[1, 0, 9]"],[["nothing"],"[4, 12, 2]"],[["nothing"],"[10, 2, 6]"],[["nothing"],"[2, 10, 9]"],[["nothing"],"[7, 3, 1]"],[["nothing"],"[0, 21, 1]"],[["nothing"],"[3, 3, 0]"],[["nothing"],"[1, 0, 1]"]],"type":"(unit -> list)","name":"060","solution":"(letII (+ randnat 6) (λk -> (scanlunit (λacc x -> (case k#3 of O => (+ acc#2 randnat) | S => (λn -> randnat))) 0 (inc 2))))","num_train":4},{"ios":[[["nothing"],"[1, 6, 5, 5]"],[["nothing"],"[16, 17, 17]"],[["nothing"],"[18, 24, 14, 14, 19, 19, 15, 28, 31, 31]"],[["nothing"],"[12, 15, 15, 17, 20, 29, 35, 44, 48, 45, 45, 42, 46, 50, 55, 60, 62, 64, 68, 65, 59, 70, 73, 78, 85]"],[["nothing"],"[2, 1, 0, 18, 23]"],[["nothing"],"[2, 7, 7, 4, 12, 21, 27, 30, 33, 32, 35, 44, 40, 41, 42, 42, 37, 39, 52, 52, 59, 67, 79, 88, 84, 84, 78, 80]"],[["nothing"],"[10, 13, 23]"],[["nothing"],"[0, 3, 1, 1, 0, 2, 2, 5, 12, 12, 12, 12, 12, 10, 11, 10, 11, 11, 0, 2]"]],"type":"(unit -> list)","name":"061","solution":"(letII (case (flip 0.8) of True => 3 | False => randnat) (λk -> (scanlunit (λacc x -> (- (+ (letII randnat (λx -> (+ randnat k#4))) acc#2) (letII acc#2 (λx -> (case (flip 0.5) of True => k#4 | False => randnat))))) 0 (+ (letII randnat (λx -> (+ randnat x#1))) 3))))","num_train":4},{"ios":[[["nothing"],"[29, 1, 23, 6, 10, 2, 11, 0, 35, 2, 23, 3, 0, 22, 1, 29, 0, 28, 10, 7, 22]"],[["nothing"],"[2, 2, 8, 8, 0, 9, 5]"],[["nothing"],"[7, 9, 0, 8, 7, 7, 16]"],[["nothing"],"[4, 4, 5]"],[["nothing"],"[10, 0, 8, 15, 0, 8, 0, 8]"],[["nothing"],"[14, 8, 9, 7, 0]"],[["nothing"],"[27, 8, 5, 18, 2, 2, 20, 6, 23, 4, 6, 20, 6, 2, 21, 2, 18, 4]"],[["nothing"],"[4, 1, 14, 11]"]],"type":"(unit -> list)","name":"062","solution":"(letII (case 9 of O => (+ randnat 4) | S => (λn -> randnat)) (λk -> (scanlunit (λacc x -> (case (letII acc#2 (λx -> (- randnat acc#3))) of O => randnat | S => (λn -> (+ randnat k#4)))) 0 k#1)))","num_train":4},{"ios":[[["nothing"],"[1, 3, 7, 15, 31, 63, 127]"],[["nothing"],"[1, 3, 7, 15, 31, 63, 127]"],[["nothing"],"[1, 3, 7, 15, 31, 63, 127]"],[["nothing"],"[1, 3, 7, 15, 31, 63, 127, 255, 511]"],[["nothing"],"[1, 3, 7, 15, 31, 63, 127, 255, 511]"],[["nothing"],"[1, 3, 7, 15, 31, 63, 127, 255]"],[["nothing"],"[1, 3, 7, 15, 31, 63, 127, 255, 511]"],[["nothing"],"[1, 3, 7, 15, 31, 63, 127, 255, 511]"]],"type":"(unit -> list)","name":"063","solution":"(letII (inc (+ 6 randnat)) (λk -> (scanlunit (λacc x -> (letII k#3 (λx -> (inc (+ acc#3 acc#3))))) 0 (case (flip 0.9) of True => k#1 | False => k#1))))","num_train":4},{"ios":[[["nothing"],"[0, 0, 6, 13, 19, 22, 23]"],[["nothing"],"[9, 9, 17, 17, 26, 27, 30]"],[["nothing"],"[7, 9, 10, 11, 12, 12, 15]"],[["nothing"],"[2, 15, 22, 23, 26, 31, 32]"],[["nothing"],"[3, 19, 24, 24, 27, 27, 27]"],[["nothing"],"[4, 13, 15, 16, 23, 28, 35]"],[["nothing"],"[0, 0, 2, 3, 5, 5, 5]"],[["nothing"],"[3, 3, 4, 12, 12, 16, 22]"]],"type":"(unit -> list)","name":"064","solution":"(letII (case (flip 0.9) of True => randnat | False => 2) (λk -> (scanlunit (λacc x -> (+ (letII k#3 (λx -> (case acc#3 of O => randnat | S => (λn -> randnat)))) acc#2)) 0 (case k#1 of O => k#1 | S => (λn -> (inc (case (== k#2 randnat) of True => randnat | False => 6)))))))","num_train":4},{"ios":[[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8, 9]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8]"]],"type":"(unit -> list)","name":"065","solution":"(letII (+ (+ (case (flip 0.6) of True => randnat | False => randnat) (case 5 of O => 9 | S => (λn -> 7))) (case (flip 0.5) of True => randnat | False => 6)) (λk -> (scanlunit (λacc x -> (letII 3 (λx -> (inc acc#3)))) 0 (inc (+ (inc randnat) randnat)))))","num_train":4},{"ios":[[["nothing"],"[9, 4, 0]"],[["nothing"],"[5, 8, 16, 6, 0, 0, 2, 2]"],[["nothing"],"[7, 0, 0, 0, 0]"],[["nothing"],"[7, 3, 3, 4, 27, 0, 5, 1, 6, 1, 10, 0, 0]"],[["nothing"],"[2, 5, 2]"],[["nothing"],"[4, 11, 6, 3, 2]"],[["nothing"],"[3, 0, 1, 0, 1, 6]"],[["nothing"],"[8, 0, 1, 3, 5]"]],"type":"(unit -> list)","name":"066","solution":"(letII (case (case 3 of O => 5 | S => (λn -> n#1)) of O => (case randnat of O => randnat | S => (λn -> n#1)) | S => (λn -> (inc n#1))) (λk -> (scanlunit (λacc x -> (letII (inc randnat) (λx -> (case (== (letII 9 (λx -> (case (flip 0.6) of True => randnat | False => acc#4))) randnat) of True => randnat | False => randnat)))) 0 (+ 3 randnat))))","num_train":4},{"ios":[[["nothing"],"[3, 6, 9, 12, 15, 18, 21]"],[["nothing"],"[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66]"],[["nothing"],"[3, 6, 9, 12, 15]"],[["nothing"],"[3, 6, 9, 12, 15]"],[["nothing"],"[3, 6, 9, 12, 15, 18]"],[["nothing"],"[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45]"],[["nothing"],"[3, 6]"],[["nothing"],"[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33]"]],"type":"(unit -> list)","name":"067","solution":"(letII (+ (+ 3 2) 8) (λk -> (scanlunit (λacc x -> (letII 1 (λx -> (+ (inc acc#3) (inc 1))))) 0 (letII (letII randnat (λx -> (inc x#1))) (λx -> (+ x#1 randnat))))))","num_train":4},{"ios":[[["nothing"],"[6, 12, 15, 24, 31, 37, 45, 48, 54]"],[["nothing"],"[18, 39, 42, 44, 47, 55, 57, 70, 72]"],[["nothing"],"[11, 16, 18, 21, 23, 27, 34, 38, 50]"],[["nothing"],"[2, 13, 17, 41, 47, 55, 64, 69, 74]"],[["nothing"],"[5, 10, 16, 31, 34, 38, 52, 57, 63]"],[["nothing"],"[9, 18, 24, 28, 31, 36, 41, 55, 61]"],[["nothing"],"[2, 7, 9, 19, 22, 24, 30, 32, 34]"],[["nothing"],"[9, 14, 26, 32, 49, 53, 55, 58, 69]"]],"type":"(unit -> list)","name":"068","solution":"(letII (case (flip 0.4) of True => (+ randnat randnat) | False => 0) (λk -> (scanlunit (λacc x -> (+ (letII randnat (λx -> (+ randnat acc#3))) 2)) 0 (letII randnat (λx -> (case (letII 1 (λx -> (inc k#3))) of O => randnat | S => (λn -> (case randnat of O => randnat | S => (λn -> 9)))))))))","num_train":4},{"ios":[[["nothing"],"[15, 21, 30, 33, 36, 37, 39]"],[["nothing"],"[0, 9, 10, 22, 27, 27, 31]"],[["nothing"],"[1, 8, 8, 14, 18, 18, 18]"],[["nothing"],"[1, 1, 2, 3, 3, 7, 9]"],[["nothing"],"[24, 24, 32, 54, 70, 73, 74]"],[["nothing"],"[2, 2, 7, 9, 11, 14, 25]"],[["nothing"],"[2, 6, 8, 35, 36, 38, 45]"],[["nothing"],"[0, 1, 4, 5, 17, 17, 17]"]],"type":"(unit -> list)","name":"069","solution":"(letII 6 (λk -> (scanlunit (λacc x -> (letII acc#2 (λx -> (+ randnat acc#3)))) 0 (inc (case (== randnat (- randnat randnat)) of True => (case (flip 0.5) of True => k#1 | False => k#1) | False => k#1)))))","num_train":4},{"ios":[[["nothing"],"[0, 3, 2, 0]"],[["nothing"],"[4, 0, 4, 0, 4, 0, 4, 0]"],[["nothing"],"[9, 0]"],[["nothing"],"[17, 0]"],[["nothing"],"[2, 0, 2, 0, 2, 0, 2, 0]"],[["nothing"],"[2, 0]"],[["nothing"],"[7, 0]"],[["nothing"],"[3, 5, 0, 19, 0, 21, 0, 2]"]],"type":"(unit -> list)","name":"070","solution":"(letII (letII (case (flip 0.5) of True => (- randnat 2) | False => randnat) (λx -> (case (flip 0.5) of True => randnat | False => (letII randnat (λx -> (case x#2 of O => randnat | S => (λn -> x#2))))))) (λk -> (scanlunit (λacc x -> (letII (case (flip 0.1) of True => k#3 | False => randnat) (λx -> (- (case k#4 of O => x#1 | S => (λn -> k#5)) acc#3)))) 0 (letII (inc 4) (λx -> (inc randnat))))))","num_train":4},{"ios":[[["nothing"],"[5, 0]"],[["nothing"],"[1, 5, 7, 7, 7, 7, 0]"],[["nothing"],"[2, 2, 7, 0]"],[["nothing"],"[8, 7, 2, 4, 17, 8, 0, 3]"],[["nothing"],"[9, 3, 0, 3, 3]"],[["nothing"],"[2, 1]"],[["nothing"],"[1, 11, 11, 1, 4, 0, 3, 1]"],[["nothing"],"[7, 5]"]],"type":"(unit -> list)","name":"071","solution":"(letII (inc 0) (λk -> (scanlunit (λacc x -> (letII (inc randnat) (λx -> (case (case acc#3 of O => x#1 | S => (λn -> k#5)) of O => randnat | S => (λn -> randnat))))) 0 randnat)))","num_train":4},{"ios":[[["nothing"],"[1, 2, 11, 12, 3, 4, 5, 6]"],[["nothing"],"[1, 1, 5, 6, 17, 3, 1, 17, 12, 4, 3, 6, 7, 8, 9, 9, 8]"],[["nothing"],"[1, 1, 1, 3, 4, 2, 5, 2, 10]"],[["nothing"],"[1, 3, 1, 2, 13, 11, 1, 2, 2, 3, 4, 1, 2, 2, 3, 1]"],[["nothing"],"[6, 7, 8, 12, 13, 2, 3, 3, 2, 3, 4, 1, 2, 1, 2, 3, 4, 5, 3, 12, 11, 12, 11]"],[["nothing"],"[1, 2, 6, 7, 8, 9, 10, 11]"],[["nothing"],"[1, 2, 1, 2, 1, 2, 3, 4, 5, 5]"],[["nothing"],"[4, 3, 4, 6, 7, 8, 4, 4, 3, 4, 4, 5, 6, 7, 10]"]],"type":"(unit -> list)","name":"072","solution":"(letII (inc 7) (λk -> (scanlunit (λacc x -> (inc (case (flip 0.5) of True => acc#2 | False => randnat))) 0 (case (flip 0.1) of True => (case (flip 0.3) of True => k#1 | False => randnat) | False => (letII randnat (λx -> (+ (case (flip 0.8) of True => randnat | False => randnat) k#2)))))))","num_train":4},{"ios":[[["nothing"],"[3, 0, 1, 3, 2, 0, 5, 0, 2, 0, 4, 1, 7, 17, 0]"],[["nothing"],"[6, 0, 2, 0, 18, 4, 5, 9, 2, 2, 0, 5, 1, 6, 1, 0, 3, 9, 3, 1, 11, 12, 3, 10, 2]"],[["nothing"],"[10, 5, 5, 4, 21, 17, 1, 9, 0, 7, 9, 0, 0]"],[["nothing"],"[0, 3, 3, 0, 2, 1, 0, 0, 11, 1, 3, 0, 2, 0, 0, 0, 0, 8, 4]"],[["nothing"],"[4, 5, 7, 0, 9, 0, 0, 0, 17, 2, 0, 0, 1, 0, 0, 2, 0, 1, 8]"],[["nothing"],"[6, 0, 4, 25, 1, 4, 2, 2, 2, 1, 6, 7, 0, 1, 0, 0, 0, 6, 0, 1, 28, 2, 0, 1]"],[["nothing"],"[10, 2, 0, 1, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 7, 0, 4, 3, 1, 0, 0, 0, 2, 0, 0]"],[["nothing"],"[4, 1, 1, 0, 4, 6, 0, 6, 6, 7, 8]"]],"type":"(unit -> list)","name":"073","solution":"(letII (inc (letII randnat (λx -> (+ 9 randnat)))) (λk -> (scanlunit (λacc x -> (- (case randnat of O => randnat | S => (λn -> randnat)) (letII acc#2 (λx -> (- randnat randnat))))) 0 (+ k#1 randnat))))","num_train":4},{"ios":[[["nothing"],"[0, 0, 0, 2, 0, 12, 4, 0, 0, 0]"],[["nothing"],"[0, 1, 1, 0, 1, 0, 17, 1, 2, 0]"],[["nothing"],"[0, 0, 0, 5, 0, 3, 0, 1, 3, 0]"],[["nothing"],"[0, 17, 6, 0, 0, 0, 0, 3, 3, 0]"],[["nothing"],"[3, 1, 0, 3, 3, 7, 0, 2, 0, 1]"],[["nothing"],"[0, 2, 0, 2, 1, 0, 0, 13, 4, 0]"],[["nothing"],"[0, 1, 0, 2, 17, 7, 6, 0, 13, 1]"],[["nothing"],"[0, 0, 16, 12, 0, 1, 2, 0, 3, 0]"]],"type":"(unit -> list)","name":"074","solution":"(letII 9 (λk -> (scanlunit (λacc x -> (letII (inc (- acc#2 randnat)) (λx -> (- randnat randnat)))) 0 (+ (inc 9) (- (- randnat randnat) (+ k#1 randnat))))))","num_train":4},{"ios":[[["nothing"],"[2, 5, 2, 1]"],[["nothing"],"[12, 2, 1, 11]"],[["nothing"],"[1, 17, 8, 2, 1, 5]"],[["nothing"],"[2, 1, 6, 14, 1, 2, 3, 11, 2, 3, 2, 3]"],[["nothing"],"[3, 3, 2]"],[["nothing"],"[1, 3, 15, 2, 7, 1, 9, 5, 1, 2, 3, 9]"],[["nothing"],"[4, 9, 1, 2, 6]"],[["nothing"],"[1, 1, 1, 2, 1]"]],"type":"(unit -> list)","name":"075","solution":"(letII (inc 3) (λk -> (scanlunit (λacc x -> (letII (letII 3 (λx -> (case (flip 0.8) of True => acc#3 | False => 7))) (λx -> (inc randnat)))) 0 (letII k#1 (λx -> (+ randnat randnat))))))","num_train":4},{"ios":[[["nothing"],"[1, 16, 4]"],[["nothing"],"[7, 2, 2]"],[["nothing"],"[2, 13, 3, 1, 0, 1, 5, 2, 1]"],[["nothing"],"[0, 1, 9, 2, 2, 3, 0, 3, 7, 2, 6, 3, 11, 1, 3]"],[["nothing"],"[6, 3, 11]"],[["nothing"],"[0, 1, 1, 3, 0, 0, 0, 0]"],[["nothing"],"[1, 0, 0, 9, 5, 4]"],[["nothing"],"[0, 16, 9, 9, 0, 6, 6]"]],"type":"(unit -> list)","name":"076","solution":"(letII (- randnat (inc randnat)) (λk -> (scanlunit (λacc x -> (letII (letII randnat (λx -> (+ randnat randnat))) (λx -> (case randnat of O => (case randnat of O => acc#3 | S => (λn -> randnat)) | S => (λn -> (case (flip 0.2) of True => n#1 | False => randnat)))))) 0 (inc (inc randnat)))))","num_train":4},{"ios":[[["nothing"],"[3, 0, 0, 1, 3, 14, 3, 0]"],[["nothing"],"[0, 1, 6, 4, 7, 10, 6, 2]"],[["nothing"],"[0, 2, 0, 2, 4, 0, 0]"],[["nothing"],"[0, 2, 0, 3, 3, 4, 0, 8, 1, 4]"],[["nothing"],"[1, 0, 5, 0, 4, 0, 3, 0]"],[["nothing"],"[6, 0, 0, 5, 5, 4, 3, 6]"],[["nothing"],"[5, 0, 0, 1, 8, 1, 2, 4]"],[["nothing"],"[6, 1, 3, 2, 2, 7]"]],"type":"(unit -> list)","name":"077","solution":"(letII 8 (λk -> (scanlunit (λacc x -> (case (flip 0.1) of True => (letII (- acc#2 randnat) (λx -> (case randnat of O => x#1 | S => (λn -> 0)))) | False => randnat)) 0 (case (flip 0.7) of True => k#1 | False => (+ randnat randnat)))))","num_train":4},{"ios":[[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8, 9]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8, 9]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8, 9]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"]],"type":"(unit -> list)","name":"078","solution":"(letII (+ 6 (case 3 of O => randnat | S => (λn -> n#1))) (λk -> (scanlunit (λacc x -> (case (inc randnat) of O => randnat | S => (λn -> (inc acc#3)))) 0 (+ (case (+ k#1 k#1) of O => k#1 | S => (λn -> randnat)) (inc k#1)))))","num_train":4},{"ios":[[["nothing"],"[7, 11, 10, 17, 15, 18, 24, 29, 28, 30, 30, 33, 34]"],[["nothing"],"[0, 0, 0, 1, 2]"],[["nothing"],"[4, 19, 17, 15, 14, 13, 13]"],[["nothing"],"[8, 6, 6, 4, 2, 0, 0, 17, 17, 17, 21, 22]"],[["nothing"],"[5, 6, 10, 8]"],[["nothing"],"[0, 0, 1, 1, 4, 2, 14, 12]"],[["nothing"],"[1, 3, 10, 11, 14, 11, 12, 16]"],[["nothing"],"[8, 13, 12, 15]"]],"type":"(unit -> list)","name":"079","solution":"(letII (inc (inc 2)) (λk -> (scanlunit (λacc x -> (letII (+ (inc acc#2) randnat) (λx -> (- (case (flip 0.9) of True => x#1 | False => (+ acc#3 (- randnat randnat))) 3)))) 0 (+ k#1 randnat))))","num_train":4},{"ios":[[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10]"],[["nothing"],"[1, 2, 9, 10, 9, 10, 11, 12]"],[["nothing"],"[9, 9, 10, 11]"],[["nothing"],"[1, 2, 9, 10, 11, 9, 10, 11, 9, 10, 9, 9, 10]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 9, 9]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8, 9]"],[["nothing"],"[1, 2, 9, 10, 11, 9, 10]"],[["nothing"],"[9, 10, 11, 12, 9, 10, 11, 12, 13, 14, 15]"]],"type":"(unit -> list)","name":"080","solution":"(letII (- randnat 0) (λk -> (scanlunit (λacc x -> (inc (case (flip 0.3) of True => 8 | False => acc#2))) 0 (+ (case (flip 0.5) of True => randnat | False => 8) (case (flip 0.8) of True => randnat | False => k#1)))))","num_train":4},{"ios":[[["nothing"],"[1, 0, 0, 0, 0]"],[["nothing"],"[0, 0, 6]"],[["nothing"],"[6, 3, 0, 0, 9]"],[["nothing"],"[0, 0, 1, 0, 0, 0, 2, 1, 5, 0]"],[["nothing"],"[5, 1, 0]"],[["nothing"],"[0, 0, 0, 0, 0, 0, 0, 5]"],[["nothing"],"[0, 0, 4, 0]"],[["nothing"],"[0, 0, 4, 0, 0, 1]"]],"type":"(unit -> list)","name":"081","solution":"(letII (inc (+ 4 randnat)) (λk -> (scanlunit (λacc x -> (- randnat (letII acc#2 (λx -> (case (flip 0.1) of True => randnat | False => (inc randnat)))))) 0 (inc (inc (inc randnat))))))","num_train":4},{"ios":[[["nothing"],"[4, 2, 20, 20, 9, 9]"],[["nothing"],"[3, 6, 2, 2, 0, 1]"],[["nothing"],"[2, 3, 1, 3, 5, 3]"],[["nothing"],"[3, 0, 5, 0, 0, 10]"],[["nothing"],"[8, 0, 0, 2, 2, 0]"],[["nothing"],"[0, 0, 12, 2, 13, 5, 4, 8, 1]"],[["nothing"],"[7, 4, 6, 1, 1, 5]"],[["nothing"],"[6, 11, 6, 4, 5, 5]"]],"type":"(unit -> list)","name":"082","solution":"(letII (case (inc 6) of O => 1 | S => (λn -> n#1)) (λk -> (scanlunit (λacc x -> (case randnat of O => (letII randnat (λx -> (case (flip 0.7) of True => acc#3 | False => 5))) | S => (λn -> randnat))) 0 (case (== randnat randnat) of True => 9 | False => k#1))))","num_train":4},{"ios":[[["nothing"],"[7, 4, 1, 1]"],[["nothing"],"[13, 4, 1, 9]"],[["nothing"],"[5, 17, 6, 4]"],[["nothing"],"[8, 3, 24, 5]"],[["nothing"],"[8, 6, 11, 13]"],[["nothing"],"[0, 6, 7, 4]"],[["nothing"],"[1, 2, 1, 2, 13]"],[["nothing"],"[10, 3, 3, 1]"]],"type":"(unit -> list)","name":"083","solution":"(letII (+ (inc (letII randnat (λx -> (case (flip 0.4) of True => x#1 | False => x#1)))) randnat) (λk -> (scanlunit (λacc x -> (case randnat of O => randnat | S => (λn -> (inc (case 1 of O => acc#3 | S => (λn -> randnat)))))) 0 (case randnat of O => (+ randnat 1) | S => (λn -> 4)))))","num_train":4},{"ios":[[["nothing"],"[1, 1, 1, 8, 1, 1, 1, 1, 1, 8]"],[["nothing"],"[1, 1, 8, 1, 8, 1, 1, 1, 1]"],[["nothing"],"[1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1]"],[["nothing"],"[1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1]"],[["nothing"],"[1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1]"],[["nothing"],"[1, 8, 1, 1, 1, 1, 1, 1, 1]"],[["nothing"],"[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8]"],[["nothing"],"[1, 1, 1, 8, 1, 1, 8, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 8, 1, 1, 8, 1, 1, 8, 1, 1, 1, 1, 1]"]],"type":"(unit -> list)","name":"084","solution":"(letII randnat (λk -> (scanlunit (λacc x -> (letII k#3 (λx -> (case (== acc#3 randnat) of True => 8 | False => 1)))) 0 (+ k#1 (inc 8)))))","num_train":4},{"ios":[[["nothing"],"[16, 16, 16, 21, 30, 36, 37, 43, 47, 51, 62, 64, 75]"],[["nothing"],"[2, 3, 10, 16]"],[["nothing"],"[3, 3, 3, 4, 4, 10, 10, 10, 11, 24, 28, 35]"],[["nothing"],"[2, 2, 16, 29, 32, 37, 42, 43, 43]"],[["nothing"],"[0, 0, 21, 23, 23, 24, 27, 27, 27, 33, 35, 43, 43, 43]"],[["nothing"],"[6, 6, 7, 18, 19, 19]"],[["nothing"],"[5, 15, 18, 18, 18, 18, 32, 36, 39, 41]"],[["nothing"],"[10, 12, 18, 20, 26]"]],"type":"(unit -> list)","name":"085","solution":"(letII randnat (λk -> (scanlunit (λacc x -> (+ randnat acc#2)) 0 (+ 3 (inc randnat)))))","num_train":4},{"ios":[[["nothing"],"[6, 0, 6, 0, 6, 0]"],[["nothing"],"[6, 0, 6, 0, 6, 0]"],[["nothing"],"[6, 0, 6, 0, 6, 0]"],[["nothing"],"[6, 0, 6, 0, 6, 0]"],[["nothing"],"[6, 0, 6, 0, 6, 0]"],[["nothing"],"[6, 0, 6, 0, 6, 0]"],[["nothing"],"[6, 0, 6, 0, 6, 0]"],[["nothing"],"[6, 0, 6, 0, 6, 0]"]],"type":"(unit -> list)","name":"086","solution":"(letII 6 (λk -> (scanlunit (λacc x -> (- k#3 acc#2)) 0 k#1)))","num_train":4},{"ios":[[["nothing"],"[4, 7, 8, 0, 6, 2]"],[["nothing"],"[0, 0, 2, 0, 0, 0, 2, 24, 0, 0, 4, 6, 2, 3, 2]"],[["nothing"],"[0, 3, 1, 0, 2, 0, 3, 4, 2, 9, 1, 0]"],[["nothing"],"[1, 2, 11, 14, 0, 0, 3, 8, 12]"],[["nothing"],"[5, 4, 0, 7, 11, 2, 4, 0, 6, 0, 9, 1, 12, 0, 20, 9, 0]"],[["nothing"],"[0, 1, 2, 1, 22, 3, 4, 9, 5, 3, 1, 0]"],[["nothing"],"[1, 8, 0, 2, 4, 1, 7]"],[["nothing"],"[3, 0, 3, 9, 2, 4, 0]"]],"type":"(unit -> list)","name":"087","solution":"(letII (inc 0) (λk -> (scanlunit (λacc x -> (- (inc (letII k#3 (λx -> (+ x#1 randnat)))) (case (iseven acc#2) of True => randnat | False => randnat))) 0 (letII (case (case (flip 0.9) of True => k#1 | False => randnat) of O => randnat | S => (λn -> 6)) (λx -> (+ randnat x#1))))))","num_train":4},{"ios":[[["nothing"],"[1, 3, 7, 15]"],[["nothing"],"[1, 3, 7, 15]"],[["nothing"],"[1, 3, 7, 15]"],[["nothing"],"[1, 3, 7, 15]"],[["nothing"],"[1, 3, 7, 15]"],[["nothing"],"[1, 3, 7, 15]"],[["nothing"],"[1, 3, 7, 15]"],[["nothing"],"[1, 3, 7, 15]"]],"type":"(unit -> list)","name":"088","solution":"(letII (+ 5 5) (λk -> (scanlunit (λacc x -> (+ acc#2 (letII 3 (λx -> (inc acc#3))))) 0 (case (flip 0.9) of True => 4 | False => k#1))))","num_train":4},{"ios":[[["nothing"],"[0, 0, 0, 0, 5, 1, 7, 0, 6]"],[["nothing"],"[0, 0, 5, 8, 2, 13]"],[["nothing"],"[7, 2, 1, 1, 1, 6, 6, 0]"],[["nothing"],"[0, 0, 17, 2, 0, 1, 3]"],[["nothing"],"[0, 3]"],[["nothing"],"[4, 2, 0, 2, 6, 0]"],[["nothing"],"[0, 0, 3]"],[["nothing"],"[0, 1, 5, 6, 6, 6]"]],"type":"(unit -> list)","name":"089","solution":"(letII (letII 0 (λx -> (inc randnat))) (λk -> (scanlunit (λacc x -> (case (== k#3 randnat) of True => acc#2 | False => randnat)) 0 (inc k#1))))","num_train":4},{"ios":[[["nothing"],"[9, 4, 6, 3, 8, 1, 8, 1, 8, 0, 9, 0, 9]"],[["nothing"],"[6, 3, 6, 3, 6, 0, 9, 0, 9, 0]"],[["nothing"],"[9, 0, 9, 0, 9, 0]"],[["nothing"],"[0, 9, 0, 9, 8, 1, 8, 1, 7]"],[["nothing"],"[9, 0]"],[["nothing"],"[9, 0, 9, 0, 9, 2, 7]"],[["nothing"],"[3, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 9]"],[["nothing"],"[6, 3, 6, 3, 6, 3, 4, 5, 4]"]],"type":"(unit -> list)","name":"090","solution":"(letII 8 (λk -> (scanlunit (λacc x -> (- (inc k#3) (case (flip 0.2) of True => randnat | False => acc#2))) 0 (case (flip 0.6) of True => (case randnat of O => randnat | S => (λn -> n#1)) | False => (letII k#1 (λx -> (+ randnat x#1)))))))","num_train":4},{"ios":[[["nothing"],"[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56]"],[["nothing"],"[4, 8, 12, 16, 20, 24, 28, 32]"],[["nothing"],"[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48]"],[["nothing"],"[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56]"],[["nothing"],"[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52]"],[["nothing"],"[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52]"],[["nothing"],"[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56]"],[["nothing"],"[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44]"]],"type":"(unit -> list)","name":"091","solution":"(letII (+ (case (flip 0.2) of True => 5 | False => 9) (letII randnat (λx -> (inc x#1)))) (λk -> (scanlunit (λacc x -> (+ 4 acc#2)) 0 (inc k#1))))","num_train":4},{"ios":[[["nothing"],"[3, 10, 17, 21, 33, 40, 56, 62, 67]"],[["nothing"],"[8, 10, 12, 12, 21, 35, 45, 56, 70]"],[["nothing"],"[10, 16, 30, 42, 49, 61, 68, 73, 91]"],[["nothing"],"[4, 31, 35]"],[["nothing"],"[1, 11, 16, 29, 37, 39, 48, 54, 55]"],[["nothing"],"[5, 5, 10, 22, 27, 31, 33, 38, 47]"],[["nothing"],"[18, 30, 45, 46, 51, 51, 51, 56, 70]"],[["nothing"],"[8, 9, 16, 19, 23, 36, 44, 51, 61]"]],"type":"(unit -> list)","name":"092","solution":"(letII (inc 8) (λk -> (scanlunit (λacc x -> (+ randnat (+ randnat acc#2))) 0 (case (flip 0.7) of True => k#1 | False => (case randnat of O => 2 | S => (λn -> n#1))))))","num_train":4},{"ios":[[["nothing"],"[0, 0, 2, 4, 1, 9]"],[["nothing"],"[6, 0, 5, 0, 6, 3]"],[["nothing"],"[0, 0, 12, 0, 6, 0]"],[["nothing"],"[0, 1, 0, 25, 0, 4]"],[["nothing"],"[0, 8, 0, 3, 0, 5]"],[["nothing"],"[3, 9, 0, 0, 0, 16]"],[["nothing"],"[3, 8, 0, 19, 0, 4]"],[["nothing"],"[0, 1, 0, 0, 4, 4]"]],"type":"(unit -> list)","name":"093","solution":"(letII (case 0 of O => 6 | S => (λn -> n#1)) (λk -> (scanlunit (λacc x -> (- randnat acc#2)) 0 k#1)))","num_train":4},{"ios":[[["nothing"],"[11, 12, 15, 22]"],[["nothing"],"[10, 12, 18, 21, 24, 24]"],[["nothing"],"[1, 7, 9, 10, 12, 14, 16, 18]"],[["nothing"],"[2, 8, 17, 23, 25, 25, 30, 31, 36]"],[["nothing"],"[2, 8, 8, 12, 12, 13, 14, 19, 25, 29]"],[["nothing"],"[7, 7, 8, 9, 9, 9, 9, 11, 11, 18]"],[["nothing"],"[6, 22]"],[["nothing"],"[1, 6, 19, 19, 20, 23, 44]"]],"type":"(unit -> list)","name":"094","solution":"(letII (case (== randnat (letII 0 (λx -> (- x#1 x#1)))) of True => (case (flip 0.8) of True => randnat | False => randnat) | False => 0) (λk -> (scanlunit (λacc x -> (+ randnat acc#2)) 0 (letII k#1 (λx -> (+ randnat (inc randnat)))))))","num_train":4},{"ios":[[["nothing"],"[11, 13, 19, 22, 26, 27]"],[["nothing"],"[4, 6, 16, 17, 28, 35, 47, 50, 51, 62, 78, 83, 85, 94, 99, 102, 114]"],[["nothing"],"[2, 19, 26, 26, 27, 29, 33, 48, 66, 77, 83]"],[["nothing"],"[3, 9, 16, 22, 22, 25, 36, 38, 48, 53, 73, 75, 82, 91, 100, 110, 113, 127, 136, 153, 156, 170, 170]"],[["nothing"],"[2, 16, 21, 39]"],[["nothing"],"[5, 13, 22, 39, 50, 61, 68, 73, 78, 82, 103, 130, 135, 144, 147, 151, 155, 155, 156]"],[["nothing"],"[7, 8, 9, 9]"],[["nothing"],"[16, 16, 25, 28, 29, 36, 49, 58, 80, 82, 86, 105, 112]"]],"type":"(unit -> list)","name":"095","solution":"(letII (inc (inc randnat)) (λk -> (scanlunit (λacc x -> (+ acc#2 (letII randnat (λx -> (+ randnat randnat))))) 0 (+ randnat (letII 2 (λx -> (+ randnat k#2)))))))","num_train":4},{"ios":[[["nothing"],"[0, 1, 7, 4, 0, 1, 0, 1, 4, 1, 1, 5, 18, 2, 4, 2, 1, 4, 9]"],[["nothing"],"[2, 3, 0, 1]"],[["nothing"],"[5, 1, 11]"],[["nothing"],"[4, 1, 10, 5, 1, 2, 9, 2, 0, 0, 2, 3, 5, 1, 4, 2, 7, 6, 8, 1, 1, 1, 8, 2, 3, 2, 0, 7, 0, 6, 0]"],[["nothing"],"[3, 7, 0, 3, 0, 2, 2, 2, 0, 5, 0, 7, 0, 17, 5]"],[["nothing"],"[19, 2, 2, 3, 16, 3, 1, 3, 6, 5, 4, 19, 8, 2, 2, 1, 2, 4, 2, 5, 13, 2, 1, 7, 2]"],[["nothing"],"[1, 8, 2, 3]"],[["nothing"],"[0, 3, 0, 0, 6, 3, 4]"]],"type":"(unit -> list)","name":"096","solution":"(letII (case (flip 0.1) of True => (case (flip 0.3) of True => 6 | False => 1) | False => randnat) (λk -> (scanlunit (λacc x -> (case acc#2 of O => randnat | S => (λn -> randnat))) 0 (+ k#1 (letII k#1 (λx -> (+ x#1 randnat)))))))","num_train":4},{"ios":[[["nothing"],"[6, 0, 6]"],[["nothing"],"[6, 0, 6, 0, 6]"],[["nothing"],"[6, 0, 6, 0, 6, 0]"],[["nothing"],"[6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6]"],[["nothing"],"[6, 0, 6, 0]"],[["nothing"],"[6, 0, 6, 0, 6, 0, 6, 0, 6, 0]"],[["nothing"],"[6, 0]"],[["nothing"],"[6, 0]"]],"type":"(unit -> list)","name":"097","solution":"(letII (inc randnat) (λk -> (scanlunit (λacc x -> (- 6 (- acc#2 0))) 0 k#1)))","num_train":4},{"ios":[[["nothing"],"[0, 2, 3, 6, 2, 0, 0]"],[["nothing"],"[0, 2, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 1]"],[["nothing"],"[0, 0, 2, 12, 0, 0, 0, 0, 3, 2, 0, 0, 3, 8, 5, 0, 1, 0, 0, 3, 0, 0, 5, 0, 0, 6]"],[["nothing"],"[4, 0, 0, 0, 0, 0, 0, 0, 1, 8, 5, 0, 4, 1, 0, 4, 1]"],[["nothing"],"[0, 0, 0, 2, 6, 0, 0, 2, 0, 0, 0, 8, 2, 18, 0]"],[["nothing"],"[6, 5]"],[["nothing"],"[0, 6, 1]"],[["nothing"],"[0, 0, 0, 0, 0, 0, 0, 1]"]],"type":"(unit -> list)","name":"098","solution":"(letII (case (case 7 of O => randnat | S => (λn -> randnat)) of O => randnat | S => (λn -> (+ randnat randnat))) (λk -> (scanlunit (λacc x -> (case 9 of O => acc#2 | S => (λn -> (- randnat randnat)))) 0 (inc (+ randnat randnat)))))","num_train":4},{"ios":[[["nothing"],"[3, 5, 10, 0, 14, 0, 7, 7, 8, 9, 8, 8, 21, 12, 6, 3, 5, 2, 8, 4, 3, 6, 5, 2, 13, 14, 4]"],[["nothing"],"[9, 0, 4, 3, 5, 1, 34, 3, 8, 3, 7, 0, 7, 3, 9, 0, 6, 0, 24, 18, 21, 34, 42, 0, 8, 9, 9, 0, 20, 0, 12, 1, 9, 0, 9, 4, 5, 9, 0, 2, 11, 11, 4]"],[["nothing"],"[9, 17, 1, 8]"],[["nothing"],"[8, 0, 2, 19, 0, 10, 8, 3, 0, 10, 0, 0, 2, 4, 5, 8, 0, 6, 6, 11, 0, 6, 6, 1, 16, 3, 6, 10, 0, 4, 6]"],[["nothing"],"[6, 7, 10, 0, 15, 9, 1, 4, 0, 12, 8, 2, 7, 7, 2]"],[["nothing"],"[3, 8, 1, 6, 0, 7, 1, 0, 0, 6, 0, 21, 26, 8, 0, 9, 0, 9, 12, 0, 6, 9, 6, 10, 14, 0, 0, 8, 0, 9, 0, 1, 13, 9, 13, 0, 8, 7, 6, 1, 5, 4, 4, 26, 3, 7, 12, 0, 6]"],[["nothing"],"[43, 6, 10, 8, 11, 0, 10, 0, 9, 3, 10]"],[["nothing"],"[7, 12, 2, 6, 4, 5, 11, 0, 8, 20, 2, 3, 4, 0, 13, 15, 0, 17, 0]"]],"type":"(unit -> list)","name":"099","solution":"(letII (letII 9 (λx -> (case x#1 of O => (- randnat x#1) | S => (λn -> randnat)))) (λk -> (scanlunit (λacc x -> (- (letII 2 (λx -> (+ randnat (case randnat of O => acc#3 | S => (λn -> 6))))) (case (flip 0.5) of True => randnat | False => acc#2))) 0 (inc (letII randnat (λx -> (+ k#2 (+ k#2 randnat))))))))","num_train":4}],"task_info":[{"q_expr":-54.054308294899876,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-20.635931943641438,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":4},{"q_expr":-44.37708039367856,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-25.503466394097025,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":4},{"q_expr":-61.9369662082241,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-52.18262701419483,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-70.96350463823589,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-25.24110212962953,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":4},{"q_expr":-28.093733559542848,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":4},{"q_expr":-45.60325490598817,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":7},{"q_expr":-66.60516009671613,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-44.21002630901539,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-57.93407925649083,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-19.528749704290263,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":3},{"q_expr":-45.11646832515485,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-46.203735238757226,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-47.38419313658465,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-48.23437849941746,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-57.310924447750914,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-17.412932401589376,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":2},{"q_expr":-69.82715202158494,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-28.441357667961164,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":5},{"q_expr":-39.668352593518414,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-34.79649280576017,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":7},{"q_expr":-20.83660263910359,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":4},{"q_expr":-57.49087382039983,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-50.85689770870048,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-52.21475816183546,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-22.485261264690976,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":3},{"q_expr":-61.27221850218585,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-58.43200959227109,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-21.935214927771696,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":4},{"q_expr":-35.1892642460014,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-26.6948150583056,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":7},{"q_expr":-43.15048448182873,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-63.63045472730696,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-39.157526969752425,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":5},{"q_expr":-28.722342218965217,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":5},{"q_expr":-52.3803318613282,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-23.095520785445153,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":4},{"q_expr":-35.349384094811676,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-58.86042032421849,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-67.75467914922119,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-48.64677784337852,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-14.522560643693211,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":2},{"q_expr":-58.779013049583156,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-59.44941622642266,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-45.1628944220294,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":7},{"q_expr":-39.70582177363289,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":5},{"q_expr":-57.263133783914576,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-59.21809476849031,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-21.18597828056071,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":4},{"q_expr":-57.894858543337556,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-40.52707347357109,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":7},{"q_expr":-59.55504788994886,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-43.90295304724896,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-45.88263817562527,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-39.40726709410256,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-15.228130344251714,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":3},{"q_expr":-64.62402393864467,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-28.403888487846686,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":5},{"q_expr":-55.09122701456264,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-37.96597668542505,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-32.74770202655055,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-50.83543247003167,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-63.25101690957543,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-66.77817523351212,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-55.19818881158744,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-59.35707189494712,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-39.22159272290282,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":7},{"q_expr":-74.51313581802464,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-30.47327969367302,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":5},{"q_expr":-48.434576426892434,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-36.52803909115332,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":7},{"q_expr":-48.13209965029704,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-37.40483796200582,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":5},{"q_expr":-46.94339431810189,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-43.15893353631526,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-51.22590125387742,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-58.789955184411276,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-45.0885767129067,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":7},{"q_expr":-40.63507732124235,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-48.53729361053683,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":7},{"q_expr":-56.63787793889798,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-36.171573884183566,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":5},{"q_expr":-20.3358273511911,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":4},{"q_expr":-12.66466137196061,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":2},{"q_expr":-59.700520917734586,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-37.9465854961104,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":5},{"q_expr":-25.087950950135358,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":5},{"q_expr":-42.815161997212435,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":7},{"q_expr":-36.79040335562081,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-35.267976820176344,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-18.67859877492065,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":3},{"q_expr":-46.6779139536338,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-35.83489191059338,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":7},{"q_expr":-38.659123865984995,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-24.367113777446065,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":4},{"q_expr":-42.16595291117335,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-66.13975295264143,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10}],"path":"out/fuzz-datasets/2024-11-13/04-07-20/dataset.json"}