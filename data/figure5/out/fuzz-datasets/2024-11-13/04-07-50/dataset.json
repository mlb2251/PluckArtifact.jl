{"task_dist":{"input_dist":"(Unit)","input_type":"unit","grammar":"PCFG:\n  ?lets -> (letII ?int (λk -> (map (λstate -> ?int) (scanlunit (λacc x -> ?int) 0 ?int)))) [1.0]\n  ?int -> randnat [0.4] | #int [0.3-0.0] | 0 [0.008-0.04] | 1 [0.008-0.04] | 2 [0.008-0.04] | 3 [0.008-0.04] | 4 [0.008-0.04] | 5 [0.008-0.04] | 6 [0.008-0.04] | 7 [0.008-0.04] | 8 [0.008-0.04] | 9 [0.008-0.04] | (letII ?int (λx -> (inc ?int))) [0.01] | (letII ?int (λx -> (+ ?int ?int))) [0.01] | (letII ?int (λx -> (- ?int ?int))) [0.01] | (letII ?int (λx -> (case ?int of O => ?int | S => (λn -> ?int)))) [0.01] | (letII ?int (λx -> (case ?bool of True => ?int | False => ?int))) [0.01] | (inc ?int) [0.04] | (+ ?int ?int) [0.04] | (- ?int ?int) [0.04] | (case ?int of O => ?int | S => (λn -> ?int)) [0.04] | (case ?bool of True => ?int | False => ?int) [0.04]\n  ?bool -> #bool [0.08-0.0] | (flip 0.1) [0.08-0.09] | (flip 0.2) [0.08-0.09] | (flip 0.3) [0.08-0.09] | (flip 0.4) [0.08-0.09] | (flip 0.5) [0.08-0.09] | (flip 0.6) [0.08-0.09] | (flip 0.7) [0.08-0.09] | (flip 0.8) [0.08-0.09] | (flip 0.9) [0.08-0.09] | (iseven ?int) [0.07] | (== ?int ?int) [0.07] | (> ?int ?int) [0.07]\n","output_type":"list"},"tasks":[{"ios":[[["nothing"],"[1, 3, 0, 4]"],[["nothing"],"[1, 2, 11, 4]"],[["nothing"],"[1, 2, 3, 4]"],[["nothing"],"[1, 2, 0, 7]"],[["nothing"],"[1, 2, 3, 4]"],[["nothing"],"[1, 2, 3, 4]"],[["nothing"],"[1, 2, 3, 4]"],[["nothing"],"[1, 2, 3, 4]"]],"type":"(unit -> list)","name":"000","solution":"(letII 4 (λk -> (map (λstate -> (case (flip 0.8) of True => state#1 | False => randnat)) (scanlunit (λacc x -> (inc acc#2)) 0 (case (flip 0.3) of True => k#1 | False => k#1)))))","num_train":4},{"ios":[[["nothing"],"[13, 3, 6, 9, 15, 12, 17, 1]"],[["nothing"],"[3, 5, 16, 1, 12, 7, 5, 26]"],[["nothing"],"[14, 10, 4, 4, 7, 6, 0, 11]"],[["nothing"],"[0, 25, 11, 8, 0, 2, 3, 2]"],[["nothing"],"[3, 10, 4, 2, 8, 24, 15, 2]"],[["nothing"],"[2, 6, 2, 1, 5, 9, 10, 10]"],[["nothing"],"[8, 9, 3, 11, 16, 6, 23, 9]"],[["nothing"],"[6, 9, 3, 2, 9, 8, 0, 10]"]],"type":"(unit -> list)","name":"001","solution":"(letII (+ randnat 5) (λk -> (map (λstate -> state#1) (scanlunit (λacc x -> (letII acc#2 (λx -> (+ randnat randnat)))) 0 8))))","num_train":4},{"ios":[[["nothing"],"[0, 5, 8, 5, 9, 1, 3, 0, 0, 4, 0, 1, 14, 14, 7]"],[["nothing"],"[1, 2, 5]"],[["nothing"],"[3, 0]"],[["nothing"],"[1, 6, 1, 3, 1, 9, 2, 5]"],[["nothing"],"[0, 4, 5, 0, 3, 4, 3, 5, 1, 1]"],[["nothing"],"[2, 3, 0]"],[["nothing"],"[0, 4, 7, 0, 7, 1, 5, 10]"],[["nothing"],"[2, 17, 2]"]],"type":"(unit -> list)","name":"002","solution":"(letII (inc (inc randnat)) (λk -> (map (λstate -> (letII k#2 (λx -> (case k#3 of O => state#2 | S => (λn -> randnat))))) (scanlunit (λacc x -> (case acc#2 of O => randnat | S => (λn -> 9))) 0 (+ (- randnat (letII k#1 (λx -> (- x#1 x#1)))) (case randnat of O => randnat | S => (λn -> randnat)))))))","num_train":4},{"ios":[[["nothing"],"[0, 9, 0, 9, 0, 9, 0, 9]"],[["nothing"],"[0, 9, 9, 0, 0, 0, 9, 0]"],[["nothing"],"[9, 9, 0, 0, 0, 0, 9, 9]"],[["nothing"],"[0, 0, 0, 9, 0, 9, 9, 9]"],[["nothing"],"[9, 0, 0, 0, 9, 9, 9, 0]"],[["nothing"],"[0, 0, 0, 9, 0, 0, 0, 0]"],[["nothing"],"[9, 0, 9, 9, 0, 9, 9, 0]"],[["nothing"],"[0, 9, 0, 9, 0, 9, 9, 9]"]],"type":"(unit -> list)","name":"003","solution":"(letII (case 9 of O => 3 | S => (λn -> (inc n#1))) (λk -> (map (λstate -> (case (case (flip 0.5) of True => randnat | False => (case state#1 of O => state#1 | S => (λn -> n#1))) of O => (- state#1 randnat) | S => (λn -> k#3))) (scanlunit (λacc x -> acc#2) 0 (case k#1 of O => (letII randnat (λx -> (- k#2 randnat))) | S => (λn -> n#1))))))","num_train":4},{"ios":[[["nothing"],"[3, 5, 1, 4, 0, 3, 5, 1, 3, 8, 1, 8, 5, 2, 3, 7, 5, 11]"],[["nothing"],"[16, 46, 14, 15, 14, 28, 15, 15, 21, 15, 14, 26, 0, 6, 15, 21, 51, 7]"],[["nothing"],"[11, 13, 17, 13, 7, 5, 16, 14, 7, 9, 20, 7, 14, 7, 23, 7, 9, 10]"],[["nothing"],"[1, 12, 14, 16, 0, 2, 27, 6, 0, 2, 1, 9, 5, 4, 4, 3, 1, 1]"],[["nothing"],"[19, 13, 13, 12, 9, 18, 13, 13, 26, 9, 10, 17, 12, 26, 11, 12, 5, 4]"],[["nothing"],"[1, 0, 13, 4, 18, 0, 0, 3, 1, 1, 1, 6, 11, 1, 0, 2, 6, 1]"],[["nothing"],"[8, 7, 7, 13, 28, 8, 7, 8, 19, 7, 26, 17, 7, 6, 4, 9, 6, 28]"],[["nothing"],"[16, 17, 13, 9, 10, 11, 13, 18, 10, 16, 12, 9, 21, 13, 39, 12, 11, 19]"]],"type":"(unit -> list)","name":"004","solution":"(letII (case (inc randnat) of O => randnat | S => (λn -> n#1)) (λk -> (map (λstate -> (case state#1 of O => randnat | S => (λn -> n#1))) (scanlunit (λacc x -> (+ (case (flip 0.9) of True => randnat | False => (+ k#3 acc#2)) (letII randnat (λx -> (case randnat of O => randnat | S => (λn -> k#5)))))) 0 (letII 9 (λx -> (+ x#1 x#1)))))))","num_train":4},{"ios":[[["nothing"],"[5, 7, 7, 4, 7, 2, 0, 8, 2, 0, 8, 2, 0, 7, 6, 0, 2, 4, 0, 7, 4, 7, 0, 6, 0, 6, 0, 7, 7, 8, 0, 5, 7, 8]"],[["nothing"],"[7, 0, 6, 8, 6]"],[["nothing"],"[7, 8, 5, 3, 0, 3, 0, 0, 0, 0, 1, 8, 8]"],[["nothing"],"[5, 0, 7, 0]"],[["nothing"],"[7, 1, 5, 7, 7, 0, 3, 7]"],[["nothing"],"[3, 7, 8, 7, 1, 8]"],[["nothing"],"[6, 7, 6, 8, 3, 8, 7, 7, 8, 4, 5, 4, 0, 6, 5, 0, 6]"],[["nothing"],"[7, 8, 0, 6, 0, 7, 8, 7]"]],"type":"(unit -> list)","name":"005","solution":"(letII (inc (inc randnat)) (λk -> (map (λstate -> (letII (+ randnat state#1) (λx -> (- 8 randnat)))) (scanlunit (λacc x -> (letII randnat (λx -> (case (+ acc#3 randnat) of O => x#1 | S => (λn -> acc#4))))) 0 (letII k#1 (λx -> (+ 4 randnat)))))))","num_train":4},{"ios":[[["nothing"],"[0, 11]"],[["nothing"],"[0, 3]"],[["nothing"],"[1, 5, 0]"],[["nothing"],"[15, 3]"],[["nothing"],"[4, 6]"],[["nothing"],"[10, 0]"],[["nothing"],"[2, 6]"],[["nothing"],"[3, 0]"]],"type":"(unit -> list)","name":"006","solution":"(letII (case (iseven randnat) of True => 1 | False => randnat) (λk -> (map (λstate -> (letII (letII randnat (λx -> (+ state#2 randnat))) (λx -> (case (> randnat randnat) of True => randnat | False => (case (flip 0.6) of True => randnat | False => randnat))))) (scanlunit (λacc x -> (letII acc#2 (λx -> (- (letII acc#3 (λx -> (+ randnat randnat))) k#4)))) 0 (inc k#1)))))","num_train":4},{"ios":[[["nothing"],"[3, 3, 2]"],[["nothing"],"[0, 0, 9]"],[["nothing"],"[5, 0, 3]"],[["nothing"],"[1, 13, 10]"],[["nothing"],"[1, 1, 10]"],[["nothing"],"[4, 6, 16, 5, 7, 4]"],[["nothing"],"[5, 7, 1]"],[["nothing"],"[0, 4, 3]"]],"type":"(unit -> list)","name":"007","solution":"(letII (+ (case (flip 0.1) of True => 3 | False => 7) (case 4 of O => 4 | S => (λn -> randnat))) (λk -> (map (λstate -> (letII k#2 (λx -> (case (+ 4 (- 0 state#2)) of O => randnat | S => (λn -> randnat))))) (scanlunit (λacc x -> (case (flip 0.5) of True => acc#2 | False => randnat)) 0 (case (> randnat k#1) of True => k#1 | False => 3)))))","num_train":4},{"ios":[[["nothing"],"[0, 0, 12, 5, 2, 4]"],[["nothing"],"[2, 0, 5, 0, 1, 0]"],[["nothing"],"[2, 0, 9, 4, 0, 1]"],[["nothing"],"[5, 8, 0, 0, 0, 0]"],[["nothing"],"[12, 1, 11, 0, 0, 1]"],[["nothing"],"[0, 4, 0, 3, 0, 7]"],[["nothing"],"[0, 1, 10, 1, 2, 3]"],[["nothing"],"[10, 2, 1, 0, 0, 0]"]],"type":"(unit -> list)","name":"008","solution":"(letII 8 (λk -> (map (λstate -> (case randnat of O => state#1 | S => (λn -> randnat))) (scanlunit (λacc x -> acc#2) 0 6))))","num_train":4},{"ios":[[["nothing"],"[9, 8]"],[["nothing"],"[1, 3, 4, 0, 15, 27]"],[["nothing"],"[0, 2]"],[["nothing"],"[31, 0, 6, 13, 5, 6, 12, 0, 2, 9, 8]"],[["nothing"],"[1, 5, 0, 0, 3]"],[["nothing"],"[5, 12, 3, 4, 0, 3, 4, 0, 0, 0, 4, 7]"],[["nothing"],"[5, 4, 2, 0, 3, 0, 1, 3, 5, 2, 3, 0]"],[["nothing"],"[20, 2, 6]"]],"type":"(unit -> list)","name":"009","solution":"(letII (- (inc 8) 8) (λk -> (map (λstate -> (- randnat state#1)) (scanlunit (λacc x -> (- k#3 (letII acc#2 (λx -> (+ k#4 randnat))))) 0 (letII (inc randnat) (λx -> (+ randnat 2)))))))","num_train":4},{"ios":[[["nothing"],"[5, 9, 3, 10]"],[["nothing"],"[0, 0, 12, 2]"],[["nothing"],"[12, 8, 8, 0]"],[["nothing"],"[1, 0, 0, 0]"],[["nothing"],"[2, 2, 1, 8]"],[["nothing"],"[8, 1, 2, 0]"],[["nothing"],"[8, 3, 5, 3]"],[["nothing"],"[1, 2, 12, 2]"]],"type":"(unit -> list)","name":"010","solution":"(letII (case (flip 0.5) of True => 8 | False => randnat) (λk -> (map (λstate -> (case state#1 of O => state#1 | S => (λn -> randnat))) (scanlunit (λacc x -> (inc (letII k#3 (λx -> (- (case randnat of O => randnat | S => (λn -> acc#4)) k#4))))) 0 4))))","num_train":4},{"ios":[[["nothing"],"[7, 15, 23, 31, 39, 47, 55, 63, 71, 79, 87, 95, 103]"],[["nothing"],"[7, 15, 23, 31, 39, 47, 55, 63, 71, 79, 87]"],[["nothing"],"[7, 15, 23, 31, 39, 47, 55, 63, 71, 79, 87, 95, 103]"],[["nothing"],"[7, 15, 23, 31, 39, 47, 55, 63, 71, 79, 87, 95, 103, 111]"],[["nothing"],"[7, 15, 23, 31, 39, 47, 55, 63, 71, 79, 87, 95, 103, 111, 119]"],[["nothing"],"[7, 15, 23, 31, 39, 47, 55, 63, 71, 79, 87, 95, 103]"],[["nothing"],"[7, 15, 23, 31, 39, 47, 55, 63, 71, 79, 87, 95, 103, 111, 119, 127, 135, 143, 151, 159, 167, 175, 183, 191, 199, 207, 215, 223, 231, 239, 247, 255, 263, 271, 279, 287]"],[["nothing"],"[7, 15, 23, 31, 39, 47, 55, 63, 71, 79, 87, 95, 103]"]],"type":"(unit -> list)","name":"011","solution":"(letII 8 (λk -> (map (λstate -> (case state#1 of O => k#2 | S => (λn -> n#1))) (scanlunit (λacc x -> (+ k#3 acc#2)) 0 (inc (letII randnat (λx -> (+ randnat 9))))))))","num_train":4},{"ios":[[["nothing"],"[8, 10]"],[["nothing"],"[17, 8, 4, 16, 5, 6, 7, 12, 3]"],[["nothing"],"[9, 3, 14, 8, 9, 6, 4, 16, 4, 9, 22, 3]"],[["nothing"],"[16, 3]"],[["nothing"],"[16, 4, 4]"],[["nothing"],"[31, 13, 8, 6, 7, 6, 14]"],[["nothing"],"[8, 4, 14, 6, 8]"],[["nothing"],"[10, 4, 6]"]],"type":"(unit -> list)","name":"012","solution":"(letII (+ (inc randnat) 2) (λk -> (map (λstate -> (inc (+ randnat (letII state#1 (λx -> (inc randnat)))))) (scanlunit (λacc x -> (case randnat of O => acc#2 | S => (λn -> acc#3))) 0 (letII (+ k#1 randnat) (λx -> (case k#2 of O => (letII randnat (λx -> (case (flip 0.9) of True => x#1 | False => x#1))) | S => (λn -> randnat))))))))","num_train":4},{"ios":[[["nothing"],"[0, 6, 10, 3, 6]"],[["nothing"],"[2, 1, 2, 2, 3]"],[["nothing"],"[1, 7, 1, 5, 5]"],[["nothing"],"[4, 1, 10, 5, 4]"],[["nothing"],"[9, 1, 2, 7, 9]"],[["nothing"],"[3, 16, 1, 2, 1]"],[["nothing"],"[0, 12, 1, 7, 11]"],[["nothing"],"[3, 7, 1, 2, 0]"]],"type":"(unit -> list)","name":"013","solution":"(letII 5 (λk -> (map (λstate -> (+ randnat (- state#1 k#2))) (scanlunit (λacc x -> acc#2) 0 k#1))))","num_train":4},{"ios":[[["nothing"],"[5, 24, 4, 0, 0, 4, 5, 0, 7, 3, 7, 0]"],[["nothing"],"[1, 8, 8, 0, 7, 9, 5, 5, 0, 0, 11, 2, 0, 0, 3, 0, 6, 0, 9, 0, 2, 0]"],[["nothing"],"[1, 4, 5, 4, 2, 0, 2, 0, 0, 3]"],[["nothing"],"[7, 1, 7, 0, 7, 0, 3, 7, 1, 10, 7, 1, 7, 0, 2, 0]"],[["nothing"],"[8, 0, 7, 9, 4, 0, 0, 0, 0, 3, 7]"],[["nothing"],"[7, 0, 6, 4, 6, 7, 4, 0]"],[["nothing"],"[14, 3, 7, 17, 0, 3, 1, 3]"],[["nothing"],"[7, 0, 7, 0, 9, 3, 25, 0]"]],"type":"(unit -> list)","name":"014","solution":"(letII (- 1 (case 2 of O => randnat | S => (λn -> randnat))) (λk -> (map (λstate -> (case (flip 0.5) of True => state#1 | False => randnat)) (scanlunit (λacc x -> (- (inc (letII randnat (λx -> (inc 5)))) (case (flip 0.9) of True => acc#2 | False => acc#2))) 0 (letII randnat (λx -> (inc (+ 6 randnat))))))))","num_train":4},{"ios":[[["nothing"],"[10, 1, 12]"],[["nothing"],"[5, 2, 9]"],[["nothing"],"[5, 4, 0]"],[["nothing"],"[8, 1, 6]"],[["nothing"],"[8, 5, 0]"],[["nothing"],"[25, 10, 9]"],[["nothing"],"[22, 1, 6]"],[["nothing"],"[3, 11, 3]"]],"type":"(unit -> list)","name":"015","solution":"(letII (case (flip 0.9) of True => randnat | False => 2) (λk -> (map (λstate -> (+ randnat state#1)) (scanlunit (λacc x -> (- randnat acc#2)) 0 3))))","num_train":4},{"ios":[[["nothing"],"[2, 0, 14, 2, 0, 2, 2, 1, 1, 7, 2, 2, 6, 6, 0]"],[["nothing"],"[4, 12, 3, 1, 13, 2, 2, 0, 2, 12, 3]"],[["nothing"],"[9, 3, 2, 2, 2, 2, 3, 1, 5, 4, 0, 3, 5, 11, 14]"],[["nothing"],"[2, 2, 2, 5, 1, 2, 5, 4, 0, 5]"],[["nothing"],"[20, 6, 3, 3, 1, 0, 9, 9, 4, 12, 2, 2, 2, 8, 5, 4, 7, 1, 0, 8, 0, 2]"],[["nothing"],"[3, 4, 2, 2, 11, 6, 0, 0, 0, 1, 0]"],[["nothing"],"[0, 11, 0, 6, 1, 1, 1, 2, 2, 2, 0]"],[["nothing"],"[1, 3, 1, 2, 2, 2, 2, 7, 6, 5, 1, 2, 2, 2, 4]"]],"type":"(unit -> list)","name":"016","solution":"(letII (inc (inc (letII randnat (λx -> (+ x#1 7))))) (λk -> (map (λstate -> (letII randnat (λx -> (case (flip 0.8) of True => randnat | False => state#2)))) (scanlunit (λacc x -> (case (== randnat (case (flip 0.8) of True => acc#2 | False => k#3)) of True => (letII randnat (λx -> (case acc#3 of O => acc#3 | S => (λn -> 5)))) | False => 2)) 0 (letII randnat (λx -> (inc k#2)))))))","num_train":4},{"ios":[[["nothing"],"[5, 10, 8, 5, 7, 5, 6, 5, 5, 7, 8, 7]"],[["nothing"],"[11, 15]"],[["nothing"],"[6, 10, 5, 8, 9, 6, 6, 7, 16, 8, 13, 19, 11, 12, 10]"],[["nothing"],"[7, 22, 10, 15, 7, 8, 5, 6, 10, 7]"],[["nothing"],"[13, 10, 7, 5, 6, 5, 11, 8, 5, 6, 7]"],[["nothing"],"[14, 13, 5]"],[["nothing"],"[7, 18]"],[["nothing"],"[9, 6, 15, 12, 5, 7, 15, 8, 5, 7, 7, 12, 7]"]],"type":"(unit -> list)","name":"017","solution":"(letII randnat (λk -> (map (λstate -> (letII (case (flip 0.9) of True => state#1 | False => randnat) (λx -> (+ 5 randnat)))) (scanlunit (λacc x -> (case acc#2 of O => randnat | S => (λn -> (case acc#3 of O => acc#3 | S => (λn -> randnat))))) 0 (inc (case (case (case (flip 0.1) of True => randnat | False => 2) of O => 7 | S => (λn -> randnat)) of O => randnat | S => (λn -> (+ k#2 randnat))))))))","num_train":4},{"ios":[[["nothing"],"[13, 14, 13, 13, 15, 14, 23, 13, 13, 13, 13, 13, 13]"],[["nothing"],"[16, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 13, 13]"],[["nothing"],"[26, 13, 15, 13, 13, 13, 13, 17, 13, 23, 16, 18, 13]"],[["nothing"],"[13, 13, 13, 13, 30, 13, 13, 13, 13, 18, 19, 13, 14]"],[["nothing"],"[13, 13, 14, 13, 16, 13, 13, 13, 13, 13, 13, 13, 13]"],[["nothing"],"[13, 13, 19, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]"],[["nothing"],"[16, 13, 16, 13, 13, 13, 13, 13, 13, 18, 13, 13, 13]"],[["nothing"],"[13, 13, 13, 20, 15, 13, 13, 13, 25, 16, 13, 17, 13]"]],"type":"(unit -> list)","name":"018","solution":"(letII (+ 4 9) (λk -> (map (λstate -> (letII (letII 3 (λx -> (+ state#2 randnat))) (λx -> (+ (case randnat of O => randnat | S => (λn -> (- randnat (inc 8)))) k#3)))) (scanlunit (λacc x -> (letII (letII randnat (λx -> (case (flip 0.2) of True => k#4 | False => k#4))) (λx -> (case (== acc#3 9) of True => 5 | False => randnat)))) 0 k#1))))","num_train":4},{"ios":[[["nothing"],"[26, 26, 33, 35]"],[["nothing"],"[4, 6, 7, 10]"],[["nothing"],"[7, 12, 15, 15]"],[["nothing"],"[7, 19, 3, 8]"],[["nothing"],"[21, 23, 28, 43]"],[["nothing"],"[13, 18, 19, 28]"],[["nothing"],"[10, 18, 21, 28]"],[["nothing"],"[31, 42, 46, 55]"]],"type":"(unit -> list)","name":"019","solution":"(letII (+ randnat (letII 2 (λx -> (- (letII 3 (λx -> (- randnat x#2))) randnat)))) (λk -> (map (λstate -> (+ (case (flip 0.4) of True => k#2 | False => randnat) (+ state#1 k#2))) (scanlunit (λacc x -> (+ acc#2 (letII acc#2 (λx -> (inc k#4))))) 0 4))))","num_train":4},{"ios":[[["nothing"],"[0, 0, 0, 4, 0, 10, 1]"],[["nothing"],"[2, 0, 0, 0]"],[["nothing"],"[4, 16, 8, 1, 11, 7, 0, 0, 0, 0]"],[["nothing"],"[1, 5, 5, 0, 3, 0, 0]"],[["nothing"],"[2, 0, 0, 4]"],[["nothing"],"[3, 13, 1, 0, 0, 0, 0, 1, 0, 2, 6, 0, 0, 0]"],[["nothing"],"[0, 7, 0, 0, 0, 0, 0]"],[["nothing"],"[0, 0, 0, 7]"]],"type":"(unit -> list)","name":"020","solution":"(letII (+ randnat 4) (λk -> (map (λstate -> (- randnat (- state#1 k#2))) (scanlunit (λacc x -> (+ (case (flip 0.3) of True => acc#2 | False => randnat) k#3)) 0 k#1))))","num_train":4},{"ios":[[["nothing"],"[3, 3, 7, 3, 9, 3]"],[["nothing"],"[3, 3, 3, 3, 5]"],[["nothing"],"[24, 3, 3, 4, 3]"],[["nothing"],"[4, 3, 3, 4, 3]"],[["nothing"],"[11, 3, 3, 3, 4]"],[["nothing"],"[6, 3, 5, 3, 4, 3]"],[["nothing"],"[4, 7, 3, 3, 9, 3]"],[["nothing"],"[6, 3, 3, 3, 3]"]],"type":"(unit -> list)","name":"021","solution":"(letII (case randnat of O => 6 | S => (λn -> randnat)) (λk -> (map (λstate -> (inc state#1)) (scanlunit (λacc x -> (letII randnat (λx -> (inc (letII randnat (λx -> (inc (- x#1 acc#4)))))))) 0 (inc (inc (letII 3 (λx -> (case (flip 0.7) of True => 3 | False => 4)))))))))","num_train":4},{"ios":[[["nothing"],"[6, 3, 6, 3, 10]"],[["nothing"],"[4, 3, 7, 1]"],[["nothing"],"[2, 1, 4, 14, 0, 0]"],[["nothing"],"[0, 0, 8, 7]"],[["nothing"],"[2, 6, 5, 9, 3, 2, 1]"],[["nothing"],"[7, 6, 14, 6, 5]"],[["nothing"],"[1, 0, 2, 14]"],[["nothing"],"[0, 0, 1, 11]"]],"type":"(unit -> list)","name":"022","solution":"(letII (inc (inc randnat)) (λk -> (map (λstate -> (letII randnat (λx -> (+ randnat state#2)))) (scanlunit (λacc x -> (- (case (flip 0.1) of True => acc#2 | False => k#3) k#3)) 0 k#1))))","num_train":4},{"ios":[[["nothing"],"[1, 6, 6, 6, 6, 3, 5, 5, 6, 3, 6, 0, 6]"],[["nothing"],"[4, 0, 0, 1, 6, 6, 6, 6, 0, 6, 0, 6, 6, 6, 6]"],[["nothing"],"[6, 0, 6, 6, 6, 6, 6, 0, 4, 6, 0, 0, 6, 6, 6, 0, 6, 6]"],[["nothing"],"[3, 6, 6, 6, 6, 6, 4, 6, 6, 6, 4, 6, 4, 6, 6, 3, 4, 3]"],[["nothing"],"[6, 6, 6, 1, 5, 6, 3, 5, 6, 6]"],[["nothing"],"[5, 0, 4, 6, 6, 3, 6, 6, 1, 0, 6, 5, 6, 6, 5, 6, 2]"],[["nothing"],"[6, 6, 0, 6, 5, 4, 1, 0, 6, 1, 6, 6, 0, 3]"],[["nothing"],"[6, 0, 6, 4, 6, 0, 0, 3, 6, 6, 6]"]],"type":"(unit -> list)","name":"023","solution":"(letII 7 (λk -> (map (λstate -> (- k#2 (letII randnat (λx -> (inc (- randnat state#2)))))) (scanlunit (λacc x -> (case acc#2 of O => randnat | S => (λn -> (letII randnat (λx -> (case randnat of O => randnat | S => (λn -> randnat))))))) 0 (+ randnat (letII k#1 (λx -> (+ (inc randnat) k#2))))))))","num_train":4},{"ios":[[["nothing"],"[3, 10, 3, 1, 3, 9]"],[["nothing"],"[10, 0, 4, 0, 7, 0]"],[["nothing"],"[13, 2, 9, 2, 2, 1, 3, 1, 0]"],[["nothing"],"[2, 0, 1, 0, 2, 3, 0, 1, 2, 0, 1, 4, 4, 0, 3, 2, 8, 0, 6, 11]"],[["nothing"],"[5, 4, 2, 7, 0, 6, 0, 10, 0]"],[["nothing"],"[1, 0, 3, 0, 0, 2]"],[["nothing"],"[1, 3, 0, 4, 13, 3]"],[["nothing"],"[0, 1, 0, 5, 4, 0, 7, 1]"]],"type":"(unit -> list)","name":"024","solution":"(letII (+ 4 (- randnat 3)) (λk -> (map (λstate -> (letII state#1 (λx -> (case (flip 0.5) of True => randnat | False => randnat)))) (scanlunit (λacc x -> (letII (case acc#2 of O => randnat | S => (λn -> randnat)) (λx -> (case x#1 of O => randnat | S => (λn -> randnat))))) 0 (inc (inc (+ k#1 randnat)))))))","num_train":4},{"ios":[[["nothing"],"[1, 4, 5, 8, 16, 11, 8, 37, 8, 1, 1]"],[["nothing"],"[3, 17, 1, 2, 8, 2, 0, 2, 0]"],[["nothing"],"[1, 3, 5, 4, 2, 21, 4, 9, 0, 2]"],[["nothing"],"[0, 3, 0, 3, 8, 1, 17, 1, 3, 3, 6, 8, 1, 5, 3]"],[["nothing"],"[0, 1, 4, 2, 3, 0, 4, 2]"],[["nothing"],"[5, 0, 3, 4, 2, 4, 1, 3, 1, 4, 2]"],[["nothing"],"[5, 3, 0]"],[["nothing"],"[1, 0, 2, 7]"]],"type":"(unit -> list)","name":"025","solution":"(letII (- randnat 1) (λk -> (map (λstate -> (letII randnat (λx -> (case state#2 of O => 7 | S => (λn -> randnat))))) (scanlunit (λacc x -> (inc (inc (inc acc#2)))) 0 (+ k#1 randnat)))))","num_train":4},{"ios":[[["nothing"],"[3, 0, 12, 7, 0, 4, 9]"],[["nothing"],"[14, 1, 3, 0, 20, 0, 5, 8, 5, 11, 6]"],[["nothing"],"[0, 1, 14, 17, 24, 1, 1, 13, 55, 55, 8]"],[["nothing"],"[5, 3, 7, 0, 32, 1, 5]"],[["nothing"],"[4, 0, 7, 8, 0, 16, 3]"],[["nothing"],"[1, 2, 0, 5, 0, 2, 6]"],[["nothing"],"[0, 3, 0, 1, 0, 0, 2]"],[["nothing"],"[0, 11, 8, 0, 16, 3, 6]"]],"type":"(unit -> list)","name":"026","solution":"(letII (case (flip 0.9) of True => (case (flip 0.3) of True => 9 | False => 5) | False => randnat) (λk -> (map (λstate -> (case 1 of O => state#1 | S => (λn -> (case randnat of O => state#2 | S => (λn -> randnat))))) (scanlunit (λacc x -> (+ acc#2 (letII k#3 (λx -> (- k#4 randnat))))) 0 (inc (inc k#1))))))","num_train":4},{"ios":[[["nothing"],"[7, 9, 9, 3, 4, 4]"],[["nothing"],"[9, 6, 5, 3, 7, 7]"],[["nothing"],"[4, 0, 0, 0, 9, 6]"],[["nothing"],"[0, 5, 5, 6, 8, 8]"],[["nothing"],"[8, 4, 7, 9, 7, 8]"],[["nothing"],"[8, 8, 4, 9]"],[["nothing"],"[7, 2, 7, 4, 5, 9]"],[["nothing"],"[4, 9, 0, 6, 8, 9]"]],"type":"(unit -> list)","name":"027","solution":"(letII 6 (λk -> (map (λstate -> (letII state#1 (λx -> (- 9 (case (flip 0.1) of True => randnat | False => randnat))))) (scanlunit (λacc x -> (letII acc#2 (λx -> (inc randnat)))) 0 (case randnat of O => randnat | S => (λn -> k#2))))))","num_train":4},{"ios":[[["nothing"],"[2, 8, 0, 2, 1, 0, 4]"],[["nothing"],"[7, 0, 3, 0, 1, 8, 0]"],[["nothing"],"[2, 0, 0, 6, 0, 10, 0]"],[["nothing"],"[9, 0, 0, 2, 0, 2, 5]"],[["nothing"],"[12, 0, 17, 0, 1, 0, 14]"],[["nothing"],"[4, 0, 1, 0, 1, 0, 8]"],[["nothing"],"[3, 3, 1, 1, 0, 0, 0]"],[["nothing"],"[0, 3, 1, 0, 3, 0, 8]"]],"type":"(unit -> list)","name":"028","solution":"(letII (inc (inc 5)) (λk -> (map (λstate -> state#1) (scanlunit (λacc x -> (letII 7 (λx -> (- (case x#1 of O => (- 2 k#4) | S => (λn -> randnat)) acc#3)))) 0 k#1))))","num_train":4},{"ios":[[["nothing"],"[1, 6, 0, 13, 2, 0, 10, 5]"],[["nothing"],"[3, 2, 0, 5, 3, 0, 2, 2]"],[["nothing"],"[9, 8, 4, 13, 4, 2, 4, 0]"],[["nothing"],"[0, 28, 0, 0, 2, 0, 4, 2]"],[["nothing"],"[0, 2, 0, 1, 0, 2, 4, 19]"],[["nothing"],"[1, 0, 17, 19, 5, 1, 4, 0]"],[["nothing"],"[3, 23, 0, 8, 7, 4, 3, 2]"],[["nothing"],"[2, 0, 1, 3, 7, 5, 4, 2]"]],"type":"(unit -> list)","name":"029","solution":"(letII 8 (λk -> (map (λstate -> (+ randnat state#1)) (scanlunit (λacc x -> (letII acc#2 (λx -> (case x#1 of O => x#1 | S => (λn -> randnat))))) 0 (case (flip 0.9) of True => k#1 | False => k#1)))))","num_train":4},{"ios":[[["nothing"],"[1, 7, 8, 7, 2, 7, 1, 2, 2]"],[["nothing"],"[5, 2, 1, 2, 0, 3, 3, 2, 1]"],[["nothing"],"[0, 15, 1, 15, 2, 1, 12, 0, 7]"],[["nothing"],"[10, 2, 13, 2, 3, 7, 6, 5, 2]"],[["nothing"],"[0, 7, 3, 5, 9, 5, 2, 1, 0]"],[["nothing"],"[6, 7, 9, 2, 1, 0, 1, 4, 1]"],[["nothing"],"[13, 2, 2, 1, 0, 2, 2, 8, 1]"],[["nothing"],"[0, 9, 0, 9, 2, 4, 7, 1, 3]"]],"type":"(unit -> list)","name":"030","solution":"(letII 9 (λk -> (map (λstate -> state#1) (scanlunit (λacc x -> (case (> (case (flip 0.8) of True => randnat | False => acc#2) (- 1 2)) of True => randnat | False => (letII 3 (λx -> (inc randnat))))) 0 (case randnat of O => k#1 | S => (λn -> k#2))))))","num_train":4},{"ios":[[["nothing"],"[1, 2, 3, 4, 5, 6, 7, 8]"],[["nothing"],"[1, 2, 3, 4, 5, 6]"],[["nothing"],"[1, 2, 3]"],[["nothing"],"[1, 2, 3, 4, 5]"],[["nothing"],"[1, 2]"],[["nothing"],"[1, 2, 3]"],[["nothing"],"[1, 2]"],[["nothing"],"[1, 2]"]],"type":"(unit -> list)","name":"031","solution":"(letII randnat (λk -> (map (λstate -> state#1) (scanlunit (λacc x -> (inc acc#2)) 0 randnat))))","num_train":4},{"ios":[[["nothing"],"[14, 29, 38, 50, 68, 72, 60, 47]"],[["nothing"],"[14, 22, 37, 54, 65, 71, 84, 94]"],[["nothing"],"[5, 7, 12, 27, 34, 53, 63, 68]"],[["nothing"],"[3, 9, 26, 24, 34, 44, 49, 57]"],[["nothing"],"[7, 4]"],[["nothing"],"[16, 12, 0, 3]"],[["nothing"],"[15, 10, 16, 9, 14, 16, 21, 26]"],[["nothing"],"[2, 3]"]],"type":"(unit -> list)","name":"032","solution":"(letII (case (flip 0.5) of True => randnat | False => 7) (λk -> (map (λstate -> (+ state#1 (+ randnat state#1))) (scanlunit (λacc x -> (- (+ acc#2 k#3) randnat)) 0 (inc k#1)))))","num_train":4},{"ios":[[["nothing"],"[0, 1, 2, 3, 6]"],[["nothing"],"[2, 4, 10, 2, 1]"],[["nothing"],"[2, 8, 6, 10, 3]"],[["nothing"],"[1, 7, 2, 1, 1]"],[["nothing"],"[7, 3, 0, 0, 4]"],[["nothing"],"[2, 8, 2, 3, 1]"],[["nothing"],"[0, 1, 11, 0, 1]"],[["nothing"],"[0, 8, 3, 4, 0]"]],"type":"(unit -> list)","name":"033","solution":"(letII (letII 3 (λx -> (inc x#1))) (λk -> (map (λstate -> (case k#2 of O => (letII state#1 (λx -> (inc x#1))) | S => (λn -> randnat))) (scanlunit (λacc x -> (letII (+ (letII 4 (λx -> (case k#4 of O => 8 | S => (λn -> n#1)))) acc#2) (λx -> (+ randnat randnat)))) 0 (inc k#1)))))","num_train":4},{"ios":[[["nothing"],"[7, 11, 7, 20, 21, 11, 4, 21, 20, 14, 14]"],[["nothing"],"[7, 12, 9, 9, 10, 17, 13, 11, 8, 13, 17]"],[["nothing"],"[31, 10, 1, 28, 26, 6, 1, 2, 16, 5, 5]"],[["nothing"],"[17, 5, 15, 12, 25, 3, 9, 16, 8, 19, 14]"],[["nothing"],"[14, 6, 25, 17, 23, 10, 4, 11, 3, 24, 8]"],[["nothing"],"[5, 5, 4, 5, 4, 6, 12, 10, 5, 12, 7]"],[["nothing"],"[8, 8, 4, 24, 31, 6, 4, 27, 16, 14, 5]"],[["nothing"],"[39, 10, 1, 2, 6, 12, 14, 13, 22, 30, 14]"]],"type":"(unit -> list)","name":"034","solution":"(letII (letII randnat (λx -> (+ 0 x#1))) (λk -> (map (λstate -> state#1) (scanlunit (λacc x -> (letII acc#2 (λx -> (+ (+ randnat randnat) (letII randnat (λx -> (case acc#4 of O => randnat | S => (λn -> randnat)))))))) 0 (inc (inc 9))))))","num_train":4},{"ios":[[["nothing"],"[11, 0, 0, 0, 0, 10, 10, 0, 0]"],[["nothing"],"[1, 0, 5, 0, 0, 9, 1, 4, 0]"],[["nothing"],"[0, 0, 0, 0, 0, 0, 15, 0, 0]"],[["nothing"],"[3, 0, 4, 13, 0, 0, 2, 4, 10]"],[["nothing"],"[0, 10, 4, 2, 0, 0, 1, 0, 4]"],[["nothing"],"[2, 1, 0, 4, 0, 0, 3, 0, 0]"],[["nothing"],"[0, 3, 0, 0, 1, 0, 0, 1, 0]"],[["nothing"],"[0, 0, 1, 6, 0, 0, 0, 0, 0]"]],"type":"(unit -> list)","name":"035","solution":"(letII 9 (λk -> (map (λstate -> (case (iseven randnat) of True => randnat | False => (- randnat state#1))) (scanlunit (λacc x -> (letII (case acc#2 of O => randnat | S => (λn -> 3)) (λx -> (+ acc#3 (letII (case randnat of O => 2 | S => (λn -> n#1)) (λx -> (inc (case (flip 0.8) of True => randnat | False => k#5)))))))) 0 (case (flip 0.5) of True => k#1 | False => k#1)))))","num_train":4},{"ios":[[["nothing"],"[0, 5, 3, 2, 4, 5, 0, 0, 1]"],[["nothing"],"[5, 0, 0, 0, 5, 5, 4]"],[["nothing"],"[1, 3, 5, 0, 0, 2]"],[["nothing"],"[0, 0, 5, 0, 10, 5]"],[["nothing"],"[4, 0, 1, 5, 5, 1]"],[["nothing"],"[2, 8, 0, 5, 11, 4, 5, 0, 5, 0, 0, 0, 0, 0, 4, 5]"],[["nothing"],"[0, 0, 0, 0, 4, 1]"],[["nothing"],"[1, 1, 0, 0, 5, 5]"]],"type":"(unit -> list)","name":"036","solution":"(letII (letII randnat (λx -> (case (flip 0.2) of True => randnat | False => x#1))) (λk -> (map (λstate -> (letII (- randnat state#1) (λx -> (- (letII randnat (λx -> (case randnat of O => randnat | S => (λn -> 5)))) randnat)))) (scanlunit (λacc x -> (inc (case acc#2 of O => randnat | S => (λn -> randnat)))) 0 (+ k#1 (- 6 k#1))))))","num_train":4},{"ios":[[["nothing"],"[3, 3, 8, 7, 18]"],[["nothing"],"[4, 6, 21, 6, 10, 10, 14, 10, 12, 14, 14, 13, 14]"],[["nothing"],"[4, 6, 10, 6, 14, 16, 12, 10, 11, 12, 17, 24, 14]"],[["nothing"],"[5, 3, 4, 5, 9]"],[["nothing"],"[4, 4, 13, 8, 7, 14, 15]"],[["nothing"],"[2, 5, 6, 5, 7, 11]"],[["nothing"],"[4, 14, 7, 6, 7, 10, 8, 17, 28, 16, 12]"],[["nothing"],"[5, 5, 6, 10, 21, 7, 14, 10, 10, 13, 14, 19, 15]"]],"type":"(unit -> list)","name":"037","solution":"(letII randnat (λk -> (map (λstate -> (letII state#1 (λx -> (+ x#1 (inc randnat))))) (scanlunit (λacc x -> (inc acc#2)) 0 (+ (case (== randnat k#1) of True => k#1 | False => k#1) randnat)))))","num_train":4},{"ios":[[["nothing"],"[5, 2, 20]"],[["nothing"],"[23, 13, 11, 19, 19, 23, 16, 9, 8, 11, 8, 3, 17, 24, 4, 8, 4]"],[["nothing"],"[8, 10]"],[["nothing"],"[8, 6, 13, 27, 8, 7, 27, 19, 1]"],[["nothing"],"[11, 10]"],[["nothing"],"[11, 11, 24, 16, 11, 6, 2, 10, 4, 9, 35, 12, 27, 11, 12, 6, 25, 10, 21, 12, 21, 24, 11, 7, 7, 13]"],[["nothing"],"[8, 13, 23]"],[["nothing"],"[11, 22, 7, 18, 12, 15, 11]"]],"type":"(unit -> list)","name":"038","solution":"(letII (+ randnat randnat) (λk -> (map (λstate -> (+ (+ state#1 (+ 1 randnat)) randnat)) (scanlunit (λacc x -> (case randnat of O => acc#2 | S => (λn -> randnat))) 0 (case k#1 of O => randnat | S => (λn -> (letII randnat (λx -> (case x#1 of O => k#3 | S => (λn -> randnat))))))))))","num_train":4},{"ios":[[["nothing"],"[1, 7, 3, 4, 1]"],[["nothing"],"[7, 10, 12, 7, 8, 8, 6, 13]"],[["nothing"],"[8, 17, 13, 19, 9, 23, 17, 23, 5, 11]"],[["nothing"],"[21, 13, 17, 13, 7, 18, 20, 13, 23, 13, 23, 21, 17, 9, 21, 5]"],[["nothing"],"[10, 5, 12, 12, 18, 8, 7, 4, 11]"],[["nothing"],"[3, 3, 9, 4, 8]"],[["nothing"],"[7, 0, 2, 8, 6, 5]"],[["nothing"],"[11, 14, 0, 12, 19, 13, 18, 16, 10, 9, 11, 18]"]],"type":"(unit -> list)","name":"039","solution":"(letII (+ randnat 3) (λk -> (map (λstate -> (- (+ randnat k#2) state#1)) (scanlunit (λacc x -> (letII (case (flip 0.5) of True => randnat | False => acc#2) (λx -> (- randnat randnat)))) 0 (inc (inc k#1))))))","num_train":4},{"ios":[[["nothing"],"[18, 5, 7, 7]"],[["nothing"],"[12, 2, 11]"],[["nothing"],"[9, 3, 7]"],[["nothing"],"[7, 1, 8]"],[["nothing"],"[10, 1, 24]"],[["nothing"],"[14, 1, 7, 1, 7, 1, 13, 1, 7, 2, 15, 6]"],[["nothing"],"[7, 2, 7, 2, 7, 1, 11, 2, 15, 4, 8, 20, 11, 13]"],[["nothing"],"[20, 1, 7]"]],"type":"(unit -> list)","name":"040","solution":"(letII (- 3 1) (λk -> (map (λstate -> (inc (letII state#1 (λx -> (+ randnat state#2))))) (scanlunit (λacc x -> (letII acc#2 (λx -> (- 6 x#1)))) 0 (+ (inc randnat) k#1)))))","num_train":4},{"ios":[[["nothing"],"[1, 1, 2, 5]"],[["nothing"],"[4, 5, 9, 10]"],[["nothing"],"[1, 2, 3, 4]"],[["nothing"],"[1, 2, 1, 2]"],[["nothing"],"[1, 12, 13, 12]"],[["nothing"],"[3, 4, 4, 5]"],[["nothing"],"[3, 7, 8, 2]"],[["nothing"],"[1, 2, 3, 7]"]],"type":"(unit -> list)","name":"041","solution":"(letII (letII randnat (λx -> (- (letII randnat (λx -> (- randnat randnat))) (inc x#1)))) (λk -> (map (λstate -> state#1) (scanlunit (λacc x -> (inc (letII k#3 (λx -> (case (flip 0.6) of True => acc#3 | False => randnat))))) 0 (inc (letII 3 (λx -> (case (flip 0.8) of True => x#1 | False => x#1))))))))","num_train":4},{"ios":[[["nothing"],"[0, 8, 7, 4]"],[["nothing"],"[2, 2, 1, 8, 1]"],[["nothing"],"[3, 1, 4, 4, 1, 3]"],[["nothing"],"[10, 6, 5, 2, 5, 0, 0, 6, 0, 0, 0]"],[["nothing"],"[9, 1, 9, 1, 3, 0, 7, 13, 3, 2, 3, 15, 0, 0, 6]"],[["nothing"],"[12, 5, 2, 3, 1, 0, 1, 1, 6, 8, 9, 4, 6, 6, 2, 0]"],[["nothing"],"[0, 0, 1, 0, 5, 0, 11, 18]"],[["nothing"],"[24, 6, 3, 1, 2, 0, 0, 0, 0, 13, 10, 2, 0, 9]"]],"type":"(unit -> list)","name":"042","solution":"(letII 3 (λk -> (map (λstate -> (case state#1 of O => randnat | S => (λn -> randnat))) (scanlunit (λacc x -> (letII randnat (λx -> (- randnat acc#3)))) 0 (letII randnat (λx -> (+ k#2 (inc (letII randnat (λx -> (case 0 of O => x#2 | S => (λn -> k#4))))))))))))","num_train":4},{"ios":[[["nothing"],"[10, 2, 6, 20, 9, 4, 13]"],[["nothing"],"[8, 7, 2, 2, 15, 8, 4]"],[["nothing"],"[4, 14, 2, 12, 3, 5, 7, 12, 9, 9, 16, 2, 32, 7, 2]"],[["nothing"],"[17, 1, 11, 12, 1, 7, 14]"],[["nothing"],"[8, 1, 13, 3, 5, 3, 4, 4, 11, 11, 15, 6, 18, 3]"],[["nothing"],"[13, 3, 6, 7, 15, 2, 7, 9, 6, 19]"],[["nothing"],"[4, 7, 5, 12, 6, 9, 6, 2, 4, 2, 2]"],[["nothing"],"[2, 5, 7, 10, 13, 7, 7, 12, 10]"]],"type":"(unit -> list)","name":"043","solution":"(letII (inc randnat) (λk -> (map (λstate -> state#1) (scanlunit (λacc x -> (+ (inc (case (flip 0.8) of True => (inc randnat) | False => randnat)) (letII randnat (λx -> (- x#1 acc#3))))) 0 (+ (letII k#1 (λx -> (inc 5))) (case (flip 0.1) of True => randnat | False => k#1))))))","num_train":4},{"ios":[[["nothing"],"[5, 9]"],[["nothing"],"[10, 8]"],[["nothing"],"[12, 14]"],[["nothing"],"[4, 6]"],[["nothing"],"[4, 5]"],[["nothing"],"[29, 12, 22, 10]"],[["nothing"],"[6, 14]"],[["nothing"],"[4, 12]"]],"type":"(unit -> list)","name":"044","solution":"(letII 1 (λk -> (map (λstate -> (case state#1 of O => randnat | S => (λn -> (+ randnat state#2)))) (scanlunit (λacc x -> (+ (letII k#3 (λx -> (- (- 0 4) randnat))) (letII acc#2 (λx -> (inc randnat))))) 0 (case (flip 0.2) of True => randnat | False => 2)))))","num_train":4},{"ios":[[["nothing"],"[20, 14, 5, 1, 4, 13]"],[["nothing"],"[7, 14, 1, 11, 3, 21]"],[["nothing"],"[9, 13, 11, 15, 7, 11]"],[["nothing"],"[9, 17, 22, 2, 5, 12]"],[["nothing"],"[2, 3, 4, 3, 5, 5]"],[["nothing"],"[10, 3, 2, 1, 8, 9]"],[["nothing"],"[2, 7, 20, 4, 14, 19]"],[["nothing"],"[10, 31, 21, 33, 10, 29]"]],"type":"(unit -> list)","name":"045","solution":"(letII 6 (λk -> (map (λstate -> (+ randnat state#1)) (scanlunit (λacc x -> (case (flip 0.6) of True => randnat | False => acc#2)) 0 k#1))))","num_train":4},{"ios":[[["nothing"],"[3, 8, 12, 13, 13, 11, 12, 16, 12, 14]"],[["nothing"],"[8, 11, 12, 11, 23, 16, 15, 15, 27, 11]"],[["nothing"],"[1, 17, 16, 9, 14, 9, 12, 10]"],[["nothing"],"[0, 1, 25, 9, 13, 20, 9, 11]"],[["nothing"],"[11, 17, 14, 10, 29, 11, 12, 12]"],[["nothing"],"[3, 15, 14, 12, 12, 11, 14, 18, 16, 11]"],[["nothing"],"[35, 18, 14, 10, 15, 11, 11, 11]"],[["nothing"],"[0, 17, 11, 11, 14, 18, 13, 9]"]],"type":"(unit -> list)","name":"046","solution":"(letII (case (flip 0.3) of True => 9 | False => (+ 5 6)) (λk -> (map (λstate -> (letII (letII k#2 (λx -> (+ state#2 randnat))) (λx -> (+ state#2 randnat)))) (scanlunit (λacc x -> (case (flip 0.3) of True => acc#2 | False => k#3)) 0 (letII randnat (λx -> (case k#2 of O => x#1 | S => (λn -> n#1))))))))","num_train":4},{"ios":[[["nothing"],"[2, 5, 3, 8, 2, 3, 4, 1]"],[["nothing"],"[1, 3, 7, 6, 14, 2, 1, 3]"],[["nothing"],"[15, 1, 1, 9, 9, 12, 2, 0]"],[["nothing"],"[9, 2, 6, 5, 0, 19, 3, 1]"],[["nothing"],"[1, 16, 6, 0, 0, 6, 10, 2]"],[["nothing"],"[14, 0, 3, 10, 3, 4, 5, 0]"],[["nothing"],"[5, 7, 2, 0, 5, 3, 6, 0]"],[["nothing"],"[0, 7, 11, 3, 5, 2, 0, 0]"]],"type":"(unit -> list)","name":"047","solution":"(letII 8 (λk -> (map (λstate -> (letII randnat (λx -> (- x#1 state#2)))) (scanlunit (λacc x -> acc#2) 0 k#1))))","num_train":4},{"ios":[[["nothing"],"[1, 2, 3, 4, 5, 6, 7]"],[["nothing"],"[1, 19, 3, 19, 5, 6, 7]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 23]"],[["nothing"],"[1, 2, 3, 24, 24, 24, 7]"],[["nothing"],"[1, 2, 16, 4, 16, 6, 7]"],[["nothing"],"[1, 2, 3, 29, 5, 6, 7]"],[["nothing"],"[20, 2, 3, 4, 5, 6, 7]"],[["nothing"],"[18, 2, 3, 4, 5, 6, 7]"]],"type":"(unit -> list)","name":"048","solution":"(letII (+ 7 (+ randnat 8)) (λk -> (map (λstate -> (case randnat of O => k#2 | S => (λn -> state#2))) (scanlunit (λacc x -> (inc acc#2)) 0 7))))","num_train":4},{"ios":[[["nothing"],"[0, 0, 0, 2]"],[["nothing"],"[0, 1, 5, 0]"],[["nothing"],"[7, 1, 4, 2, 0, 0, 4, 6, 0, 2, 4, 2, 4, 1, 5, 0, 1, 0, 0, 2, 6, 0, 0, 3, 0, 1]"],[["nothing"],"[0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 2, 0, 0, 8, 5, 0, 5, 1, 0, 8, 0, 2, 1, 4, 0]"],[["nothing"],"[2, 0, 2, 14]"],[["nothing"],"[0, 0, 5, 0, 2]"],[["nothing"],"[0, 1, 1, 4, 2, 2, 10, 9, 0]"],[["nothing"],"[6, 0, 0, 8, 0, 12, 0, 2, 0, 0, 0]"]],"type":"(unit -> list)","name":"049","solution":"(letII (+ 4 (+ randnat 0)) (λk -> (map (λstate -> (letII state#1 (λx -> (- randnat randnat)))) (scanlunit (λacc x -> (- k#3 (letII (letII k#3 (λx -> (case randnat of O => randnat | S => (λn -> randnat)))) (λx -> (+ x#1 acc#3))))) 0 (letII randnat (λx -> (case randnat of O => 9 | S => (λn -> k#3))))))))","num_train":4},{"ios":[[["nothing"],"[3, 14, 7]"],[["nothing"],"[31, 6, 10, 10, 6]"],[["nothing"],"[34, 3, 15, 15]"],[["nothing"],"[15, 4, 19, 19, 4, 5, 32, 18, 10, 2, 4, 0, 16, 14, 15, 15]"],[["nothing"],"[9, 2, 13, 2, 15]"],[["nothing"],"[10, 14, 21, 9, 9, 15, 15, 10]"],[["nothing"],"[2, 21, 2, 4, 15]"],[["nothing"],"[13, 11, 6, 14, 24, 4, 5, 13, 25, 9, 23, 17, 13, 7, 2]"]],"type":"(unit -> list)","name":"050","solution":"(letII randnat (λk -> (map (λstate -> (+ (+ randnat (case (> randnat 5) of True => randnat | False => randnat)) (case (flip 0.6) of True => state#1 | False => randnat))) (scanlunit (λacc x -> (case (case (flip 0.5) of True => acc#2 | False => randnat) of O => acc#2 | S => (λn -> (letII 7 (λx -> (case randnat of O => randnat | S => (λn -> randnat))))))) 0 (+ randnat k#1)))))","num_train":4},{"ios":[[["nothing"],"[1, 11, 3, 12, 2, 14, 1, 25, 6, 0, 1, 4, 2, 9, 1]"],[["nothing"],"[0, 7, 6]"],[["nothing"],"[1, 15, 2]"],[["nothing"],"[3, 19, 17]"],[["nothing"],"[2, 4, 2]"],[["nothing"],"[2, 11, 2]"],[["nothing"],"[7, 0, 2]"],[["nothing"],"[4, 1, 3]"]],"type":"(unit -> list)","name":"051","solution":"(letII (case (flip 0.8) of True => 2 | False => (+ (letII 6 (λx -> (case (> randnat 0) of True => x#1 | False => x#1))) 8)) (λk -> (map (λstate -> (case k#2 of O => state#1 | S => (λn -> randnat))) (scanlunit (λacc x -> (- k#3 (case (> acc#2 k#3) of True => randnat | False => 6))) 0 (inc k#1)))))","num_train":4},{"ios":[[["nothing"],"[0, 0, 0, 8, 8, 0]"],[["nothing"],"[0, 8, 8, 8, 0, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 8, 0, 8, 8, 0]"],[["nothing"],"[0, 0, 0, 0, 8, 0, 0, 0, 0, 0]"],[["nothing"],"[8, 0, 8, 0, 0, 0]"],[["nothing"],"[0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8]"],[["nothing"],"[8, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0]"],[["nothing"],"[0, 8, 0, 0, 8, 0, 8]"],[["nothing"],"[0, 0, 8, 0, 0, 0, 0, 0]"]],"type":"(unit -> list)","name":"052","solution":"(letII (letII 6 (λx -> (case (flip 0.8) of True => randnat | False => randnat))) (λk -> (map (λstate -> (case (flip 0.4) of True => 8 | False => state#1)) (scanlunit (λacc x -> acc#2) 0 (+ (case (flip 0.7) of True => k#1 | False => k#1) 6)))))","num_train":4},{"ios":[[["nothing"],"[0, 0, 7, 0, 2]"],[["nothing"],"[7, 6, 11, 5, 0, 0, 4, 0, 0, 1, 8]"],[["nothing"],"[0, 0, 0, 0, 9, 1, 3, 1, 4, 3, 0, 9, 0, 0]"],[["nothing"],"[0, 6, 0]"],[["nothing"],"[1, 6, 4, 1, 0, 6, 0]"],[["nothing"],"[0, 15, 0, 1, 6]"],[["nothing"],"[3, 0]"],[["nothing"],"[0, 2, 0, 2, 0, 2]"]],"type":"(unit -> list)","name":"053","solution":"(letII (letII 7 (λx -> (case randnat of O => (case randnat of O => 5 | S => (λn -> x#2)) | S => (λn -> randnat)))) (λk -> (map (λstate -> (letII randnat (λx -> (case randnat of O => (case (flip 0.9) of True => state#2 | False => x#1) | S => (λn -> n#1))))) (scanlunit (λacc x -> (case randnat of O => acc#2 | S => (λn -> acc#3))) 0 (letII (case randnat of O => k#1 | S => (λn -> n#1)) (λx -> (case randnat of O => randnat | S => (λn -> x#2))))))))","num_train":4},{"ios":[[["nothing"],"[2, 0]"],[["nothing"],"[0, 9]"],[["nothing"],"[13, 1]"],[["nothing"],"[1, 0]"],[["nothing"],"[12, 2]"],[["nothing"],"[3, 4]"],[["nothing"],"[6, 3]"],[["nothing"],"[17, 1]"]],"type":"(unit -> list)","name":"054","solution":"(letII 1 (λk -> (map (λstate -> (case (> randnat randnat) of True => (+ state#1 randnat) | False => randnat)) (scanlunit (λacc x -> (letII 2 (λx -> (+ randnat acc#3)))) 0 (+ k#1 k#1)))))","num_train":4},{"ios":[[["nothing"],"[11, 2]"],[["nothing"],"[0, 21]"],[["nothing"],"[1, 0, 3, 4, 3, 0, 0, 0, 5, 7, 8, 0, 3, 4, 12, 0, 14, 0, 1, 17, 18, 1, 2, 3, 0, 3]"],[["nothing"],"[9, 7, 8, 6, 10, 8]"],[["nothing"],"[13, 3]"],[["nothing"],"[1, 6, 7]"],[["nothing"],"[0, 2, 0, 11, 0]"],[["nothing"],"[1, 0, 4, 0, 0, 0, 0, 2, 0, 0, 2]"]],"type":"(unit -> list)","name":"055","solution":"(letII (case randnat of O => 4 | S => (λn -> n#1)) (λk -> (map (λstate -> (case (flip 0.7) of True => (- randnat randnat) | False => state#1)) (scanlunit (λacc x -> (inc (case (flip 0.7) of True => acc#2 | False => randnat))) 0 (letII (- k#1 randnat) (λx -> (case 9 of O => (letII randnat (λx -> (case (flip 0.5) of True => randnat | False => randnat))) | S => (λn -> randnat))))))))","num_train":4},{"ios":[[["nothing"],"[0, 2]"],[["nothing"],"[0, 9]"],[["nothing"],"[1, 0]"],[["nothing"],"[2, 0]"],[["nothing"],"[1, 3]"],[["nothing"],"[0, 1]"],[["nothing"],"[0, 10]"],[["nothing"],"[17, 0]"]],"type":"(unit -> list)","name":"056","solution":"(letII (inc 5) (λk -> (map (λstate -> (- (+ state#1 randnat) randnat)) (scanlunit (λacc x -> (inc acc#2)) 0 (case 3 of O => 4 | S => (λn -> n#1))))))","num_train":4},{"ios":[[["nothing"],"[5, 8, 4, 11, 7, 8]"],[["nothing"],"[7, 0, 7, 7, 7, 8, 7, 11]"],[["nothing"],"[2, 11, 7, 2, 12, 1, 13, 2]"],[["nothing"],"[7, 8, 8, 7, 7, 4, 7, 3]"],[["nothing"],"[1, 7, 3, 9, 3, 10, 7, 7]"],[["nothing"],"[2, 3, 8, 2, 7, 0, 6, 7, 8, 1, 7, 7, 7, 8, 1, 7, 7, 7, 7, 7, 7, 1, 3, 8, 0, 7, 7, 7, 7, 4, 8, 8, 7]"],[["nothing"],"[7, 6, 0, 4, 24, 7, 7, 7]"],[["nothing"],"[7, 3, 7, 7, 0, 7, 7, 6]"]],"type":"(unit -> list)","name":"057","solution":"(letII (case (flip 0.5) of True => 3 | False => 5) (λk -> (map (λstate -> (case (flip 0.5) of True => randnat | False => state#1)) (scanlunit (λacc x -> (+ (- (- acc#2 randnat) 6) (inc 6))) 0 (letII k#1 (λx -> (case (flip 0.6) of True => (+ randnat (case randnat of O => randnat | S => (λn -> x#2))) | False => 8)))))))","num_train":4},{"ios":[[["nothing"],"[5, 3, 2, 3, 5, 1, 9]"],[["nothing"],"[0, 1, 11, 5, 0, 0, 7]"],[["nothing"],"[1, 0, 20, 1, 0, 5, 9]"],[["nothing"],"[1, 0, 10, 2, 1, 4, 0]"],[["nothing"],"[2, 0, 1, 1, 5, 2, 3]"],[["nothing"],"[1, 12, 7, 4, 5, 1, 1]"],[["nothing"],"[5, 7, 2, 6, 7, 1, 6]"],[["nothing"],"[5, 1, 0, 4, 2, 2, 1]"]],"type":"(unit -> list)","name":"058","solution":"(letII (inc 6) (λk -> (map (λstate -> (letII state#1 (λx -> (case (flip 0.8) of True => randnat | False => randnat)))) (scanlunit (λacc x -> (case (flip 0.9) of True => k#3 | False => acc#2)) 0 k#1))))","num_train":4},{"ios":[[["nothing"],"[0, 1, 0, 1, 0, 3, 2, 2, 7]"],[["nothing"],"[6, 0, 1, 0, 2, 0, 2, 2, 22]"],[["nothing"],"[3, 7, 0, 6, 0, 2, 0, 11]"],[["nothing"],"[0, 5, 0, 3, 0, 2, 0, 6, 3, 0]"],[["nothing"],"[8, 3, 0, 2, 3, 0, 2, 3]"],[["nothing"],"[7, 0, 8, 0, 7, 0, 15, 0, 1, 2, 0]"],[["nothing"],"[5, 0, 1, 2, 10, 0, 1, 2, 0, 2, 0, 2, 0, 4, 0]"],[["nothing"],"[0, 14, 0, 4, 0, 1, 2, 0, 3, 3, 0, 1, 0, 1]"]],"type":"(unit -> list)","name":"059","solution":"(letII (inc 6) (λk -> (map (λstate -> state#1) (scanlunit (λacc x -> (- randnat acc#2)) 0 (letII randnat (λx -> (+ k#2 (inc randnat))))))))","num_train":4},{"ios":[[["nothing"],"[9, 11, 25]"],[["nothing"],"[7, 5, 5]"],[["nothing"],"[7, 11, 12]"],[["nothing"],"[12, 11, 11]"],[["nothing"],"[16, 21, 13]"],[["nothing"],"[1, 7, 3]"],[["nothing"],"[9, 11, 9]"],[["nothing"],"[6, 7, 5]"]],"type":"(unit -> list)","name":"060","solution":"(letII randnat (λk -> (map (λstate -> (letII (letII k#2 (λx -> (+ k#3 k#3))) (λx -> (+ x#1 (letII 7 (λx -> (+ 1 state#3))))))) (scanlunit (λacc x -> (case randnat of O => (letII k#3 (λx -> (+ acc#3 k#4))) | S => (λn -> (- randnat randnat)))) 0 3))))","num_train":4},{"ios":[[["nothing"],"[1, 2, 2, 7, 2, 6, 6, 8, 6, 5, 2, 2, 2, 1, 0, 5]"],[["nothing"],"[5, 1, 1, 1, 0, 2, 5]"],[["nothing"],"[7, 11, 11, 11, 0, 1, 11, 11, 0, 1, 6, 11, 3, 2, 0, 2, 11, 6, 2, 2, 4, 2, 2]"],[["nothing"],"[2, 2, 2, 5, 2, 2, 2]"],[["nothing"],"[3, 3, 2, 10, 3, 5, 4, 3, 5, 2, 2, 7, 0]"],[["nothing"],"[8, 9, 9, 1, 2, 1, 2, 9, 3, 9, 3, 2, 9, 9, 2, 9, 11, 2, 1]"],[["nothing"],"[0, 2, 2, 2, 2, 14, 2, 5, 2, 2, 14, 10, 12, 0, 5, 14, 2, 6, 6, 14, 2, 0, 14, 14, 14, 0, 0, 6, 14, 2, 14, 14, 1, 14, 7]"],[["nothing"],"[8, 1]"]],"type":"(unit -> list)","name":"061","solution":"(letII (inc (- (+ randnat 2) randnat)) (λk -> (map (λstate -> (case (flip 0.5) of True => randnat | False => (letII randnat (λx -> (case (flip 0.6) of True => k#3 | False => state#2))))) (scanlunit (λacc x -> (case acc#2 of O => randnat | S => (λn -> 2))) 0 (letII k#1 (λx -> (+ k#2 (+ randnat k#2))))))))","num_train":4},{"ios":[[["nothing"],"[10, 12, 11, 14, 9, 22, 17, 12, 24, 10, 12, 23, 9]"],[["nothing"],"[18, 9, 13, 12, 10, 12, 10, 31, 9, 13]"],[["nothing"],"[13, 2, 13, 9, 11, 11, 11, 4, 12, 10, 12]"],[["nothing"],"[19, 9, 9, 6, 11, 11, 9, 21, 13, 9, 10, 9, 4, 4]"],[["nothing"],"[13, 2, 13, 9, 26, 11, 11, 10, 20, 9, 13]"],[["nothing"],"[13, 9, 13, 3, 12, 10, 11, 11, 22, 13, 2, 19, 11, 4]"],[["nothing"],"[13, 2, 12, 10, 9, 13, 10, 12, 10, 12, 13, 2, 12, 3]"],[["nothing"],"[13, 10, 12, 9, 13, 10, 12, 10, 17, 3, 5]"]],"type":"(unit -> list)","name":"062","solution":"(letII 9 (λk -> (map (λstate -> (+ state#1 (case randnat of O => (inc 1) | S => (λn -> k#3)))) (scanlunit (λacc x -> (case (> randnat randnat) of True => (- (inc 3) acc#2) | False => randnat)) 0 (inc (+ randnat k#1))))))","num_train":4},{"ios":[[["nothing"],"[8, 16]"],[["nothing"],"[14, 7, 8]"],[["nothing"],"[7, 8, 23, 13]"],[["nothing"],"[9, 13, 8, 8, 9, 15, 17, 7, 23, 8, 7]"],[["nothing"],"[18, 12]"],[["nothing"],"[14, 7, 7, 9, 9]"],[["nothing"],"[9, 14, 7]"],[["nothing"],"[22, 7, 8]"]],"type":"(unit -> list)","name":"063","solution":"(letII (- (inc (- 8 randnat)) randnat) (λk -> (map (λstate -> (+ 7 (letII 5 (λx -> (- randnat state#2))))) (scanlunit (λacc x -> acc#2) 0 (inc (case randnat of O => randnat | S => (λn -> randnat)))))))","num_train":4},{"ios":[[["nothing"],"[3, 6, 0, 2, 2, 9]"],[["nothing"],"[1, 0, 0, 6, 0, 1, 13, 0, 0, 11, 1, 0, 2]"],[["nothing"],"[0, 0, 0, 6, 0, 0, 1, 0, 5, 1, 4, 0, 7, 5, 0, 0, 1, 4, 2, 3, 0, 7]"],[["nothing"],"[5, 0, 5, 0, 0, 10, 13, 11, 5]"],[["nothing"],"[3, 0, 8, 0, 0]"],[["nothing"],"[2, 0, 1, 1, 0, 2, 5, 0, 4, 1, 0, 0, 3, 2, 3, 7]"],[["nothing"],"[12, 3, 7, 11, 6, 10, 0]"],[["nothing"],"[1, 2, 1, 9, 0, 6, 0, 13, 1, 2, 1, 1, 5, 0, 6]"]],"type":"(unit -> list)","name":"064","solution":"(letII 8 (λk -> (map (λstate -> (case randnat of O => state#1 | S => (λn -> randnat))) (scanlunit (λacc x -> (+ acc#2 acc#2)) 0 (+ randnat randnat)))))","num_train":4},{"ios":[[["nothing"],"[5, 1, 11, 9]"],[["nothing"],"[4, 8, 16, 2]"],[["nothing"],"[7, 11, 5, 7]"],[["nothing"],"[5, 12, 4, 4]"],[["nothing"],"[13, 1, 1, 19]"],[["nothing"],"[9, 5, 21, 10]"],[["nothing"],"[2, 5, 6, 11]"],[["nothing"],"[6, 6, 0, 10]"]],"type":"(unit -> list)","name":"065","solution":"(letII (+ randnat 4) (λk -> (map (λstate -> (case (flip 0.1) of True => state#1 | False => (+ randnat randnat))) (scanlunit (λacc x -> (letII (letII acc#2 (λx -> (inc 7))) (λx -> (case (flip 0.8) of True => (case (flip 0.5) of True => (inc x#1) | False => randnat) | False => (case (flip 0.7) of True => randnat | False => acc#3))))) 0 (letII 3 (λx -> (inc x#1)))))))","num_train":4},{"ios":[[["nothing"],"[7, 5, 7, 15, 19, 15, 14, 23, 18, 21, 28, 33, 35, 30, 30, 37, 38, 40, 42, 50, 44, 48]"],[["nothing"],"[9, 4, 6, 10, 14, 13, 14, 20, 20, 26, 24, 41, 26, 32, 32, 34, 35, 37, 38]"],[["nothing"],"[3, 4, 14, 14, 10, 18, 15, 16, 18, 28, 23, 26, 30]"],[["nothing"],"[5, 11, 9, 9, 20, 14, 22, 26, 40, 20, 22, 24, 32, 28, 31, 38, 50]"],[["nothing"],"[3, 5, 10, 15, 14, 21, 14, 21, 18, 29, 22, 28, 28, 32]"],[["nothing"],"[12, 7, 7, 16, 12, 19, 14, 16, 18, 38, 29, 25]"],[["nothing"],"[4, 5, 17, 11, 12, 14, 14, 16, 19, 28, 24, 30]"],[["nothing"],"[17, 4, 8, 11, 11, 15, 16, 22, 21, 22, 24, 26, 31, 31, 30, 32, 35, 40, 53, 41]"]],"type":"(unit -> list)","name":"066","solution":"(letII (+ 9 (+ 3 randnat)) (λk -> (map (λstate -> (+ state#1 randnat)) (scanlunit (λacc x -> (+ acc#2 2)) 0 k#1))))","num_train":4},{"ios":[[["nothing"],"[10, 10, 10, 0, 0, 10, 10, 10, 0, 0]"],[["nothing"],"[3, 0, 3]"],[["nothing"],"[13, 13, 0, 0, 0, 13, 13, 13, 0, 13, 0, 0, 13]"],[["nothing"],"[0, 0, 0, 0, 5]"],[["nothing"],"[19, 19, 0, 0, 0, 0, 19, 0, 0, 0, 19, 19, 19, 19, 19, 0, 19, 0, 0]"],[["nothing"],"[5, 0, 0, 0, 0]"],[["nothing"],"[0, 4, 0, 0]"],[["nothing"],"[3, 3, 0]"]],"type":"(unit -> list)","name":"067","solution":"(letII randnat (λk -> (map (λstate -> (case (flip 0.1) of True => state#1 | False => state#1)) (scanlunit (λacc x -> (case (flip 0.5) of True => (- k#3 acc#2) | False => acc#2)) 0 (case (== k#1 randnat) of True => randnat | False => k#1)))))","num_train":4},{"ios":[[["nothing"],"[11, 2, 0, 1, 8, 1, 0]"],[["nothing"],"[1, 4, 5, 6, 3, 7, 8]"],[["nothing"],"[15, 2, 1, 4, 9, 3, 1]"],[["nothing"],"[16, 6, 8, 2, 7, 8, 6]"],[["nothing"],"[3, 5, 4, 6, 9, 8, 5]"],[["nothing"],"[0, 2, 7, 7, 4, 5, 10]"],[["nothing"],"[5, 6, 10, 4, 1, 3, 9]"],[["nothing"],"[3, 11, 1, 2, 9, 2, 14]"]],"type":"(unit -> list)","name":"068","solution":"(letII 5 (λk -> (map (λstate -> (case (iseven randnat) of True => randnat | False => (inc state#1))) (scanlunit (λacc x -> (case acc#2 of O => randnat | S => (λn -> randnat))) 0 (letII (case k#1 of O => randnat | S => (λn -> (- randnat 3))) (λx -> (inc 6)))))))","num_train":4},{"ios":[[["nothing"],"[7, 10, 4, 5]"],[["nothing"],"[0, 4, 0, 1]"],[["nothing"],"[15, 6, 7, 15]"],[["nothing"],"[7, 10, 8, 14]"],[["nothing"],"[0, 7, 0, 7]"],[["nothing"],"[10, 13, 26, 24]"],[["nothing"],"[14, 19, 12, 6]"],[["nothing"],"[5, 6, 0, 2]"]],"type":"(unit -> list)","name":"069","solution":"(letII (letII 4 (λx -> (case (flip 0.9) of True => x#1 | False => randnat))) (λk -> (map (λstate -> (+ state#1 randnat)) (scanlunit (λacc x -> (case (flip 0.9) of True => acc#2 | False => (+ k#3 randnat))) 0 (inc 3)))))","num_train":4},{"ios":[[["nothing"],"[4, 0, 4, 0]"],[["nothing"],"[1, 4, 0, 1, 0, 1]"],[["nothing"],"[4, 0, 4, 10, 0, 4, 0, 4, 0, 4, 7, 0, 4, 7, 0, 4, 2, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 2, 9, 0]"],[["nothing"],"[1, 2, 3, 2, 12, 0, 1, 0, 1, 4, 0, 1, 4]"],[["nothing"],"[1, 14, 0, 1, 0, 1, 0, 1]"],[["nothing"],"[4, 0, 4, 8, 0, 4, 4, 0]"],[["nothing"],"[2, 0]"],[["nothing"],"[1, 0]"]],"type":"(unit -> list)","name":"070","solution":"(letII randnat (λk -> (map (λstate -> state#1) (scanlunit (λacc x -> (case acc#2 of O => (letII randnat (λx -> (inc k#4))) | S => (λn -> (- randnat acc#3)))) 0 (+ randnat (case randnat of O => k#1 | S => (λn -> randnat)))))))","num_train":4},{"ios":[[["nothing"],"[11, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6]"],[["nothing"],"[0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 2]"],[["nothing"],"[0, 0, 1, 0, 16, 0, 0, 0, 0, 0, 0]"],[["nothing"],"[3, 0, 0, 0, 0, 1, 0, 0, 0]"],[["nothing"],"[0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"],[["nothing"],"[0, 0, 5, 2, 0, 6, 0, 0, 0, 0, 0, 0, 4]"],[["nothing"],"[0, 0, 0, 0, 0, 5, 0, 0, 10, 0, 0, 0, 5]"],[["nothing"],"[1, 0, 0, 0, 0, 0, 0, 0]"]],"type":"(unit -> list)","name":"071","solution":"(letII 7 (λk -> (map (λstate -> (letII k#2 (λx -> (- (case randnat of O => state#2 | S => (λn -> randnat)) k#3)))) (scanlunit (λacc x -> (+ randnat (- k#3 acc#2))) 0 (+ (inc randnat) k#1)))))","num_train":4},{"ios":[[["nothing"],"[2, 3, 12, 4, 1, 10]"],[["nothing"],"[0, 10, 15, 0, 0, 3, 8]"],[["nothing"],"[6, 1, 10]"],[["nothing"],"[1, 14, 7, 4, 7, 2, 12, 13, 0, 12, 1, 3, 5, 0]"],[["nothing"],"[10, 8, 2, 0, 1, 0, 0, 0, 8, 0, 3, 0, 9, 0, 6, 2, 0, 0, 28, 12, 5, 0, 3, 2]"],[["nothing"],"[1, 3, 1, 6, 1, 1, 18, 0, 3]"],[["nothing"],"[11, 6, 10, 1, 3, 12, 3, 1, 8]"],[["nothing"],"[0, 5, 14]"]],"type":"(unit -> list)","name":"072","solution":"(letII (inc randnat) (λk -> (map (λstate -> (+ (- randnat (letII state#1 (λx -> (+ k#3 randnat)))) randnat)) (scanlunit (λacc x -> (- (inc (case k#3 of O => acc#2 | S => (λn -> randnat))) 8)) 0 (+ randnat k#1)))))","num_train":4},{"ios":[[["nothing"],"[7, 4, 2, 13, 12, 6, 9, 9, 22, 17, 12]"],[["nothing"],"[6, 8, 5, 19]"],[["nothing"],"[12, 3, 14, 9, 6, 8]"],[["nothing"],"[3, 3, 21, 3, 6, 9, 3, 1, 8, 6, 18, 15, 1, 7, 12]"],[["nothing"],"[2, 13, 2, 4, 3, 15, 12, 17, 7, 5, 3, 7, 3, 2]"],[["nothing"],"[3, 6, 7, 6, 4, 2, 10, 7, 22, 3]"],[["nothing"],"[9, 5, 11, 2, 21, 7, 11, 9, 9, 18, 6, 2, 4, 5, 7, 8, 10, 6, 8]"],[["nothing"],"[2, 15, 13, 16, 4, 14, 21]"]],"type":"(unit -> list)","name":"073","solution":"(letII (+ (inc 6) 3) (λk -> (map (λstate -> (letII (+ randnat randnat) (λx -> (inc (+ randnat (letII randnat (λx -> (- randnat state#3)))))))) (scanlunit (λacc x -> acc#2) 0 (letII (+ 1 k#1) (λx -> (+ randnat (- x#1 randnat))))))))","num_train":4},{"ios":[[["nothing"],"[5, 2, 1, 8, 8]"],[["nothing"],"[0, 4, 4, 1, 0]"],[["nothing"],"[8, 4, 4, 2, 3]"],[["nothing"],"[9, 3, 3, 2, 1]"],[["nothing"],"[3, 8, 7, 1, 4]"],[["nothing"],"[4, 4, 1, 2, 11]"],[["nothing"],"[14, 8, 6, 5, 6]"],[["nothing"],"[1, 2, 4, 0, 2]"]],"type":"(unit -> list)","name":"074","solution":"(letII (inc (letII randnat (λx -> (case (flip 0.6) of True => randnat | False => randnat)))) (λk -> (map (λstate -> (case (- randnat state#1) of O => randnat | S => (λn -> (inc randnat)))) (scanlunit (λacc x -> acc#2) 0 5))))","num_train":4},{"ios":[[["nothing"],"[25, 13, 12, 13, 13, 13]"],[["nothing"],"[7, 5, 4, 3, 12, 3]"],[["nothing"],"[12, 22, 22, 12, 12, 12]"],[["nothing"],"[24, 16, 15, 15, 16, 34]"],[["nothing"],"[13, 13, 13, 16, 21, 15]"],[["nothing"],"[12, 13, 13, 12, 16, 16]"],[["nothing"],"[34, 15, 32]"],[["nothing"],"[16, 14, 9, 7, 14, 17]"]],"type":"(unit -> list)","name":"075","solution":"(letII (letII randnat (λx -> (case randnat of O => randnat | S => (λn -> 4)))) (λk -> (map (λstate -> (+ (+ (letII state#1 (λx -> (+ k#3 k#3))) state#1) k#2)) (scanlunit (λacc x -> (letII randnat (λx -> (case (flip 0.5) of True => (case randnat of O => acc#3 | S => (λn -> n#1)) | False => randnat)))) 0 (letII (case (flip 0.2) of True => k#1 | False => k#1) (λx -> (case randnat of O => randnat | S => (λn -> 6))))))))","num_train":4},{"ios":[[["nothing"],"[1, 13, 14, 0, 6]"],[["nothing"],"[1, 0, 0, 1, 3]"],[["nothing"],"[10, 17, 0, 16, 16]"],[["nothing"],"[0, 4, 0, 6, 6]"],[["nothing"],"[1, 7, 0, 11, 16]"],[["nothing"],"[9, 0, 0, 0, 1]"],[["nothing"],"[4, 5, 1, 1, 0]"],[["nothing"],"[0, 1, 16, 19, 22]"]],"type":"(unit -> list)","name":"076","solution":"(letII (- (inc randnat) randnat) (λk -> (map (λstate -> (case (flip 0.9) of True => state#1 | False => state#1)) (scanlunit (λacc x -> (case (- randnat randnat) of O => (letII acc#2 (λx -> (+ randnat x#1))) | S => (λn -> (letII k#4 (λx -> (- randnat randnat)))))) 0 (case (+ randnat randnat) of O => k#1 | S => (λn -> 5))))))","num_train":4},{"ios":[[["nothing"],"[8, 29, 7, 5, 24, 4]"],[["nothing"],"[12, 12, 10, 23, 6, 9]"],[["nothing"],"[12, 11, 22, 11, 10, 11]"],[["nothing"],"[13, 7, 7, 17, 8, 19]"],[["nothing"],"[7, 17, 19, 13, 7, 7]"],[["nothing"],"[12, 14, 13, 17, 5, 10]"],[["nothing"],"[12, 6, 7, 12, 9, 12]"],[["nothing"],"[19, 9, 9, 14, 15, 8]"]],"type":"(unit -> list)","name":"077","solution":"(letII 2 (λk -> (map (λstate -> (letII k#2 (λx -> (inc state#2)))) (scanlunit (λacc x -> (letII (letII randnat (λx -> (inc acc#3))) (λx -> (+ (case randnat of O => randnat | S => (λn -> randnat)) (+ k#4 (letII x#1 (λx -> (inc randnat)))))))) 0 (inc 5)))))","num_train":4},{"ios":[[["nothing"],"[3, 0, 8, 12, 5, 9, 3, 21, 19, 18, 4, 7, 4, 1, 0, 0, 0, 0, 14, 9, 11, 2, 1, 5, 2, 1, 12, 3, 1, 5, 1, 3, 0, 5, 1, 8, 1]"],[["nothing"],"[6, 5]"],[["nothing"],"[6, 0, 0, 1, 1]"],[["nothing"],"[0, 6, 0]"],[["nothing"],"[1, 3]"],[["nothing"],"[6, 1, 0, 7, 0, 0, 0, 4]"],[["nothing"],"[3, 14, 7, 7, 11, 9, 19, 0, 0]"],[["nothing"],"[4, 7]"]],"type":"(unit -> list)","name":"078","solution":"(letII (inc (letII randnat (λx -> (inc x#1)))) (λk -> (map (λstate -> (case (case (flip 0.2) of True => state#1 | False => state#1) of O => randnat | S => (λn -> 6))) (scanlunit (λacc x -> (case acc#2 of O => acc#2 | S => (λn -> randnat))) 0 (inc (inc randnat))))))","num_train":4},{"ios":[[["nothing"],"[0, 7, 2, 0, 3, 8, 1, 10, 0, 1, 0, 0, 0]"],[["nothing"],"[0, 0, 0, 0, 0, 3, 0, 0]"],[["nothing"],"[0, 3, 0, 0, 4, 5, 0, 0, 0, 0, 0, 0, 12, 1, 0, 0, 3, 0, 0, 0, 0]"],[["nothing"],"[0, 8, 0, 0, 0, 0, 0, 2, 4, 0, 0]"],[["nothing"],"[0, 2, 0, 5, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4]"],[["nothing"],"[0, 0, 0, 7, 0, 1, 0, 0, 0, 1]"],[["nothing"],"[3, 0, 0, 8, 0, 1, 1, 0, 0]"],[["nothing"],"[0, 1, 0, 0, 0, 1, 0, 0, 2, 9, 0, 0, 0, 7, 0, 16, 2, 2, 2]"]],"type":"(unit -> list)","name":"079","solution":"(letII (+ randnat randnat) (λk -> (map (λstate -> (letII state#1 (λx -> (- randnat (inc state#2))))) (scanlunit (λacc x -> (case (flip 0.7) of True => randnat | False => acc#2)) 0 (letII (inc randnat) (λx -> (+ (inc 7) randnat)))))))","num_train":4},{"ios":[[["nothing"],"[6, 5, 18]"],[["nothing"],"[23, 46]"],[["nothing"],"[12, 6]"],[["nothing"],"[2, 4, 9, 8]"],[["nothing"],"[1, 16, 24, 2, 40]"],[["nothing"],"[11, 22, 33, 44, 55, 2, 77, 2, 99, 110, 121, 132, 143]"],[["nothing"],"[3, 6, 1]"],[["nothing"],"[3, 6, 9]"]],"type":"(unit -> list)","name":"080","solution":"(letII (inc (case randnat of O => randnat | S => (λn -> (case (flip 0.6) of True => n#1 | False => randnat)))) (λk -> (map (λstate -> (letII state#1 (λx -> (case (flip 0.7) of True => state#2 | False => randnat)))) (scanlunit (λacc x -> (+ k#3 (inc acc#2))) 0 (letII k#1 (λx -> (case (flip 0.7) of True => (inc randnat) | False => randnat)))))))","num_train":4},{"ios":[[["nothing"],"[1, 0, 0, 0, 15, 17, 18, 20, 22]"],[["nothing"],"[0, 5, 0, 2, 10, 12, 14, 22, 23]"],[["nothing"],"[1, 12, 14, 10, 16, 15, 22, 32, 46]"],[["nothing"],"[1, 2, 3, 2, 6, 7, 3, 9, 9]"],[["nothing"],"[0, 0, 8, 16, 22, 24, 31, 32, 34]"],[["nothing"],"[0, 10, 12, 12, 15, 17, 19, 17, 19]"],[["nothing"],"[0, 0, 5, 6, 7, 7, 13, 13, 15]"],[["nothing"],"[1, 5, 7, 14, 14, 17, 17, 22, 31]"]],"type":"(unit -> list)","name":"081","solution":"(letII (letII randnat (λx -> (case (flip 0.9) of True => x#1 | False => randnat))) (λk -> (map (λstate -> (case (> (letII randnat (λx -> (inc randnat))) randnat) of True => (- state#1 randnat) | False => state#1)) (scanlunit (λacc x -> (+ (inc acc#2) (- randnat randnat))) 0 9))))","num_train":4},{"ios":[[["nothing"],"[3, 1, 5]"],[["nothing"],"[1, 2]"],[["nothing"],"[2, 5, 2, 9]"],[["nothing"],"[2, 5, 6, 3]"],[["nothing"],"[1, 4, 1, 9, 3, 7, 7, 15]"],[["nothing"],"[1, 1, 2, 9]"],[["nothing"],"[1, 3, 6, 9]"],[["nothing"],"[1, 1, 1, 4, 1, 1, 1, 13, 11, 20, 23, 16, 22]"]],"type":"(unit -> list)","name":"082","solution":"(letII (- 5 1) (λk -> (map (λstate -> (inc (letII (inc 1) (λx -> (- state#2 randnat))))) (scanlunit (λacc x -> (inc (letII 4 (λx -> (inc acc#3))))) 0 (case randnat of O => k#1 | S => (λn -> randnat))))))","num_train":4},{"ios":[[["nothing"],"[8, 3, 2, 2, 0]"],[["nothing"],"[0, 1, 3, 4, 0]"],[["nothing"],"[4, 15, 0, 2, 1]"],[["nothing"],"[23, 2, 2, 5, 0, 3]"],[["nothing"],"[3, 0, 3, 4, 2]"],[["nothing"],"[1, 2, 6, 1, 6, 2, 0, 0, 5, 7, 10, 1, 0, 4, 1, 2, 9, 2]"],[["nothing"],"[10, 1, 9, 3, 1]"],[["nothing"],"[4, 2, 0, 2, 2, 0, 17, 1, 1, 7, 8, 8, 10, 8, 12, 0, 2, 2, 1, 3, 3, 6, 2, 13, 9, 2, 5, 8, 2, 2, 7, 2, 0, 1, 4, 1, 36, 3, 3, 6, 8, 2, 0, 1, 0, 0, 10, 36, 1, 0, 0, 0, 2, 7, 5, 2, 0, 2, 7, 5, 3, 6, 36, 5, 0, 2, 0, 4, 4, 3, 4, 17, 4, 36, 6, 0, 1, 36, 4, 5, 6, 2, 8, 4, 3, 0, 0, 1, 9, 2, 0, 2, 5, 4, 13, 4, 6, 1, 36, 2, 0, 2, 10, 0, 5, 1, 9, 3]"]],"type":"(unit -> list)","name":"083","solution":"(letII randnat (λk -> (map (λstate -> (case randnat of O => state#1 | S => (λn -> (case (flip 0.8) of True => randnat | False => n#1)))) (scanlunit (λacc x -> (letII acc#2 (λx -> (case (- acc#3 randnat) of O => k#4 | S => (λn -> randnat))))) 0 (letII k#1 (λx -> (case (flip 0.3) of True => (+ (+ x#1 x#1) x#1) | False => 5)))))))","num_train":4},{"ios":[[["nothing"],"[0, 4, 10, 3, 0, 0, 3]"],[["nothing"],"[1, 5, 10, 11, 9, 6, 0]"],[["nothing"],"[4, 10, 6, 4, 16, 9, 0]"],[["nothing"],"[18, 6, 2, 3, 2, 0, 2]"],[["nothing"],"[1, 4, 2, 6, 11, 3, 1]"],[["nothing"],"[7, 2, 5, 8, 3, 0, 8]"],[["nothing"],"[1, 1, 4, 1, 1, 2, 23]"],[["nothing"],"[5, 4, 2, 9, 5, 6, 6]"]],"type":"(unit -> list)","name":"084","solution":"(letII (inc 0) (λk -> (map (λstate -> (case (letII state#1 (λx -> (inc randnat))) of O => randnat | S => (λn -> randnat))) (scanlunit (λacc x -> (+ (case (flip 0.8) of True => randnat | False => randnat) acc#2)) 0 7))))","num_train":4},{"ios":[[["nothing"],"[22, 16, 10, 8, 20, 13, 10, 12, 9]"],[["nothing"],"[4, 5, 5]"],[["nothing"],"[11, 16, 21, 9, 14]"],[["nothing"],"[6, 15, 4, 7, 4, 16, 13, 6, 11]"],[["nothing"],"[10, 14, 18, 16, 8, 12, 9]"],[["nothing"],"[13, 20, 12, 13, 16, 12, 12, 13, 12, 17, 23, 13, 11, 24, 12, 12]"],[["nothing"],"[21, 8, 31, 3]"],[["nothing"],"[10, 10, 10, 9, 23, 14, 10, 11, 8, 16, 11, 15]"]],"type":"(unit -> list)","name":"085","solution":"(letII randnat (λk -> (map (λstate -> (letII state#1 (λx -> (+ randnat (+ randnat k#3))))) (scanlunit (λacc x -> (letII (letII acc#2 (λx -> (+ randnat (+ x#1 acc#3)))) (λx -> (case (flip 0.8) of True => acc#3 | False => acc#3)))) 0 (+ (inc (case randnat of O => 6 | S => (λn -> randnat))) (- k#1 1))))))","num_train":4},{"ios":[[["nothing"],"[2, 12, 4, 14, 2, 0, 0]"],[["nothing"],"[3, 7, 1, 0, 0, 1, 0]"],[["nothing"],"[2, 4, 3, 1, 10, 18, 7, 2, 1, 11, 14, 0, 9, 0]"],[["nothing"],"[1, 1, 0, 1, 4, 1, 0, 5]"],[["nothing"],"[1, 0, 16, 4, 14, 8, 2, 0, 6]"],[["nothing"],"[3, 3, 4, 1, 17, 6, 9, 5, 3]"],[["nothing"],"[6, 10, 4, 7, 2, 3, 5, 8, 1]"],[["nothing"],"[0, 0, 1, 2, 1, 2, 12, 11, 14, 6, 0, 3, 71, 2]"]],"type":"(unit -> list)","name":"086","solution":"(letII (letII (letII randnat (λx -> (case (flip 0.5) of True => x#1 | False => randnat))) (λx -> (+ (letII 3 (λx -> (case randnat of O => randnat | S => (λn -> 6)))) x#1))) (λk -> (map (λstate -> (case randnat of O => (case randnat of O => state#1 | S => (λn -> randnat)) | S => (λn -> randnat))) (scanlunit (λacc x -> (letII (letII randnat (λx -> (inc k#4))) (λx -> (+ acc#3 randnat)))) 0 (letII k#1 (λx -> (inc k#2)))))))","num_train":4},{"ios":[[["nothing"],"[0, 14, 14, 12, 0]"],[["nothing"],"[0, 0, 0, 0, 6, 10, 6, 0, 2, 2]"],[["nothing"],"[62, 6, 6, 2, 6, 0, 10]"],[["nothing"],"[8, 0, 0, 0, 4, 4]"],[["nothing"],"[16, 22, 22, 10, 10, 2, 4, 20, 22, 8, 8, 8, 10, 4, 2, 2, 6]"],[["nothing"],"[34, 6, 2, 4, 4]"],[["nothing"],"[8, 8, 0, 4, 18, 16, 8, 10, 0]"],[["nothing"],"[2, 0, 16, 0, 24]"]],"type":"(unit -> list)","name":"087","solution":"(letII (+ randnat 5) (λk -> (map (λstate -> (letII randnat (λx -> (+ state#2 state#2)))) (scanlunit (λacc x -> (case randnat of O => acc#2 | S => (λn -> randnat))) 0 (letII k#1 (λx -> (case k#2 of O => randnat | S => (λn -> x#2))))))))","num_train":4},{"ios":[[["nothing"],"[0, 0, 1]"],[["nothing"],"[0, 1]"],[["nothing"],"[1, 1, 5, 6, 2, 4, 12, 5]"],[["nothing"],"[5, 1, 17]"],[["nothing"],"[3, 3, 1]"],[["nothing"],"[7, 5, 28]"],[["nothing"],"[0, 4, 3, 11, 3, 5, 1, 8]"],[["nothing"],"[5, 4, 10, 3]"]],"type":"(unit -> list)","name":"088","solution":"(letII (case 6 of O => (case (flip 0.1) of True => 9 | False => randnat) | S => (λn -> randnat)) (λk -> (map (λstate -> (case state#1 of O => randnat | S => (λn -> k#3))) (scanlunit (λacc x -> acc#2) 0 (inc k#1)))))","num_train":4},{"ios":[[["nothing"],"[6, 6, 8, 6, 6, 10, 6, 1, 6, 6, 6, 0]"],[["nothing"],"[6, 23, 6, 4, 6, 6, 6, 12, 3, 8, 6, 6]"],[["nothing"],"[1, 9, 1, 6, 2, 6, 6, 6, 18, 6, 17, 6]"],[["nothing"],"[16, 6, 6, 6, 6, 6, 6, 10, 6, 6, 6, 6]"],[["nothing"],"[7, 11, 6, 7, 6, 6, 6, 6, 13, 6, 8, 6]"],[["nothing"],"[6, 6, 6, 7, 6, 6, 6, 10, 6, 2, 6, 6]"],[["nothing"],"[2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 10, 9]"],[["nothing"],"[6, 6, 10, 6, 6, 6, 6, 6, 6, 6, 6, 10]"]],"type":"(unit -> list)","name":"089","solution":"(letII (case (inc 6) of O => 2 | S => (λn -> n#1)) (λk -> (map (λstate -> (+ (letII state#1 (λx -> (- randnat k#3))) (case (== randnat randnat) of True => randnat | False => k#2))) (scanlunit (λacc x -> (+ acc#2 k#3)) 0 (+ k#1 k#1)))))","num_train":4},{"ios":[[["nothing"],"[1, 12, 20, 9, 6, 11, 1, 1, 22, 2, 7, 5, 5]"],[["nothing"],"[1, 1, 3, 10, 4, 1, 10, 1]"],[["nothing"],"[4, 1, 4, 2, 6, 4, 2, 4]"],[["nothing"],"[2, 4, 1, 7, 1, 4, 4, 7]"],[["nothing"],"[14, 4, 5, 2, 11, 3, 7, 4, 3, 3, 4, 15, 7, 8, 2]"],[["nothing"],"[7, 10, 8, 1, 5, 7, 1, 3]"],[["nothing"],"[3, 1, 7, 1, 1, 4]"],[["nothing"],"[17, 3, 2, 8, 2, 4, 1, 3]"]],"type":"(unit -> list)","name":"090","solution":"(letII (case (flip 0.7) of True => 3 | False => randnat) (λk -> (map (λstate -> (inc (case (case (flip 0.6) of True => randnat | False => state#1) of O => k#2 | S => (λn -> randnat)))) (scanlunit (λacc x -> (case (flip 0.8) of True => randnat | False => acc#2)) 0 (case randnat of O => (+ randnat k#1) | S => (λn -> 8))))))","num_train":4},{"ios":[[["nothing"],"[11, 2, 0]"],[["nothing"],"[12, 0, 0, 17, 2, 11, 28, 3]"],[["nothing"],"[4, 16, 3, 5]"],[["nothing"],"[3, 4]"],[["nothing"],"[2, 4, 0, 0, 1, 0, 14, 3, 2, 20, 0, 24, 14, 28, 0, 2, 4]"],[["nothing"],"[3, 10, 3, 7, 0, 4, 0, 0, 4, 60]"],[["nothing"],"[2, 7, 13, 0, 15]"],[["nothing"],"[4, 0, 2, 0, 1, 7, 3, 2, 3, 5, 66, 3, 78, 84, 9, 1, 0]"]],"type":"(unit -> list)","name":"091","solution":"(letII (letII 6 (λx -> (- (case x#1 of O => x#1 | S => (λn -> x#2)) (letII x#1 (λx -> (- x#1 randnat)))))) (λk -> (map (λstate -> (case randnat of O => state#1 | S => (λn -> n#1))) (scanlunit (λacc x -> (letII randnat (λx -> (+ acc#3 k#4)))) 0 (+ (case randnat of O => k#1 | S => (λn -> randnat)) randnat)))))","num_train":4},{"ios":[[["nothing"],"[0, 9, 3]"],[["nothing"],"[1, 0, 2]"],[["nothing"],"[1, 0, 1]"],[["nothing"],"[0, 4, 1]"],[["nothing"],"[0, 6, 9]"],[["nothing"],"[0, 1, 11]"],[["nothing"],"[0, 0, 11]"],[["nothing"],"[8, 1, 7]"]],"type":"(unit -> list)","name":"092","solution":"(letII 2 (λk -> (map (λstate -> (case randnat of O => state#1 | S => (λn -> randnat))) (scanlunit (λacc x -> acc#2) 0 (letII k#1 (λx -> (inc k#2)))))))","num_train":4},{"ios":[[["nothing"],"[0, 14, 13]"],[["nothing"],"[10, 17, 25, 28, 25, 30]"],[["nothing"],"[10, 4, 6, 9, 18, 26, 40, 35]"],[["nothing"],"[19, 10, 16, 16, 18, 24, 25, 26, 27, 26, 25]"],[["nothing"],"[11, 21]"],[["nothing"],"[13, 26, 36, 46, 46, 44]"],[["nothing"],"[7, 5, 22, 18, 19, 20, 34, 32]"],[["nothing"],"[16, 5, 10, 12, 14, 14, 19, 25, 41]"]],"type":"(unit -> list)","name":"093","solution":"(letII (+ randnat 7) (λk -> (map (λstate -> (+ randnat state#1)) (scanlunit (λacc x -> (letII acc#2 (λx -> (+ randnat x#1)))) 0 (case (letII randnat (λx -> (case (flip 0.6) of True => randnat | False => k#2))) of O => (letII 9 (λx -> (+ (+ randnat 2) randnat))) | S => (λn -> (case (flip 0.9) of True => n#1 | False => k#2)))))))","num_train":4},{"ios":[[["nothing"],"[8, 10, 9, 10, 8, 9, 10, 14]"],[["nothing"],"[9, 20, 17, 24, 14, 15, 10, 9]"],[["nothing"],"[19, 8, 9, 7, 7, 17, 18, 8]"],[["nothing"],"[8, 10, 24, 12, 7, 9, 21, 7]"],[["nothing"],"[10, 7, 11, 10, 8, 11, 12, 14]"],[["nothing"],"[8, 7, 7, 15, 10, 8, 23, 14]"],[["nothing"],"[16, 21, 17, 16, 12, 10, 8, 9]"],[["nothing"],"[16, 7, 8, 8, 9, 22, 7, 8]"]],"type":"(unit -> list)","name":"094","solution":"(letII 7 (λk -> (map (λstate -> (letII randnat (λx -> (+ k#3 (+ state#2 randnat))))) (scanlunit (λacc x -> acc#2) 0 (inc k#1)))))","num_train":4},{"ios":[[["nothing"],"[6, 0, 5, 2, 2, 0, 2, 2, 6]"],[["nothing"],"[5, 2, 0, 17, 4, 0, 6, 4, 15]"],[["nothing"],"[9, 16, 6, 0, 0, 1, 6, 1, 4]"],[["nothing"],"[5, 1, 6, 0, 2, 3, 2, 0, 2]"],[["nothing"],"[2, 1, 0, 2, 2, 0, 10, 7, 6]"],[["nothing"],"[2, 1, 0, 13, 6, 0, 9, 0, 0]"],[["nothing"],"[5, 15, 0, 8, 0, 11, 3, 1, 1]"],[["nothing"],"[1, 16, 2, 5, 0, 16, 1, 1, 9]"]],"type":"(unit -> list)","name":"095","solution":"(letII 9 (λk -> (map (λstate -> (- randnat state#1)) (scanlunit (λacc x -> acc#2) 0 k#1))))","num_train":4},{"ios":[[["nothing"],"[9, 5, 6]"],[["nothing"],"[6, 16, 13]"],[["nothing"],"[21, 10, 7]"],[["nothing"],"[17, 4, 12]"],[["nothing"],"[6, 10, 6]"],[["nothing"],"[7, 7, 4]"],[["nothing"],"[11, 7, 5]"],[["nothing"],"[8, 10, 4]"]],"type":"(unit -> list)","name":"096","solution":"(letII (- 8 5) (λk -> (map (λstate -> (letII state#1 (λx -> (+ 4 randnat)))) (scanlunit (λacc x -> (case (iseven (inc 4)) of True => k#3 | False => acc#2)) 0 k#1))))","num_train":4},{"ios":[[["nothing"],"[2, 0, 3, 3, 1]"],[["nothing"],"[0, 0, 0, 2, 6]"],[["nothing"],"[3, 0, 0, 2, 0]"],[["nothing"],"[1, 4, 2, 2, 2, 1, 0, 0, 0, 0, 6]"],[["nothing"],"[3, 0, 3, 7, 0]"],[["nothing"],"[4, 3, 0, 3, 3, 2, 0, 2]"],[["nothing"],"[6, 3, 3, 3, 3, 7, 0, 2, 0, 3, 2, 0, 4]"],[["nothing"],"[2, 0, 0, 0, 0]"]],"type":"(unit -> list)","name":"097","solution":"(letII 8 (λk -> (map (λstate -> (letII state#1 (λx -> (- (case (flip 0.7) of True => 3 | False => 7) randnat)))) (scanlunit (λacc x -> (- acc#2 8)) 0 (+ (letII randnat (λx -> (- randnat randnat))) (letII (+ 4 k#1) (λx -> (case 6 of O => (+ randnat randnat) | S => (λn -> n#1)))))))))","num_train":4},{"ios":[[["nothing"],"[1, 8, 5, 4, 10, 4, 4, 1, 4, 6, 2]"],[["nothing"],"[6, 8, 4, 13, 6, 3, 2, 1, 2, 4, 1]"],[["nothing"],"[1, 3, 4, 27, 2, 0, 6, 2]"],[["nothing"],"[4, 2, 0, 5, 5, 11, 4, 0, 4, 1, 4]"],[["nothing"],"[3, 2, 1, 0, 0, 1, 4, 12]"],[["nothing"],"[7, 2, 0, 8, 0, 4, 4, 0, 4, 0, 4]"],[["nothing"],"[3, 4, 3, 7, 2, 1, 4, 1]"],[["nothing"],"[4, 0, 5, 0, 1, 2, 4, 2, 1, 7, 0]"]],"type":"(unit -> list)","name":"098","solution":"(letII (inc (+ 7 (letII randnat (λx -> (case x#1 of O => x#1 | S => (λn -> 3)))))) (λk -> (map (λstate -> (case (flip 0.8) of True => (letII state#1 (λx -> (case randnat of O => 4 | S => (λn -> randnat)))) | False => (case randnat of O => randnat | S => (λn -> randnat)))) (scanlunit (λacc x -> (case (letII acc#2 (λx -> (+ 5 1))) of O => k#3 | S => (λn -> k#4))) 0 k#1))))","num_train":4},{"ios":[[["nothing"],"[1, 2, 3, 4, 5, 6, 7]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7]"],[["nothing"],"[1, 2, 3, 4, 5, 6, 7]"]],"type":"(unit -> list)","name":"099","solution":"(letII (- (letII 5 (λx -> (- x#1 randnat))) (case (flip 0.1) of True => randnat | False => randnat)) (λk -> (map (λstate -> (letII k#2 (λx -> (case state#2 of O => randnat | S => (λn -> state#3))))) (scanlunit (λacc x -> (letII randnat (λx -> (inc acc#3)))) 0 (letII k#1 (λx -> (case (iseven (- k#2 k#2)) of True => 7 | False => k#2)))))))","num_train":4}],"task_info":[{"q_expr":-25.607225628387873,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":4},{"q_expr":-22.85583099694852,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":3},{"q_expr":-54.61327645429285,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-63.3207674890024,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-60.2509191264445,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-53.196060182834366,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-62.49554740154006,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-78.78392905537078,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-17.845195702852266,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":2},{"q_expr":-50.273436381101014,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-42.80706481451654,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-34.125899204974544,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":5},{"q_expr":-61.45341154560001,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-19.293183632977495,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":3},{"q_expr":-66.05472916227261,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-27.34734186446409,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":4},{"q_expr":-73.36868601867778,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-72.8273598841134,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-86.85569250967004,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-65.27990355920895,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-35.136169983154424,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-61.64326100243057,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-32.86435654882713,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-54.73242405691102,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-52.988455251519326,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-38.13350353807539,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":7},{"q_expr":-60.377272112783956,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-36.80999616505426,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":5},{"q_expr":-44.61432847028057,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-29.22299661068117,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":4},{"q_expr":-55.45782328130816,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":7},{"q_expr":-10.387394086950856,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":2},{"q_expr":-38.44205718501225,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":7},{"q_expr":-60.88085791936547,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-47.14290206672104,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":7},{"q_expr":-73.7503481374353,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-58.29370685392025,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-36.997921824202514,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":7},{"q_expr":-48.79023055880983,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-42.90264614218924,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-45.15047190203084,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":7},{"q_expr":-53.709257990745414,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-45.52341381843345,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-59.421760667756516,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-60.88397401936608,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-19.84174958472633,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":3},{"q_expr":-57.331997642354814,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":7},{"q_expr":-17.11668037845453,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":2},{"q_expr":-33.50586049623524,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":5},{"q_expr":-59.8706215746488,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-66.64091454580775,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-73.37168122248185,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-42.432371365075134,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":5},{"q_expr":-65.08593038519452,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-37.85251898707133,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-60.23553583610508,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-37.87261965877833,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-75.14284026509318,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-28.005120901186245,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":4},{"q_expr":-27.75280697257226,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":5},{"q_expr":-62.742609760413565,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":7},{"q_expr":-59.77943511202833,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-59.4963495247476,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-48.411684540052924,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-23.029853750927778,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":4},{"q_expr":-76.15681336091671,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-32.40724820756713,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":5},{"q_expr":-36.93178202169797,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-50.74344001034675,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-40.87072411647738,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-35.34926319861513,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-41.50778183038627,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":7},{"q_expr":-49.89889318333144,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-62.74884196041477,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-36.25165102532029,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-71.96836785619237,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-62.169031582012,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-55.4617967468202,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-44.631347475450156,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-47.0277623630781,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-53.70792785724682,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-53.52845125258509,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-50.71972348372944,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-61.19638023561844,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-38.14877101020618,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-72.03863137588078,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":10},{"q_expr":-67.63398163368299,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-34.521313977229205,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":5},{"q_expr":-33.295139464919586,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":5},{"q_expr":-53.59162520676087,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-51.84617601619872,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-53.549288393606986,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":8},{"q_expr":-20.304784544655973,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":3},{"q_expr":-68.83662430451034,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-25.520214251398244,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":4},{"q_expr":-13.64549062497234,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":2},{"q_expr":-42.825413953184736,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":6},{"q_expr":-76.49272443172885,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-72.93553091844029,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9},{"q_expr":-64.30577182764496,"p_inputs":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"size":9}],"path":"out/fuzz-datasets/2024-11-13/04-07-50/dataset.json"}